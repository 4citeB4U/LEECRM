<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="Agent Lee CRM System - The mobile-first, all-in-one outreach system for real-world artists and organizers">
  <title>üß† Agent Lee CRM System</title>
  <!-- TailwindCSS via CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Google Maps API with key from .env -->
  <script>
    // Load Google Maps API key from .env
    function loadGoogleMapsAPI() {
      // Use the API key
      const googleMapsAPIKey = 'AIzaSyBNLrJhOMz6idD05pzfn5lhA-TAw-mAZCU'; // API key

      console.log("Loading Google Maps with API key");

      // Create script element for Google Maps API
      const script = document.createElement('script');
      script.src = `https://maps.googleapis.com/maps/api/js?key=${googleMapsAPIKey}&libraries=places&callback=initMap`;
      script.async = true;
      script.defer = true;
      script.onerror = function() {
        console.error("Failed to load Google Maps API. Check your API key.");
        alert("Google Maps failed to load. Please check your internet connection and API key.");
      };

      // Add script to document
      document.head.appendChild(script);

      console.log("Google Maps API script added to document head");
    }

    // Define initMap function in global scope so Google Maps API can find it
    window.initMap = function() {
      console.log("Google Maps API callback received");
      if (typeof initializeMap === 'function') {
        initializeMap();
      } else {
        console.error("initializeMap function not found");
      }
    };

    // Call the function to load the API when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      console.log("DOM Content Loaded - Loading Google Maps API");
      setTimeout(loadGoogleMapsAPI, 100); // Small delay to ensure everything is ready
    });
  </script>
  <!-- Recorder.js via CDN -->
  <script src="https://cdn.jsdelivr.net/npm/recordrtc@5.6.2/RecordRTC.min.js"></script>
  <!-- IndexedDB library -->
  <script src="https://cdn.jsdelivr.net/npm/idb-keyval@6/dist/umd.js"></script>
  <!-- Music Store Data -->
  <script src="complete_music_store_list.js"></script>
  <script src="gh.js"></script>
  <style>
    /* Custom CSS */
    .tab-active {
      border-bottom: 3px solid #3b82f6;
      color: #3b82f6;
    }
    .side-menu {
      height: calc(100vh - 4rem);
      overflow-y: auto;
    }
    #map {
      height: 100%;
      min-height: 300px;
      width: 100%;
    }
    .agent-panel {
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      z-index: 999;
      transition: all 0.3s ease;
      max-width: 400px;
      width: 100%;
    }
    .agent-panel.minimized {
      width: 60px;
      height: 60px;
      max-width: 60px;
      overflow: hidden;
      padding: 0;
      border-radius: 50%;
    }
    .recording-wave {
      animation: recording 1.5s infinite ease-in-out;
    }
    @keyframes recording {
      0% { transform: scale(1); background-color: rgba(239, 68, 68, 0.7); }
      50% { transform: scale(1.1); background-color: rgba(239, 68, 68, 0.9); }
      100% { transform: scale(1); background-color: rgba(239, 68, 68, 0.7); }
    }
    /* Hide scrollbar but allow scrolling */
    .hide-scrollbar::-webkit-scrollbar {
      display: none;
    }
    .hide-scrollbar {
      -ms-overflow-style: none;
      scrollbar-width: none;
    }
  </style>
</head>
<body class="bg-gray-100 text-gray-800">
  <div class="min-h-screen flex flex-col">
    <!-- Header / Nav Bar -->
    <header class="bg-white shadow-sm">
      <div class="flex items-center justify-between p-4">
        <div class="flex items-center">
          <span class="text-xl font-bold">üß† Agent Lee CRM</span>
        </div>
        <button id="loginBtn" class="p-2 rounded-full hover:bg-gray-200">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
        </button>
      </div>

      <!-- Enhanced Voice Dictation Bar - Always Visible at Top -->
      <div class="bg-gradient-to-r from-red-500 to-red-600 p-3 border-b border-red-700 shadow-md">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <button id="global-record-btn" class="p-3 rounded-full bg-white text-red-600 hover:bg-gray-100 flex items-center shadow-md transition-all duration-200 mr-3">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
              </svg>
            </button>
            <button id="global-stop-record" class="hidden p-3 rounded-full bg-white text-gray-700 hover:bg-gray-100 flex items-center shadow-md transition-all duration-200 mr-3">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z" />
              </svg>
            </button>
            <div class="mr-3">
              <div id="recording-wave" class="hidden w-4 h-4 bg-white rounded-full recording-wave"></div>
            </div>
            <span class="font-medium text-white">Voice Command &amp; Dictation</span>
          </div>
          <div id="dictation-status" class="text-sm text-white flex-grow mx-4 hidden">
            <span class="font-medium">Listening:</span> <span id="dictation-result">Speak now...</span>
          </div>
          <div id="dictation-controls" class="flex items-center space-x-2 hidden">
            <button id="dictation-cancel" class="text-sm px-3 py-1.5 bg-red-700 border border-red-300 rounded-md hover:bg-red-800 text-white font-medium">
              Cancel
            </button>
            <button id="dictation-process" class="text-sm px-3 py-1.5 bg-white text-red-600 rounded-md hover:bg-gray-100 font-medium">
              Process
            </button>
          </div>
          <div class="flex items-center">
            <span id="dictation-hint" class="text-sm text-white opacity-80">Press to start voice command or dictation</span>
          </div>
        </div>
      </div>

      <!-- Navigation Tabs -->
      <div class="flex overflow-x-auto hide-scrollbar border-b border-gray-200">
        <button data-tab="map" class="tab-active flex-shrink-0 px-5 py-3 font-medium focus:outline-none">
          üó∫Ô∏è Map View
        </button>
        <button data-tab="records" class="flex-shrink-0 px-5 py-3 text-gray-500 font-medium focus:outline-none">
          üóÇÔ∏è Records
        </button>
        <button data-tab="phone" class="flex-shrink-0 px-5 py-3 text-gray-500 font-medium focus:outline-none">
          üìû Phone
        </button>
        <button data-tab="campaigns" class="flex-shrink-0 px-5 py-3 text-gray-500 font-medium focus:outline-none">
          üì§ Campaigns
        </button>
        <button data-tab="analytics" class="flex-shrink-0 px-5 py-3 text-gray-500 font-medium focus:outline-none">
          üìä Analytics
        </button>
        <button data-tab="visits" class="flex-shrink-0 px-5 py-3 text-gray-500 font-medium focus:outline-none">
          üìç Visits
        </button>
        <button data-tab="todos" class="flex-shrink-0 px-5 py-3 text-gray-500 font-medium focus:outline-none">
          ‚úÖ To-Dos
        </button>
        <button type="button" data-tab="timeline" class="flex-shrink-0 px-5 py-3 text-gray-500 font-medium focus:outline-none">
          ‚è±Ô∏è Timeline
        </button>
        <button type="button" data-tab="business-card" class="flex-shrink-0 px-5 py-3 text-gray-500 font-medium focus:outline-none">
          üìá Business Card
        </button>
        <button type="button" data-tab="email-signature" class="flex-shrink-0 px-5 py-3 text-gray-500 font-medium focus:outline-none">
          ‚úâÔ∏è Email Signature
        </button>
      </div>
    </header>

    <!-- Main Content Area -->
    <main class="flex-grow flex flex-col">
      <!-- Map Tab Content -->
      <section id="map-tab" class="flex-grow flex flex-col md:flex-row">
        <div class="w-full md:w-3/4 h-[50vh] md:h-auto">
          <div id="map" class="w-full h-full"></div>
        </div>
        <div class="w-full md:w-1/4 bg-white p-4 overflow-y-auto">
          <div class="mb-4">
            <h2 class="text-lg font-bold mb-2">Nearby Leads</h2>
            <div class="flex space-x-2 mb-4 overflow-x-auto hide-scrollbar pb-2">
              <button class="distance-filter flex-shrink-0 px-3 py-1 bg-blue-500 text-white rounded-full text-sm" data-distance="5">5 mi</button>
              <button class="distance-filter flex-shrink-0 px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm" data-distance="10">10 mi</button>
              <button class="distance-filter flex-shrink-0 px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm" data-distance="25">25 mi</button>
              <button class="distance-filter flex-shrink-0 px-3 py-1 bg-gray-200 text-gray-700 rounded-full text-sm" data-distance="50">50 mi</button>
            </div>
            <input type="text" id="map-search" placeholder="Search by name, city..." class="w-full p-2 border border-gray-300 rounded-md">
            <div class="flex flex-wrap mt-2 gap-1">
              <button class="state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="WI">WI</button>
              <button class="state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="IL">IL</button>
              <button class="state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="MN">MN</button>
              <button class="state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="FL">FL</button>
              <button class="state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="IN">IN</button>
              <button class="state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="MI">MI</button>
              <button class="state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="TN">TN</button>
              <button class="state-filter px-2 py-1 bg-blue-500 text-white rounded-md text-xs" data-state="ALL">ALL</button>
            </div>
          </div>
          <div id="nearby-list" class="space-y-3">
            <!-- Nearby leads will be populated here -->
            <div class="animate-pulse">
              <div class="rounded bg-gray-200 h-20 mb-2"></div>
              <div class="rounded bg-gray-200 h-20 mb-2"></div>
              <div class="rounded bg-gray-200 h-20 mb-2"></div>
              <div class="rounded bg-gray-200 h-20 mb-2"></div>
            </div>
          </div>
        </div>
      </section>

      <!-- Records Tab -->
      <section id="records-tab" class="hidden p-4">
        <div class="mb-4">
          <h2 class="text-xl font-bold mb-3">CRM Records</h2>
          <div class="flex flex-wrap gap-2 mb-3">
            <input type="text" id="records-search" placeholder="Search..." class="w-full md:w-auto flex-grow p-2 border border-gray-300 rounded-md">
            <select id="records-filter" class="p-2 border border-gray-300 rounded-md">
              <option value="all">All Records</option>
              <option value="visited">Visited</option>
              <option value="unvisited">Unvisited</option>
              <option value="contacted">Contacted</option>
            </select>
            <button id="add-record-btn" class="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 focus:outline-none">
              + Add Record
            </button>
          </div>
          <div class="flex flex-wrap gap-1 mb-3">
            <button class="records-state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="WI">WI</button>
            <button class="records-state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="IL">IL</button>
            <button class="records-state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="MN">MN</button>
            <button class="records-state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="FL">FL</button>
            <button class="records-state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="IN">IN</button>
            <button class="records-state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="MI">MI</button>
            <button class="records-state-filter px-2 py-1 bg-gray-200 text-gray-700 rounded-md text-xs" data-state="TN">TN</button>
            <button class="records-state-filter px-2 py-1 bg-blue-500 text-white rounded-md text-xs" data-state="ALL">ALL</button>
          </div>
        </div>
        <div id="records-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <!-- CRM Records will be populated here -->
          <div class="animate-pulse">
            <div class="rounded bg-gray-200 h-32 mb-2"></div>
            <div class="rounded bg-gray-200 h-32 mb-2"></div>
            <div class="rounded bg-gray-200 h-32 mb-2"></div>
          </div>
        </div>
      </section>

      <!-- Campaigns Tab -->
      <section id="campaigns-tab" class="hidden p-4">
        <div class="mb-4">
          <h2 class="text-xl font-bold mb-3">Campaign Hub</h2>
          <div class="bg-white rounded-md shadow p-4 mb-5">
            <h3 class="text-lg font-medium mb-3">Compose New Campaign</h3>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Subject</label>
                <input type="text" id="campaign-subject" placeholder="Campaign subject..." class="w-full p-2 border border-gray-300 rounded-md">
              </div>
              <div>
                <div class="flex items-center justify-between mb-2">
                  <label class="block text-sm font-medium text-gray-700">Message Template</label>
                  <button id="open-template-modal" class="text-xs text-blue-500 hover:underline">Select Template</button>
                </div>
                <div class="mb-2 text-xs text-gray-500">
                  <span id="selected-template-name">No template selected</span>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-4 gap-3 mb-3">
                  <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer template-option" data-template="custom">
                    <div class="font-medium text-sm">Custom Message</div>
                    <div class="text-xs text-gray-500">Create your own message</div>
                  </div>
                  <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer template-option" data-template="store-email">
                    <div class="font-medium text-sm">Store Email</div>
                    <div class="text-xs text-gray-500">Join the Artist Movement</div>
                  </div>
                  <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer template-option" data-template="community-ally">
                    <div class="font-medium text-sm">Community Ally</div>
                    <div class="text-xs text-gray-500">Supporting Artists</div>
                  </div>
                  <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer template-option" data-template="boost-network">
                    <div class="font-medium text-sm">Boost Network</div>
                    <div class="text-xs text-gray-500">Help Local Artists Win</div>
                  </div>
                  <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer template-option" data-template="quick-direct">
                    <div class="font-medium text-sm">Quick &amp; Direct</div>
                    <div class="text-xs text-gray-500">Short and to the point</div>
                  </div>
                </div>

                <div id="template-preview" class="mt-2 mb-4 p-3 border border-gray-300 rounded-md bg-gray-50 hidden">
                  <div class="flex justify-between items-center mb-2">
                    <h4 class="font-medium text-sm">Template Preview</h4>
                    <button id="use-template-btn" class="text-xs px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600">Use Template</button>
                  </div>
                  <p id="template-preview-content" class="text-sm"></p>
                </div>

                <div class="flex items-center justify-between mb-1">
                  <label class="block text-sm font-medium text-gray-700">Message Body</label>
                  <div class="flex items-center">
                    <span id="selected-template-display" class="text-xs text-gray-500 mr-2">No template selected</span>
                    <button id="open-template-modal-2" class="text-xs text-blue-500 hover:underline">Change Template</button>
                  </div>
                </div>
                <div id="campaign-message" contenteditable="true" class="w-full p-2 border border-gray-300 rounded-md min-h-[150px] focus:outline-none focus:ring-1 focus:ring-blue-500" style="min-height: 150px;"></div>
                <div class="flex items-center mt-1">
                  <span class="text-xs text-gray-500">Email signature will be added automatically</span>
                  <button id="preview-signature-btn" class="ml-auto text-xs text-blue-600 hover:underline">Preview signature</button>
                </div>
                <div id="signature-preview" class="mt-2 p-3 border border-gray-200 rounded-md hidden">
                  <div style="font-family: 'Inter', sans-serif;">
                    <h3 style="font-family: 'Fira Code', monospace; font-size: 16px; font-weight: 600; color: #3182ce; margin: 0;">Leonard Lee / Agent Lee</h3>
                    <p style="font-family: 'Fira Code', monospace; font-size: 12px; color: #718096; margin: 4px 0 0;">&gt; Engineer | Developer</p>

                    <div style="margin-top: 8px;">
                      <div style="display: flex; align-items: center; gap: 8px; font-size: 12px; margin-bottom: 4px;">
                        <span style="color: #3182ce;">‚úâÔ∏è</span>
                        <span>agentlee@rapidwebdevelop.com</span>
                      </div>

                      <div style="display: flex; align-items: center; gap: 8px; font-size: 12px;">
                        <span style="color: #3182ce;">üìû</span>
                        <span>(414) 367-6211 | (414) 626-9992</span>
                      </div>
                    </div>

                    <div style="margin-top: 12px; font-style: italic; font-size: 10px; color: #718096;">Engineering the future, one line of code at a time.</div>
                  </div>
                </div>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Attachments</label>
                <div class="border-dashed border-2 border-gray-300 rounded-md p-4 mb-3">
                  <div id="video-attachments">
                    <div class="flex items-center justify-center flex-col">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 text-gray-400 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4v16M17 4v16M3 8h18M3 16h18" />
                      </svg>
                      <p class="text-sm text-gray-500 mb-2">Add video attachments to your campaign</p>
                      <div class="flex space-x-2">
                        <button id="upload-video-btn" class="text-xs px-3 py-1.5 bg-blue-500 text-white rounded-md hover:bg-blue-600">Upload Video</button>
                        <input type="file" id="video-file-input" accept="video/*" class="hidden">
                        <button id="select-demo-video-btn" class="text-xs px-3 py-1.5 bg-purple-500 text-white rounded-md hover:bg-purple-600">Use Demo Video</button>
                      </div>
                    </div>
                  </div>

                  <!-- Template Selection Modal -->
                  <div id="template-selection-modal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-60 z-50 flex items-center justify-center">
                    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-lg">
                      <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-medium">Select an Email Template</h3>
                        <button id="close-template-modal" class="text-gray-500 hover:text-gray-700">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>

                      <div class="grid grid-cols-1 gap-4">
                        <!-- Template Option 1 -->
                        <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer">
                          <div class="font-medium">Community Ally Appeal</div>
                          <div class="text-xs text-gray-600 mt-1">Supporting Artists in Your Community</div>
                          <div class="mt-2 text-right">
                            <button class="template-preview-btn px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600" data-template="community-ally-template">Use Template</button>
                          </div>
                        </div>

                        <!-- Template Option 2 -->
                        <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer">
                          <div class="font-medium">Store Email</div>
                          <div class="text-xs text-gray-600 mt-1">Your Store Can Help Set Artists Free</div>
                          <div class="mt-2 text-right">
                            <button class="template-preview-btn px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600" data-template="store-email-template">Use Template</button>
                          </div>
                        </div>

                        <!-- Template Option 3 -->
                        <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer">
                          <div class="font-medium">Boost Your Local Artist Network</div>
                          <div class="text-xs text-gray-600 mt-1">Let's Help Local Artists Win</div>
                          <div class="mt-2 text-right">
                            <button class="template-preview-btn px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600" data-template="boost-network-template">Use Template</button>
                          </div>
                        </div>

                        <!-- Template Option 4 -->
                        <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer">
                          <div class="font-medium">Quick &amp; Direct</div>
                          <div class="text-xs text-gray-600 mt-1">Short and to the point</div>
                          <div class="mt-2 text-right">
                            <button class="template-preview-btn px-2 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600" data-template="quick-direct-template">Use Template</button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Video Selection Modal -->
                  <div id="video-selection-modal" class="hidden fixed inset-0 bg-gray-800 bg-opacity-60 z-50 flex items-center justify-center">
                    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-lg">
                      <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-medium">Select a Video</h3>
                        <button id="close-video-modal" class="text-gray-500 hover:text-gray-700">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>

                      <div class="grid grid-cols-1 gap-4">
                        <!-- Video Option 1 -->
                        <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer video-option" data-index="0">
                          <div class="flex">
                            <div class="w-1/3">
                              <img src="https://i.ytimg.com/vi/RW48S30Zt_w/mqdefault.jpg" class="rounded-md" alt="Video thumbnail">
                            </div>
                            <div class="w-2/3 pl-3">
                              <div class="font-medium">LEEWAY Artist Platform Demo</div>
                              <div class="text-xs text-gray-600 mt-1">Overview of the LEEWAY platform features</div>
                            </div>
                          </div>
                        </div>

                        <!-- Video Option 2 -->
                        <div class="border border-gray-200 rounded-md p-3 hover:bg-blue-50 cursor-pointer video-option" data-index="1">
                          <div class="flex">
                            <div class="w-1/3">
                              <img src="https://i.ytimg.com/vi/OnUZ40idgfU/mqdefault.jpg" class="rounded-md" alt="Video thumbnail">
                            </div>
                            <div class="w-2/3 pl-3">
                              <div class="font-medium">How Artists Can Use LEEWAY</div>
                              <div class="text-xs text-gray-600 mt-1">Step-by-step guide for artists</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div id="video-preview-container" class="hidden mt-3">
                    <div class="flex items-center justify-between bg-gray-100 p-2 rounded-md">
                      <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span id="video-name" class="text-sm"></span>
                      </div>
                      <div>
                        <button id="preview-video-btn" class="text-xs px-2 py-1 bg-blue-100 text-blue-600 rounded-md mr-2">Preview</button>
                        <button id="remove-video-btn" class="text-xs px-2 py-1 bg-red-100 text-red-600 rounded-md">Remove</button>
                      </div>
                    </div>
                    <div class="mt-2 hidden" id="video-player-container">
                      <iframe id="video-player" class="w-full rounded-md" style="height: 200px;" frameborder="0" allowfullscreen></iframe>
                    </div>
                  </div>
                </div>

                <label class="block text-sm font-medium text-gray-700 mb-1">Recipients</label>
                <div class="mb-3">
                  <h4 class="text-sm font-medium text-gray-600">By Category:</h4>
                  <div class="flex flex-wrap gap-2 mt-1">
                    <button class="tag-filter px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-blue-100 border border-gray-300" data-tag="Record Stores">
                      <span class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3" />
                        </svg>
                        Record Stores
                      </span>
                    </button>
                    <button class="tag-filter px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-blue-100 border border-gray-300" data-tag="Instrument Shops">
                      <span class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 8l3 5m0 0l3-5m-3 5v8m-3-3h6m-6 3h6m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Instrument Shops
                      </span>
                    </button>
                    <button class="tag-filter px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-blue-100 border border-gray-300" data-tag="Music Schools">
                      <span class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path d="M12 14l9-5-9-5-9 5 9 5z" />
                          <path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222" />
                        </svg>
                        Music Schools
                      </span>
                    </button>
                    <button class="tag-filter px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-blue-100 border border-gray-300" data-tag="Studios">
                      <span class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
                        </svg>
                        Studios
                      </span>
                    </button>
                  </div>
                </div>

                <div class="mb-3">
                  <h4 class="text-sm font-medium text-gray-600">By State:</h4>
                  <div class="mt-1">
                    <select id="state-select" class="p-2 border border-gray-300 rounded-md w-full">
                      <option value="ALL">All States</option>
                      <option value="WI">Wisconsin</option>
                      <option value="IL">Illinois</option>
                      <option value="MN">Minnesota</option>
                      <option value="FL">Florida</option>
                      <option value="IN">Indiana</option>
                      <option value="MI">Michigan</option>
                      <option value="TN">Tennessee</option>
                    </select>
                  </div>
                </div>

                <div class="mb-3">
                  <h4 class="text-sm font-medium text-gray-600">By Specific Store:</h4>
                  <div class="mt-1">
                    <select id="store-select" class="p-2 border border-gray-300 rounded-md w-full">
                      <option value="ALL">All Stores</option>
                      <!-- Stores will be populated based on filters -->
                    </select>
                  </div>
                  <div id="selected-store-display" class="mt-1 text-sm font-medium text-blue-600 hidden"></div>
                </div>

                <div class="mt-3 bg-blue-50 p-2 rounded-md border border-blue-100">
                  <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <p class="text-sm text-blue-700"><span id="recipient-count" class="font-bold">0</span> recipients selected</p>
                  </div>
                </div>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Delivery Method</label>
                <div class="flex flex-wrap gap-2">
                  <label class="inline-flex items-center border border-gray-200 p-2 rounded-md">
                    <input type="checkbox" class="form-checkbox" checked>
                    <span class="ml-2">Email</span>
                  </label>
                  <a href="https://t.me/agentlee" target="_blank" class="inline-flex items-center border border-gray-200 p-2 rounded-md hover:bg-gray-50 telegram-link">
                    <input type="checkbox" class="form-checkbox">
                    <span class="ml-2">Telegram</span>
                  </a>
                  <a href="https://teams.microsoft.com/l/meetup-join/19%3ameeting_MzRiMGFjYjUtMzE2NS00NWFjLTlmYzktMWMzZDNiYjJjYjVk%40thread.v2/0" target="_blank" class="inline-flex items-center border border-gray-200 p-2 rounded-md hover:bg-gray-50 teams-link">
                    <input type="checkbox" id="teams-meeting-checkbox" class="form-checkbox video-meeting-checkbox">
                    <span class="ml-2 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                      Teams Meeting
                    </span>
                  </a>
                  <a href="https://zoom.us/j/9874562130?pwd=aBcDeFgHiJkL" target="_blank" class="inline-flex items-center border border-gray-200 p-2 rounded-md hover:bg-gray-50 zoom-link">
                    <input type="checkbox" id="zoom-meeting-checkbox" class="form-checkbox video-meeting-checkbox">
                    <span class="ml-2 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                      Zoom Meeting
                    </span>
                  </a>
                </div>

                <div id="video-options" class="mt-2 p-3 bg-gray-50 rounded-md hidden">
                  <div class="text-sm font-medium mb-2">Video Meeting Options</div>
                  <div class="grid grid-cols-2 gap-2">
                    <div>
                      <label class="block text-xs text-gray-700 mb-1">Date</label>
                      <input type="date" id="meeting-date" class="w-full p-1.5 text-sm border border-gray-300 rounded-md" min="2023-05-20">
                    </div>
                    <div>
                      <label class="block text-xs text-gray-700 mb-1">Time</label>
                      <input type="time" id="meeting-time" class="w-full p-1.5 text-sm border border-gray-300 rounded-md">
                    </div>
                    <div class="col-span-2">
                      <label class="block text-xs text-gray-700 mb-1">Meeting Title</label>
                      <input type="text" id="meeting-title" class="w-full p-1.5 text-sm border border-gray-300 rounded-md" placeholder="Discuss new releases">
                    </div>
                    <div class="col-span-2">
                      <label class="block text-xs text-gray-700 mb-1">Meeting Description</label>
                      <textarea id="meeting-description" class="w-full p-1.5 text-sm border border-gray-300 rounded-md" rows="2" placeholder="Brief description of the meeting agenda..."></textarea>
                    </div>
                    <div class="col-span-2">
                      <label class="block text-xs text-gray-700 mb-1">Meeting Link</label>
                      <div id="meeting-link-container" class="flex items-center">
                        <input type="text" id="meeting-link" class="flex-grow p-1.5 text-sm border border-gray-300 rounded-l-md" placeholder="https://teams.microsoft.com/l/meetup-join/..." readonly>
                        <button id="copy-link-btn" class="p-1.5 bg-blue-500 text-white text-sm rounded-r-md hover:bg-blue-600">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                          </svg>
                        </button>
                      </div>
                      <div class="mt-1 text-xs text-gray-500">Meeting link will be automatically generated when you send the campaign</div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="flex justify-between">
                <button id="save-template-btn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none">
                  Save as Template
                </button>
                <div>
                  <button id="schedule-btn" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 focus:outline-none mr-2">
                    Schedule
                  </button>
                  <button id="send-campaign-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none">
                    Send Now
                  </button>
                </div>
              </div>
            </div>
          </div>

          <h3 class="text-lg font-medium mb-3">Past Campaigns</h3>
          <div id="past-campaigns" class="space-y-4">
            <div class="bg-white rounded-md shadow p-4 hover:shadow-md transition">
              <div class="flex justify-between items-start">
                <div>
                  <h4 class="font-medium">Wisconsin Studio Outreach</h4>
                  <p class="text-sm text-gray-600">Sent May 15, 2023 ‚Ä¢ 45 recipients</p>
                </div>
                <div class="text-right">
                  <span class="inline-block px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">72% Open Rate</span>
                </div>
              </div>
              <div class="mt-3 flex space-x-2">
                <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">View Details</button>
                <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">Duplicate</button>
                <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">Follow Up</button>
              </div>
            </div>
            <div class="bg-white rounded-md shadow p-4 hover:shadow-md transition">
              <div class="flex justify-between items-start">
                <div>
                  <h4 class="font-medium">New Release Announcement</h4>
                  <p class="text-sm text-gray-600">Sent Apr 28, 2023 ‚Ä¢ 120 recipients</p>
                </div>
                <div class="text-right">
                  <span class="inline-block px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">68% Open Rate</span>
                </div>
              </div>
              <div class="mt-3 flex space-x-2">
                <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">View Details</button>
                <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">Duplicate</button>
                <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">Follow Up</button>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Business Card Tab -->
      <section id="business-card-tab" class="hidden p-4">
        <div class="max-w-md mx-auto bg-white rounded-lg shadow-md p-6">
          <h2 class="text-xl font-bold mb-4 text-center">Digital Business Card</h2>
          <div class="mb-6 text-center">
            <img src="digitalcard.png" alt="Leonard Lee Digital Business Card" class="max-w-full h-auto rounded-lg shadow-sm">
          </div>
          <div class="grid grid-cols-1 gap-4">
            <a href="tel:4143676211" class="block w-full py-3 px-4 bg-blue-600 text-white text-center rounded-lg hover:bg-blue-700 transition duration-200">
              Call Leonard
            </a>
            <a href="mailto:agentlee@rapidwebdevelop.com" class="block w-full py-3 px-4 bg-blue-600 text-white text-center rounded-lg hover:bg-blue-700 transition duration-200">
              Email Leonard
            </a>
            <a href="leonard_lee.vcf" class="block w-full py-3 px-4 bg-blue-600 text-white text-center rounded-lg hover:bg-blue-700 transition duration-200" download>
              Save Contact
            </a>
          </div>
        </div>
      </section>

      <!-- Email Signature Tab -->
      <section id="email-signature-tab" class="hidden p-4">
        <style>
          .signature-container {
            max-width: 600px;
            padding: 20px;
          }
          .signature {
            border-radius: 8px;
            overflow: hidden;
            background-color: white;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid #e2e8f0;
          }
          .signature-header {
            background: linear-gradient(135deg, #3182ce, #805ad5);
            padding: 16px;
            position: relative;
            overflow: hidden;
          }
          .name {
            font-family: 'Fira Code', monospace;
            font-size: 1.5rem;
            font-weight: 600;
            color: white;
            margin: 0;
            position: relative;
            z-index: 2;
          }
          .title {
            font-family: 'Fira Code', monospace;
            font-size: 0.875rem;
            color: rgba(255, 255, 255, 0.9);
            margin: 4px 0 0;
            position: relative;
            z-index: 2;
          }
        </style>
        <div class="max-w-2xl mx-auto">
          <h2 class="text-xl font-bold mb-4">Email Signature</h2>
          <div class="signature-container">
            <div class="signature" id="email-signature">
              <div class="signature-header">
                <h1 class="name">Leonard Lee / Agent Lee</h1>
                <p class="title">&gt; Engineer | Developer</p>
              </div>

              <div class="signature-body p-4">
                <div class="contact-info">
                  <div class="contact-item flex items-center gap-2 mb-2">
                    <div class="icon text-blue-500">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4zm2-1a1 1 0 0 0-1 1v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2zm13 2.383-4.708 2.825L15 11.105V5.383zm-.034 6.876-5.64-3.471L8 9.583l-1.326-.795-5.64 3.47A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.741zM1 11.105l4.708-2.897L1 5.383v5.722z"/>
                      </svg>
                    </div>
                    <span>agentlee@rapidwebdevelop.com</span>
                  </div>

                  <div class="contact-item flex items-center gap-2">
                    <div class="icon text-blue-500">
                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                        <path d="M3.654 1.328a.678.678 0 0 0-1.015-.063L1.605 2.3c-.483.484-.661 1.169-.45 1.77a17.568 17.568 0 0 0 4.168 6.608 17.569 17.569 0 0 0 6.608 4.168c.601.211 1.286.033 1.77-.45l1.034-1.034a.678.678 0 0 0-.063-1.015l-2.307-1.794a.678.678 0 0 0-.58-.122l-2.19.547a1.745 1.745 0 0 1-1.657-.459L5.482 8.062a1.745 1.745 0 0 1-.46-1.657l.548-2.19a.678.678 0 0 0-.122-.58L3.654 1.328zM1.884.511a1.745 1.745 0 0 1 2.612.163L6.29 2.98c.329.423.445.974.315 1.494l-.547 2.19a.678.678 0 0 0 .178.643l2.457 2.457a.678.678 0 0 0 .644.178l2.189-.547a1.745 1.745 0 0 1 1.494.315l2.306 1.794c.829.645.905 1.87.163 2.611l-1.034 1.034c-.74.74-1.846 1.065-2.877.702a18.634 18.634 0 0 1-7.01-4.42 18.634 18.634 0 0 1-4.42-7.009c-.362-1.03-.037-2.137.703-2.877L1.885.511z"/>
                      </svg>
                    </div>
                    <span>(414) 367-6211 | (414) 626-9992</span>
                  </div>
                </div>
              </div>

              <div class="footer border-t border-gray-200 p-3 flex items-center justify-between">
                <div class="slogan text-sm text-gray-500 italic">Engineering the future, one line of code at a time.</div>
                <div class="tech-stack flex gap-2">
                  <div class="tech-badge bg-gray-800 text-white text-xs px-2 py-1 rounded">LEEWAY</div>
                  <div class="tech-badge bg-gray-800 text-white text-xs px-2 py-1 rounded">MCP</div>
                </div>
              </div>
            </div>
            <div class="mt-4 text-center">
              <button type="button" id="copy-signature-btn" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
                Copy Signature to Clipboard
              </button>
            </div>
          </div>
        </div>
      </section>

      <!-- Analytics Tab -->
      <section id="analytics-tab" class="hidden p-4">
        <div class="mb-4">
          <h2 class="text-xl font-bold mb-3">Campaign Analytics</h2>

          <!-- Advanced Summary KPIs -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-5">
            <div class="bg-white p-4 rounded-md shadow">
              <div class="text-sm text-gray-500 mb-1">Average Open Rate</div>
              <div class="text-2xl font-bold">68.5%</div>
              <div class="text-xs text-green-500 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clip-rule="evenodd" />
                </svg>
                3.2% from last month
              </div>
            </div>
            <div class="bg-white p-4 rounded-md shadow">
              <div class="text-sm text-gray-500 mb-1">Average Response Rate</div>
              <div class="text-2xl font-bold">12.3%</div>
              <div class="text-xs text-green-500 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clip-rule="evenodd" />
                </svg>
                1.5% from last month
              </div>
            </div>
            <div class="bg-white p-4 rounded-md shadow">
              <div class="text-sm text-gray-500 mb-1">Total Leads</div>
              <div class="text-2xl font-bold">247</div>
              <div class="text-xs text-gray-500">42% uncontacted</div>
            </div>
          </div>

          <!-- Intelligence Cards - Enhanced -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-5">
            <div class="bg-white p-4 rounded-md shadow relative overflow-hidden">
              <div class="absolute top-0 right-0 w-20 h-20 bg-blue-100 rounded-full -mt-6 -mr-6 flex items-center justify-center opacity-20">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="text-sm text-blue-600 font-medium mb-1">Highest Performing</div>
              <div class="text-base font-bold">Bay View Studios</div>
              <div class="text-xs text-gray-500 mt-1">84% Open Rate ‚Ä¢ 22% Reply</div>
              <button class="mt-2 text-xs px-2 py-1 border border-blue-300 text-blue-500 rounded-md hover:bg-blue-50">View Details</button>
            </div>

            <div class="bg-white p-4 rounded-md shadow relative overflow-hidden">
              <div class="absolute top-0 right-0 w-20 h-20 bg-amber-100 rounded-full -mt-6 -mr-6 flex items-center justify-center opacity-20">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="text-sm text-amber-600 font-medium mb-1">Leads Needing Follow-Up</div>
              <div class="text-base font-bold">27 Leads</div>
              <div class="text-xs text-gray-500 mt-1">Opened but no reply (past 7 days)</div>
              <button class="mt-2 text-xs px-2 py-1 border border-amber-300 text-amber-500 rounded-md hover:bg-amber-50">Take Action</button>
            </div>

            <div class="bg-white p-4 rounded-md shadow relative overflow-hidden">
              <div class="absolute top-0 right-0 w-20 h-20 bg-green-100 rounded-full -mt-6 -mr-6 flex items-center justify-center opacity-20">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="text-sm text-green-600 font-medium mb-1">Best Send Time</div>
              <div class="text-base font-bold">Tuesday at 11 AM</div>
              <div class="text-xs text-gray-500 mt-1">28% higher open rate on average</div>
              <button class="mt-2 text-xs px-2 py-1 border border-green-300 text-green-500 rounded-md hover:bg-green-50">Schedule Now</button>
            </div>

            <div class="bg-white p-4 rounded-md shadow relative overflow-hidden">
              <div class="absolute top-0 right-0 w-20 h-20 bg-purple-100 rounded-full -mt-6 -mr-6 flex items-center justify-center opacity-20">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="text-sm text-purple-600 font-medium mb-1">Best Geography</div>
              <div class="text-base font-bold">Milwaukee</div>
              <div class="text-xs text-gray-500 mt-1">22% higher engagement than Chicago</div>
              <button class="mt-2 text-xs px-2 py-1 border border-purple-300 text-purple-500 rounded-md hover:bg-purple-50">View Map</button>
            </div>
          </div>

          <!-- Enhanced Filter Bar with Tag Filtering -->
          <div class="bg-white p-4 rounded-md shadow mb-5">
            <div class="flex flex-wrap gap-2 mb-3">
              <div class="text-sm font-medium text-gray-600 mr-1">Filter by Tag:</div>
              <button class="text-xs px-3 py-1 bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200">Studios</button>
              <button class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200">Record Stores</button>
              <button class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200">Universities</button>
              <button class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200">Instrument Shops</button>
              <button class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200">Not Contacted</button>
            </div>
            <div class="flex flex-wrap gap-2">
              <div class="text-sm font-medium text-gray-600 mr-1">Region:</div>
              <button class="text-xs px-3 py-1 bg-blue-500 text-white rounded-full">All</button>
              <button class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200">Milwaukee</button>
              <button class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200">Chicago</button>
              <button class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200">Kenosha</button>
            </div>
            <div class="flex flex-wrap gap-2 mt-2">
              <div class="text-sm font-medium text-gray-600 mr-1">Time Period:</div>
              <button class="text-xs px-3 py-1 bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200">Last 7 Days</button>
              <button class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200">30 Days</button>
              <button class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200">90 Days</button>
              <button class="text-xs px-3 py-1 bg-gray-100 text-gray-700 rounded-full hover:bg-gray-200">Custom</button>
            </div>
          </div>

          <!-- Multi-Graph Dashboard -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-5">
            <!-- Graph 1: Open vs. Reply Rate -->
            <div class="bg-white p-4 rounded-md shadow">
              <div class="flex justify-between items-center mb-3">
                <div class="text-sm font-medium">Open vs. Reply Rate Over Time</div>
                <div>
                  <select class="text-xs p-1 border border-gray-300 rounded">
                    <option>All Campaigns</option>
                    <option>Studio Outreach</option>
                    <option>Record Store Blast</option>
                  </select>
                </div>
              </div>
              <div class="h-64 flex items-center justify-center">
                <div class="text-center w-full">
                  <img src="glvem36f3u.png" alt="Analytics Graph" class="h-48 mx-auto">
                  <p class="text-sm text-gray-500 mt-2">Campaign performance over time</p>
                </div>
              </div>
            </div>

            <!-- Graph 2: Heatmap - Time of Day vs Open Rate -->
            <div class="bg-white p-4 rounded-md shadow">
              <div class="flex justify-between items-center mb-3">
                <div class="text-sm font-medium">Time of Day Heatmap</div>
                <div>
                  <select class="text-xs p-1 border border-gray-300 rounded">
                    <option>Open Rate</option>
                    <option>Reply Rate</option>
                    <option>Click Rate</option>
                  </select>
                </div>
              </div>
              <div class="h-64 relative">
                <!-- Heatmap visualization - simplified for HTML version -->
                <div class="grid grid-cols-7 gap-1 bg-gray-100 p-2 rounded">
                  <div class="h-8 text-center text-xs font-medium flex items-center justify-center">Mon</div>
                  <div class="h-8 text-center text-xs font-medium flex items-center justify-center">Tue</div>
                  <div class="h-8 text-center text-xs font-medium flex items-center justify-center">Wed</div>
                  <div class="h-8 text-center text-xs font-medium flex items-center justify-center">Thu</div>
                  <div class="h-8 text-center text-xs font-medium flex items-center justify-center">Fri</div>
                  <div class="h-8 text-center text-xs font-medium flex items-center justify-center">Sat</div>
                  <div class="h-8 text-center text-xs font-medium flex items-center justify-center">Sun</div>

                  <!-- Morning Row -->
                  <div class="bg-green-200 h-8 rounded-sm"></div>
                  <div class="bg-green-500 h-8 rounded-sm"></div>
                  <div class="bg-green-300 h-8 rounded-sm"></div>
                  <div class="bg-green-200 h-8 rounded-sm"></div>
                  <div class="bg-green-300 h-8 rounded-sm"></div>
                  <div class="bg-gray-300 h-8 rounded-sm"></div>
                  <div class="bg-gray-300 h-8 rounded-sm"></div>

                  <!-- Afternoon Row -->
                  <div class="bg-green-300 h-8 rounded-sm"></div>
                  <div class="bg-green-400 h-8 rounded-sm"></div>
                  <div class="bg-green-400 h-8 rounded-sm"></div>
                  <div class="bg-green-300 h-8 rounded-sm"></div>
                  <div class="bg-green-200 h-8 rounded-sm"></div>
                  <div class="bg-gray-200 h-8 rounded-sm"></div>
                  <div class="bg-gray-200 h-8 rounded-sm"></div>

                  <!-- Evening Row -->
                  <div class="bg-green-200 h-8 rounded-sm"></div>
                  <div class="bg-green-200 h-8 rounded-sm"></div>
                  <div class="bg-green-300 h-8 rounded-sm"></div>
                  <div class="bg-green-300 h-8 rounded-sm"></div>
                  <div class="bg-green-200 h-8 rounded-sm"></div>
                  <div class="bg-gray-300 h-8 rounded-sm"></div>
                  <div class="bg-gray-200 h-8 rounded-sm"></div>
                </div>
                <div class="flex justify-between text-xs text-gray-500 mt-2 px-2">
                  <div>Morning</div>
                  <div>Afternoon</div>
                  <div>Evening</div>
                </div>
                <div class="flex justify-between mt-4 items-center">
                  <div class="flex items-center">
                    <div class="w-3 h-3 bg-gray-200 rounded-sm"></div>
                    <span class="text-xs ml-1">Low</span>
                  </div>
                  <div class="flex items-center">
                    <div class="w-3 h-3 bg-green-200 rounded-sm"></div>
                    <span class="text-xs ml-1"></span>
                  </div>
                  <div class="flex items-center">
                    <div class="w-3 h-3 bg-green-300 rounded-sm"></div>
                    <span class="text-xs ml-1"></span>
                  </div>
                  <div class="flex items-center">
                    <div class="w-3 h-3 bg-green-400 rounded-sm"></div>
                    <span class="text-xs ml-1"></span>
                  </div>
                  <div class="flex items-center">
                    <div class="w-3 h-3 bg-green-500 rounded-sm"></div>
                    <span class="text-xs ml-1">High</span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Graph 3: Bounce + Unsubscribe -->
            <div class="bg-white p-4 rounded-md shadow">
              <div class="flex justify-between items-center mb-3">
                <div class="text-sm font-medium">Bounce &amp; Unsubscribe Rates</div>
                <div>
                  <select class="text-xs p-1 border border-gray-300 rounded">
                    <option>Last 90 Days</option>
                    <option>Last 30 Days</option>
                    <option>All Time</option>
                  </select>
                </div>
              </div>
              <div class="h-32 w-full bg-gray-100 rounded-md relative overflow-hidden">
                <!-- Simple line chart visualization -->
                <div class="absolute bottom-0 left-0 w-full h-full flex items-end">
                  <div class="w-1/12 h-8 bg-red-200 mx-px"></div>
                  <div class="w-1/12 h-6 bg-red-200 mx-px"></div>
                  <div class="w-1/12 h-7 bg-red-200 mx-px"></div>
                  <div class="w-1/12 h-9 bg-red-200 mx-px"></div>
                  <div class="w-1/12 h-12 bg-red-300 mx-px"></div>
                  <div class="w-1/12 h-8 bg-red-200 mx-px"></div>
                  <div class="w-1/12 h-5 bg-red-200 mx-px"></div>
                  <div class="w-1/12 h-4 bg-red-100 mx-px"></div>
                  <div class="w-1/12 h-3 bg-red-100 mx-px"></div>
                  <div class="w-1/12 h-4 bg-red-100 mx-px"></div>
                  <div class="w-1/12 h-6 bg-red-200 mx-px"></div>
                  <div class="w-1/12 h-7 bg-red-200 mx-px"></div>
                </div>
              </div>
              <div class="flex justify-between text-xs text-gray-500 mt-2">
                <div>Jan</div>
                <div>Feb</div>
                <div>Mar</div>
                <div>Apr</div>
                <div>May</div>
                <div>Jun</div>
                <div>Jul</div>
                <div>Aug</div>
                <div>Sep</div>
                <div>Oct</div>
                <div>Nov</div>
                <div>Dec</div>
              </div>
              <div class="flex mt-4 justify-between">
                <div class="text-xs">
                  <span class="inline-block w-3 h-3 bg-red-200 rounded-sm mr-1"></span>
                  Bounce Rate: 2.3%
                </div>
                <div class="text-xs">
                  <span class="inline-block w-3 h-3 bg-red-300 rounded-sm mr-1"></span>
                  Unsubscribe Rate: 0.8%
                </div>
              </div>
            </div>

            <!-- Graph 4: Map View of Engagement -->
            <div class="bg-white p-4 rounded-md shadow">
              <div class="flex justify-between items-center mb-3">
                <div class="text-sm font-medium">Geographic Engagement</div>
                <div>
                  <select class="text-xs p-1 border border-gray-300 rounded">
                    <option>Open Rate</option>
                    <option>Reply Rate</option>
                    <option>Total Contacts</option>
                  </select>
                </div>
              </div>
              <div class="h-32 bg-blue-50 rounded-md flex items-center justify-center">
                <div class="text-center">
                  <div class="text-sm text-gray-500">Regional engagement map</div>
                  <div class="flex items-center justify-center gap-6 mt-2">
                    <div class="text-xs flex flex-col items-center">
                      <div class="w-4 h-4 rounded-full bg-green-500 mb-1"></div>
                      Milwaukee<br/>72%
                    </div>
                    <div class="text-xs flex flex-col items-center">
                      <div class="w-4 h-4 rounded-full bg-yellow-500 mb-1"></div>
                      Chicago<br/>58%
                    </div>
                    <div class="text-xs flex flex-col items-center">
                      <div class="w-4 h-4 rounded-full bg-blue-500 mb-1"></div>
                      Kenosha<br/>64%
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Enhanced AI Insights Panel -->
          <div class="bg-blue-50 p-4 rounded-md shadow border border-blue-100 mb-5">
            <div class="flex items-start">
              <div class="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center mr-3">
                <span class="text-blue-600 text-lg">üß†</span>
              </div>
              <div>
                <div class="font-medium text-blue-800 text-sm">Agent Lee Predictive Insights</div>
                <p class="text-sm text-blue-700 mt-1">This month, your university leads had a 74% open rate ‚Äî but only a 5% reply rate. Consider tweaking your call-to-action.</p>
                <p class="text-sm text-blue-700 mt-1">18 leads opened your last message but never responded. Would you like to trigger a follow-up?</p>
                <div class="flex space-x-2 mt-2">
                  <button class="text-xs px-3 py-1 bg-white border border-blue-300 text-blue-600 rounded-md hover:bg-blue-50">Review Campaign</button>
                  <button class="text-xs px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600">Generate New CTA</button>
                  <button class="text-xs px-3 py-1 bg-green-500 text-white rounded-md hover:bg-green-600">Send Follow-up</button>
                </div>
              </div>
            </div>
          </div>

          <!-- Campaign Detail Table -->
          <h3 class="text-lg font-medium mb-2">Campaign Details</h3>
          <div class="bg-white p-4 rounded-md shadow">
            <div class="overflow-x-auto">
              <table class="min-w-full">
                <thead>
                  <tr class="border-b">
                    <th class="text-left py-2">Campaign</th>
                    <th class="text-center py-2">Sent</th>
                    <th class="text-center py-2">Opened</th>
                    <th class="text-center py-2">Clicked</th>
                    <th class="text-center py-2">Replied</th>
                    <th class="text-center py-2">Time-to-open</th>
                    <th class="text-center py-2">Status</th>
                  </tr>
                </thead>
                <tbody>
                  <tr class="border-b hover:bg-gray-50">
                    <td class="py-2">Wisconsin Studio Outreach</td>
                    <td class="text-center">45</td>
                    <td class="text-center">32</td>
                    <td class="text-center">18</td>
                    <td class="text-center">7</td>
                    <td class="text-center">3h 22m</td>
                    <td class="text-center"><span class="inline-block px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Active</span></td>
                  </tr>
                  <tr class="border-b hover:bg-gray-50">
                    <td class="py-2">New Release Announcement</td>
                    <td class="text-center">120</td>
                    <td class="text-center">82</td>
                    <td class="text-center">51</td>
                    <td class="text-center">14</td>
                    <td class="text-center">6h 15m</td>
                    <td class="text-center"><span class="inline-block px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full">Completed</span></td>
                  </tr>
                  <tr class="border-b hover:bg-gray-50">
                    <td class="py-2">Chicago Record Stores</td>
                    <td class="text-center">38</td>
                    <td class="text-center">29</td>
                    <td class="text-center">15</td>
                    <td class="text-center">6</td>
                    <td class="text-center">2h 44m</td>
                    <td class="text-center"><span class="inline-block px-2 py-1 bg-amber-100 text-amber-800 text-xs rounded-full">Needs Follow-up</span></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </section>

      <!-- Visits Tab -->
      <section id="visits-tab" class="hidden p-4">
        <div class="mb-4">
          <h2 class="text-xl font-bold mb-3">Visit Tracker</h2>

          <div class="bg-white rounded-md shadow p-4 mb-5">
            <h3 class="text-lg font-medium mb-3">Log a Visit</h3>
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Business</label>
                <select id="visit-business" class="w-full p-2 border border-gray-300 rounded-md">
                  <option value="" disabled selected>Select a business...</option>
                  <!-- Will be populated with nearby businesses -->
                </select>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Contact Person</label>
                <input type="text" id="visit-contact" placeholder="Who did you meet?" class="w-full p-2 border border-gray-300 rounded-md">
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                <textarea id="visit-notes" rows="3" placeholder="Type your notes..." class="w-full p-2 border border-gray-300 rounded-md"></textarea>
              </div>
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Record Voice Note</label>
                <div class="flex items-center space-x-3">
                  <button id="start-recording" class="p-3 bg-red-500 text-white rounded-full hover:bg-red-600 focus:outline-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
                    </svg>
                  </button>
                  <button id="stop-recording" class="hidden p-3 bg-gray-300 text-gray-700 rounded-full hover:bg-gray-400 focus:outline-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 10a1 1 0 011-1h4a1 1 0 011 1v4a1 1 0 01-1 1h-4a1 1 0 01-1-1v-4z" />
                    </svg>
                  </button>
                  <div id="recording-status" class="text-sm text-gray-500">Ready to record</div>
                </div>
                <div id="audio-player-container" class="hidden mt-3">
                  <audio id="audio-player" controls class="w-full"></audio>
                </div>
              </div>
              <div class="flex justify-end">
                <button id="save-visit-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none">
                  Save Visit
                </button>
              </div>
            </div>
          </div>

          <h3 class="text-lg font-medium mb-3">Recent Visits</h3>
          <div id="visits-list" class="space-y-4">
            <!-- Will be populated with visit history -->
            <div class="bg-white rounded-md shadow p-4">
              <div class="flex justify-between">
                <div>
                  <h4 class="font-medium">Rushmor Records</h4>
                  <p class="text-sm text-gray-600">May 18, 2023 ‚Ä¢ Met with Dan</p>
                </div>
                <div>
                  <span class="inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">Milwaukee, WI</span>
                </div>
              </div>
              <p class="mt-2 text-sm">They were interested in our new releases. Follow up in two weeks.</p>
              <div class="mt-3">
                <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                  </svg>
                  Play Voice Note
                </button>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- To-Dos Tab -->
      <section id="todos-tab" class="hidden p-4">
        <div>
          <h2 class="text-xl font-bold mb-3">To-Do List</h2>

          <div class="bg-white rounded-md shadow p-4 mb-5">
            <div class="flex justify-between items-center mb-4">
              <h3 class="text-lg font-medium">Add New Task</h3>
              <div>
                <select id="task-priority" class="text-sm p-1 border border-gray-300 rounded-md">
                  <option value="low">Low Priority</option>
                  <option value="medium" selected>Medium Priority</option>
                  <option value="high">High Priority</option>
                </select>
              </div>
            </div>
            <div class="space-y-3">
              <div>
                <input type="text" id="task-title" placeholder="Task title..." class="w-full p-2 border border-gray-300 rounded-md">
              </div>
              <div>
                <textarea id="task-description" rows="2" placeholder="Task description..." class="w-full p-2 border border-gray-300 rounded-md"></textarea>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div>
                  <label class="block text-sm text-gray-600 mb-1">Due Date</label>
                  <input type="date" id="task-due-date" class="w-full p-2 border border-gray-300 rounded-md">
                </div>
                <div>
                  <label class="block text-sm text-gray-600 mb-1">Related To</label>
                  <select id="task-related" class="w-full p-2 border border-gray-300 rounded-md">
                    <option value="">None</option>
                    <option value="Rushmor Records">Rushmor Records</option>
                    <option value="Dave's Guitar Shop">Dave's Guitar Shop</option>
                    <option value="Reckless Records">Reckless Records</option>
                  </select>
                </div>
              </div>
              <div class="flex justify-end">
                <button id="add-task-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none">
                  Add Task
                </button>
              </div>
            </div>
          </div>

          <div class="flex justify-between items-center mb-3">
            <h3 class="text-lg font-medium">My Tasks</h3>
            <div class="flex space-x-2">
              <select id="todo-filter" class="text-sm p-1 border border-gray-300 rounded-md">
                <option value="all">All Tasks</option>
                <option value="pending">Pending</option>
                <option value="completed">Completed</option>
                <option value="overdue">Overdue</option>
              </select>
              <button id="clear-completed-btn" class="text-xs px-3 py-1 border border-gray-300 rounded-md hover:bg-gray-100">
                Clear Completed
              </button>
            </div>
          </div>

          <!-- Reschedule, Call Callbacks and Follow Ups Section -->
          <div class="bg-blue-50 rounded-md shadow p-4 mb-5 border border-blue-200">
            <h3 class="text-lg font-medium text-blue-800 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Reschedule, Call Callbacks and Follow Ups
            </h3>
            <p class="text-sm text-blue-600 mb-3">Track your rescheduled meetings, callbacks, and follow-ups with contacts in one place.</p>

            <div class="space-y-2 mb-3" id="followup-container">
              <!-- Follow-up items will be dynamically generated -->
              <div class="bg-white p-3 rounded-md border border-blue-100 hover:shadow-sm transition flex items-start">
                <input type="checkbox" class="mt-1 mr-3">
                <div class="flex-grow">
                  <div class="flex justify-between items-start">
                    <h4 class="font-medium text-blue-700">Call Dan at Rushmor Records</h4>
                    <span class="inline-block px-2 py-0.5 bg-yellow-100 text-yellow-800 text-xs rounded-full">Tomorrow</span>
                  </div>
                  <p class="text-sm text-gray-600 mt-1">Reschedule the in-store promotion event for the new album release.</p>
                  <div class="flex justify-between mt-2">
                    <span class="text-xs text-gray-500">Due: May 25, 2023</span>
                    <button class="text-xs px-2 py-1 bg-blue-100 text-blue-600 rounded-md hover:bg-blue-200 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                      </svg>
                      Call Now
                    </button>
                  </div>
                </div>
              </div>

              <div class="bg-white p-3 rounded-md border border-blue-100 hover:shadow-sm transition flex items-start">
                <input type="checkbox" class="mt-1 mr-3">
                <div class="flex-grow">
                  <div class="flex justify-between items-start">
                    <h4 class="font-medium text-blue-700">Follow up with Reckless Records</h4>
                    <span class="inline-block px-2 py-0.5 bg-red-100 text-red-800 text-xs rounded-full">Overdue</span>
                  </div>
                  <p class="text-sm text-gray-600 mt-1">Check if they received our catalog and discuss potential consignment.</p>
                  <div class="flex justify-between mt-2">
                    <span class="text-xs text-gray-500">Due: May 15, 2023</span>
                    <button class="text-xs px-2 py-1 bg-blue-100 text-blue-600 rounded-md hover:bg-blue-200 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                      </svg>
                      Call Now
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <div class="flex justify-between items-center">
              <button id="add-followup-btn" class="text-sm px-3 py-1.5 bg-blue-500 text-white rounded-md hover:bg-blue-600 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                Add Follow-up
              </button>
              <a href="#" class="text-xs text-blue-600 hover:underline">View All Follow-ups</a>
            </div>
          </div>

          <div id="tasks-container" class="space-y-3">
            <!-- Example tasks - these will be dynamically generated -->
            <div class="bg-white rounded-md shadow p-4 task-item" data-priority="high">
              <div class="flex items-start">
                <input type="checkbox" class="task-checkbox mt-1 mr-3">
                <div class="flex-grow">
                  <div class="flex justify-between items-start">
                    <h4 class="font-medium">Follow up with Rushmor Records</h4>
                    <span class="inline-block px-2 py-0.5 bg-red-100 text-red-800 text-xs rounded-full">High Priority</span>
                  </div>
                  <p class="text-sm text-gray-600 mt-1">Call Dan to discuss the new releases and potential in-store promotion.</p>
                  <div class="flex justify-between mt-2">
                    <span class="text-xs text-gray-500">Due: May 25, 2023</span>
                    <div class="flex space-x-1">
                      <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 task-edit">Edit</button>
                      <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 task-delete">Delete</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="bg-white rounded-md shadow p-4 task-item" data-priority="medium">
              <div class="flex items-start">
                <input type="checkbox" class="task-checkbox mt-1 mr-3">
                <div class="flex-grow">
                  <div class="flex justify-between items-start">
                    <h4 class="font-medium">Create marketing campaign for new album</h4>
                    <span class="inline-block px-2 py-0.5 bg-yellow-100 text-yellow-800 text-xs rounded-full">Medium Priority</span>
                  </div>
                  <p class="text-sm text-gray-600 mt-1">Develop email template and social media posts to promote the upcoming album release.</p>
                  <div class="flex justify-between mt-2">
                    <span class="text-xs text-gray-500">Due: June 1, 2023</span>
                    <div class="flex space-x-1">
                      <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 task-edit">Edit</button>
                      <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 task-delete">Delete</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="bg-white rounded-md shadow p-4 task-item" data-priority="low">
              <div class="flex items-start">
                <input type="checkbox" class="task-checkbox mt-1 mr-3" checked>
                <div class="flex-grow">
                  <div class="flex justify-between items-start">
                    <h4 class="font-medium line-through text-gray-500">Update contact information for Chicago stores</h4>
                    <span class="inline-block px-2 py-0.5 bg-green-100 text-green-800 text-xs rounded-full">Completed</span>
                  </div>
                  <p class="text-sm text-gray-600 mt-1 line-through">Verify and update contact details for all Chicago area record stores.</p>
                  <div class="flex justify-between mt-2">
                    <span class="text-xs text-gray-500">Completed: May 18, 2023</span>
                    <div class="flex space-x-1">
                      <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 task-edit">Edit</button>
                      <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 task-delete">Delete</button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Timeline Tab -->
      <section id="timeline-tab" class="hidden p-4">
        <div>
          <h2 class="text-xl font-bold mb-3">Activity Timeline</h2>

          <!-- Timeline Navigation and Filter Controls -->
          <div class="bg-white rounded-md shadow p-4 mb-4">
            <div class="flex flex-wrap justify-between items-center">
              <!-- Date Navigation -->
              <div class="mb-3 md:mb-0">
                <div class="flex space-x-2">
                  <button id="timeline-today" class="text-xs px-3 py-1.5 bg-blue-500 text-white rounded-md hover:bg-blue-600">Today</button>
                  <button id="timeline-week" class="text-xs px-3 py-1.5 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">This Week</button>
                  <button id="timeline-month" class="text-xs px-3 py-1.5 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">This Month</button>
                  <button id="timeline-all" class="text-xs px-3 py-1.5 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300">All Time</button>
                </div>
              </div>

              <!-- Mini Calendar Toggle -->
              <button id="toggle-mini-calendar" class="text-xs px-3 py-1.5 flex items-center bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Calendar View
              </button>
            </div>

            <!-- Mini Calendar (initially hidden) -->
            <div id="mini-calendar" class="mt-3 p-3 border border-gray-200 rounded-md bg-gray-50 hidden">
              <div class="flex justify-between items-center mb-2">
                <button id="prev-month" class="text-gray-500 hover:text-gray-700">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                  </svg>
                </button>
                <h4 id="calendar-month-year" class="text-sm font-medium">May 2023</h4>
                <button id="next-month" class="text-gray-500 hover:text-gray-700">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </div>
              <div class="grid grid-cols-7 gap-1 text-center">
                <div class="text-xs font-medium text-gray-500">Su</div>
                <div class="text-xs font-medium text-gray-500">Mo</div>
                <div class="text-xs font-medium text-gray-500">Tu</div>
                <div class="text-xs font-medium text-gray-500">We</div>
                <div class="text-xs font-medium text-gray-500">Th</div>
                <div class="text-xs font-medium text-gray-500">Fr</div>
                <div class="text-xs font-medium text-gray-500">Sa</div>
                <!-- Calendar days will be dynamically populated here -->
              </div>
            </div>

            <!-- Activity Type Filter -->
            <div class="mt-3">
              <div class="text-xs font-medium mb-2">Filter by Activity Type:</div>
              <div class="flex flex-wrap gap-2">
                <button class="timeline-filter px-2 py-1 bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 flex items-center text-xs" data-type="visit">
                  <span class="w-3 h-3 rounded-full bg-blue-500 mr-1"></span>Visits
                </button>
                <button class="timeline-filter px-2 py-1 bg-green-100 text-green-700 rounded-full hover:bg-green-200 flex items-center text-xs" data-type="campaign">
                  <span class="w-3 h-3 rounded-full bg-green-500 mr-1"></span>Campaigns
                </button>
                <button class="timeline-filter px-2 py-1 bg-purple-100 text-purple-700 rounded-full hover:bg-purple-200 flex items-center text-xs" data-type="call">
                  <span class="w-3 h-3 rounded-full bg-purple-500 mr-1"></span>Calls
                </button>
                <button class="timeline-filter px-2 py-1 bg-yellow-100 text-yellow-700 rounded-full hover:bg-yellow-200 flex items-center text-xs" data-type="note">
                  <span class="w-3 h-3 rounded-full bg-yellow-500 mr-1"></span>Notes
                </button>
                <button class="timeline-filter px-2 py-1 bg-indigo-100 text-indigo-700 rounded-full hover:bg-indigo-200 flex items-center text-xs" data-type="agent">
                  <span class="w-3 h-3 rounded-full bg-indigo-500 mr-1"></span>Agent Lee
                </button>
                <button class="timeline-filter px-2 py-1 bg-red-100 text-red-700 rounded-full hover:bg-red-200 flex items-center text-xs" data-type="auto">
                  <span class="w-3 h-3 rounded-full bg-red-500 mr-1"></span>Auto-detected
                </button>
              </div>
            </div>
          </div>

          <!-- Improved Timeline Display -->
          <div class="relative">
            <!-- Timeline vertical line -->
            <div class="absolute left-5 top-0 bottom-0 w-1 bg-gradient-to-b from-blue-300 via-purple-300 to-green-300 rounded-full"></div>

            <!-- Date headers and timeline entries -->
            <div id="timeline-container" class="space-y-6">
              <!-- Grouped by date - Today -->
              <div class="date-group mb-6" data-date="today">
                <h3 class="text-sm font-bold pl-10 mb-2 text-blue-600 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Today
                </h3>

                <!-- Timeline list for today's items -->
                <div class="timeline-date-group space-y-4">
                  <!-- Visits -->
                  <div class="timeline-entry ml-10 relative pt-3 pb-4 bg-white rounded-lg shadow-sm hover:shadow-md transition p-4 border-l-4 border-blue-500" data-type="visit">
                    <div class="absolute -left-10 mt-1.5 rounded-full w-6 h-6 bg-blue-500 text-center flex items-center justify-center">
                      <span class="text-white text-sm">üìç</span>
                    </div>
                    <div class="flex justify-between items-start">
                      <time class="text-xs text-gray-500 mb-1 block">2:34 PM</time>
                      <span class="px-2 py-0.5 rounded-full bg-blue-100 text-blue-800 text-xs">In-Person Visit</span>
                    </div>
                    <h3 class="text-base font-medium flex items-center">
                      Visit to Rushmor Records
                      <span class="ml-2 text-xs bg-green-100 text-green-800 rounded-full px-2">Auto-logged</span>
                    </h3>
                    <p class="mt-1 text-sm">Met with Dan. They were interested in our new releases.</p>
                    <div class="mt-3 flex flex-wrap gap-2">
                      <button class="text-xs px-2 py-1 border border-blue-300 text-blue-600 rounded-md hover:bg-blue-50 inline-flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                        </svg>
                        Play Voice Note
                      </button>
                      <button class="text-xs px-2 py-1 border border-green-300 text-green-600 rounded-md hover:bg-green-50 inline-flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                        Follow Up
                      </button>
                      <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-50 inline-flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                        View on Map
                      </button>
                    </div>
                  </div>

                  <!-- Campaign -->
                  <div class="timeline-entry ml-10 relative pt-3 pb-4 bg-white rounded-lg shadow-sm hover:shadow-md transition p-4 border-l-4 border-green-500" data-type="campaign">
                    <div class="absolute -left-10 mt-1.5 rounded-full w-6 h-6 bg-green-500 text-center flex items-center justify-center">
                      <span class="text-white text-sm">üì§</span>
                    </div>
                    <div class="flex justify-between items-start">
                      <time class="text-xs text-gray-500 mb-1 block">10:15 AM</time>
                      <span class="px-2 py-0.5 rounded-full bg-green-100 text-green-800 text-xs">Email Campaign</span>
                    </div>
                    <h3 class="text-base font-medium">Sent Campaign "Wisconsin Studio Outreach"</h3>
                    <div class="mt-1 py-1.5 px-3 bg-gray-50 rounded-md">
                      <div class="flex justify-between mb-1">
                        <span class="text-xs text-gray-700">Open Rate:</span>
                        <span class="text-xs font-medium">32%</span>
                      </div>
                      <div class="w-full bg-gray-200 rounded-full h-1.5">
                        <div class="bg-green-500 h-1.5 rounded-full" style="width: 32%"></div>
                      </div>
                    </div>
                    <p class="mt-1 text-sm">Sent to 45 recipients.</p>
                    <div class="mt-3 flex flex-wrap gap-2">
                      <button class="text-xs px-2 py-1 border border-blue-300 text-blue-600 rounded-md hover:bg-blue-50 inline-flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                        View Analytics
                      </button>
                      <button class="text-xs px-2 py-1 border border-green-300 text-green-600 rounded-md hover:bg-green-50 inline-flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                        </svg>
                        Send Follow-up
                      </button>
                    </div>
                  </div>
                </div>

              </div>

              <!-- Grouped by date - Yesterday -->
              <div class="date-group mb-6" data-date="yesterday">
                <h3 class="text-sm font-bold pl-10 mb-2 text-gray-600 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Yesterday
                </h3>

                <!-- Timeline list for yesterday's items -->
                <div class="timeline-date-group space-y-4">
                  <!-- Call -->
                  <div class="timeline-entry ml-10 relative pt-3 pb-4 bg-white rounded-lg shadow-sm hover:shadow-md transition p-4 border-l-4 border-purple-500" data-type="call">
                    <div class="absolute -left-10 mt-1.5 rounded-full w-6 h-6 bg-purple-500 text-center flex items-center justify-center">
                      <span class="text-white text-sm">üìû</span>
                    </div>
                    <div class="flex justify-between items-start">
                      <time class="text-xs text-gray-500 mb-1 block">3:42 PM</time>
                      <span class="px-2 py-0.5 rounded-full bg-purple-100 text-purple-800 text-xs">Outgoing Call</span>
                    </div>
                    <h3 class="text-base font-medium">Call with Dave's Guitar Shop</h3>
                    <p class="mt-1 text-sm">Discussed upcoming album release and possible in-store promotion.</p>
                    <div class="mt-3 flex flex-wrap gap-2">
                      <button class="text-xs px-2 py-1 border border-purple-300 text-purple-600 rounded-md hover:bg-purple-50 inline-flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                        Call Back
                      </button>
                      <button class="text-xs px-2 py-1 border border-blue-300 text-blue-600 rounded-md hover:bg-blue-50 inline-flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                        </svg>
                        View Call Notes
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Grouped by date - Older -->
              <div class="date-group mb-6" data-date="older">
                <h3 class="text-sm font-bold pl-10 mb-2 text-gray-600 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  May 15, 2023
                </h3>

                <!-- Timeline list for older items -->
                <div class="timeline-date-group space-y-4">
                  <!-- Record entry -->
                  <div class="timeline-entry ml-10 relative pt-3 pb-4 bg-white rounded-lg shadow-sm hover:shadow-md transition p-4 border-l-4 border-yellow-500" data-type="note">
                    <div class="absolute -left-10 mt-1.5 rounded-full w-6 h-6 bg-yellow-500 text-center flex items-center justify-center">
                      <span class="text-white text-sm">üìù</span>
                    </div>
                    <div class="flex justify-between items-start">
                      <time class="text-xs text-gray-500 mb-1 block">11:20 AM</time>
                      <span class="px-2 py-0.5 rounded-full bg-yellow-100 text-yellow-800 text-xs">System Update</span>
                    </div>
                    <h3 class="text-base font-medium">Added 15 new record stores to CRM</h3>
                    <p class="mt-1 text-sm">Added new stores in the Chicago area.</p>
                    <div class="mt-3 flex flex-wrap gap-2">
                      <button class="text-xs px-2 py-1 border border-yellow-300 text-yellow-600 rounded-md hover:bg-yellow-50 inline-flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                        </svg>
                        View Records
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Timeline entries dynamically generated will go here -->
              <div id="timeline-list" class="space-y-4 relative">
                <!-- New timeline entries will be added here by the addToTimeline function -->
              </div>
            </div>
          </div>
        </div>
      </section>
    <!-- Phone Tab Content -->
      <section id="phone-tab" class="hidden p-4">
        <div class="mb-4">
          <h2 class="text-xl font-bold mb-3">Phone Integration System</h2>

          <div class="bg-white rounded-md shadow p-4 mb-5">
            <div class="flex flex-col md:flex-row gap-4">
              <!-- Phone Numbers Configuration -->
              <div class="w-full md:w-1/2">
                <h3 class="text-lg font-medium mb-3">Configured Phone Numbers</h3>

                <div class="mb-4">
                  <div class="flex items-center justify-between bg-blue-50 p-3 rounded-md border border-blue-100 mb-2">
                    <div>
                      <span class="font-medium">(414) 367-6211</span>
                      <span class="ml-2 text-xs bg-green-100 text-green-800 rounded-full px-2 py-0.5">Primary</span>
                    </div>
                    <div class="flex gap-2">
                      <button id="call-primary" class="text-xs px-3 py-1.5 bg-blue-500 text-white rounded-md hover:bg-blue-600 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                        Call
                      </button>
                      <button id="configure-primary" class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">
                        Configure
                      </button>
                    </div>
                  </div>

                  <div class="flex items-center justify-between bg-blue-50 p-3 rounded-md border border-blue-100">
                    <div>
                      <span class="font-medium">(414) 626-9992</span>
                      <span class="ml-2 text-xs bg-purple-100 text-purple-800 rounded-full px-2 py-0.5">Secondary</span>
                    </div>
                    <div class="flex gap-2">
                      <button id="call-secondary" class="text-xs px-3 py-1.5 bg-blue-500 text-white rounded-md hover:bg-blue-600 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                        Call
                      </button>
                      <button id="configure-secondary" class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">
                        Configure
                      </button>
                    </div>
                  </div>
                </div>

                <div class="mb-4">
                  <h4 class="font-medium text-sm mb-2">Call Settings</h4>
                  <div class="bg-gray-50 p-3 rounded-md">
                    <div class="flex items-center mb-2">
                      <input type="checkbox" id="auto-recording" class="mr-2" checked>
                      <label for="auto-recording" class="text-sm">Enable automatic call recording</label>
                    </div>
                    <div class="flex items-center mb-2">
                      <input type="checkbox" id="auto-transcribe" class="mr-2" checked>
                      <label for="auto-transcribe" class="text-sm">Transcribe calls and voicemails</label>
                    </div>
                    <div class="flex items-center mb-2">
                      <input type="checkbox" id="auto-log" class="mr-2" checked>
                      <label for="auto-log" class="text-sm">Automatically log calls to CRM</label>
                    </div>
                    <div class="flex items-center">
                      <input type="checkbox" id="caller-id" class="mr-2" checked>
                      <label for="caller-id" class="text-sm">Identify callers using CRM database</label>
                    </div>
                  </div>
                </div>

                <div class="bg-amber-50 p-3 rounded-md border border-amber-200">
                  <div class="flex items-start">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-amber-500 mt-0.5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <div>
                      <p class="text-sm text-amber-800 mb-2">This phone system integrates with Twilio to provide voice services. Your account: <span class="font-medium">agent_lee_crm</span></p>
                      <button class="text-xs px-2 py-1 bg-amber-200 text-amber-800 rounded hover:bg-amber-300">
                        Manage Twilio Settings
                      </button>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Call History & Voicemail -->
              <div class="w-full md:w-1/2">
                <div class="flex justify-between items-center mb-3">
                  <h3 class="text-lg font-medium">Recent Activity</h3>
                  <div class="flex">
                    <button class="tab-selected text-xs px-3 py-1 bg-blue-500 text-white rounded-l-md">Calls</button>
                    <button class="text-xs px-3 py-1 bg-gray-200 text-gray-700 rounded-r-md">Voicemails</button>
                  </div>
                </div>

                <div id="call-history" class="space-y-2 max-h-[400px] overflow-y-auto">
                  <!-- Incoming Call Example -->
                  <div class="bg-gray-50 p-3 rounded-md border border-gray-200">
                    <div class="flex justify-between items-start">
                      <div>
                        <div class="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-green-500 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                          <span class="font-medium">Sarah Johnson</span>
                          <span class="ml-2 text-xs text-blue-600">(Hymie's Records)</span>
                        </div>
                        <div class="text-xs text-gray-500 mt-1">Incoming call via (414) 367-6211</div>
                      </div>
                      <div class="text-right">
                        <div class="text-xs">Today, 2:35 PM</div>
                        <div class="text-xs bg-green-100 text-green-800 rounded-full px-2 py-0.5 mt-1">3:42</div>
                      </div>
                    </div>
                    <div class="mt-2 pt-2 border-t border-gray-200">
                      <div class="text-sm mb-1">Call Transcript:</div>
                      <p class="text-xs text-gray-600">Discussion about potential in-store promotion for local artists. Sarah requested more information about the LEEWAY platform...</p>
                    </div>
                    <div class="flex gap-2 mt-2">
                      <button class="text-xs px-2 py-1 bg-blue-100 text-blue-600 rounded hover:bg-blue-200 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                        </svg>
                        Play Recording
                      </button>
                      <button class="text-xs px-2 py-1 bg-green-100 text-green-600 rounded hover:bg-green-200 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                        Call Back
                      </button>
                    </div>
                  </div>

                  <!-- Outgoing Call Example -->
                  <div class="bg-gray-50 p-3 rounded-md border border-gray-200">
                    <div class="flex justify-between items-start">
                      <div>
                        <div class="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-500 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                          <span class="font-medium">Mike Davis</span>
                          <span class="ml-2 text-xs text-blue-600">(Dave's Guitar Shop)</span>
                        </div>
                        <div class="text-xs text-gray-500 mt-1">Outgoing call from (414) 626-9992</div>
                      </div>
                      <div class="text-right">
                        <div class="text-xs">Yesterday, 11:20 AM</div>
                        <div class="text-xs bg-blue-100 text-blue-800 rounded-full px-2 py-0.5 mt-1">5:17</div>
                      </div>
                    </div>
                    <div class="mt-2 pt-2 border-t border-gray-200">
                      <div class="text-sm mb-1">Call Transcript:</div>
                      <p class="text-xs text-gray-600">Follow-up regarding in-store event planning. Mike confirmed they can host on June 15th, need to finalize details next week...</p>
                    </div>
                    <div class="flex gap-2 mt-2">
                      <button class="text-xs px-2 py-1 bg-blue-100 text-blue-600 rounded hover:bg-blue-200 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                        </svg>
                        Play Recording
                      </button>
                      <button class="text-xs px-2 py-1 bg-yellow-100 text-yellow-600 rounded hover:bg-yellow-200 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Add Notes
                      </button>
                    </div>
                  </div>

                  <!-- Missed Call Example -->
                  <div class="bg-gray-50 p-3 rounded-md border border-red-200">
                    <div class="flex justify-between items-start">
                      <div>
                        <div class="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-red-500 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                          <span class="font-medium">Unknown Caller</span>
                          <span class="ml-2 text-xs text-blue-600">(612) 555-7890</span>
                        </div>
                        <div class="text-xs text-red-500 mt-1">Missed call to (414) 367-6211</div>
                      </div>
                      <div class="text-right">
                        <div class="text-xs">Yesterday, 9:15 AM</div>
                        <div class="text-xs bg-red-100 text-red-800 rounded-full px-2 py-0.5 mt-1">Missed</div>
                      </div>
                    </div>
                    <div class="flex gap-2 mt-2">
                      <button class="text-xs px-2 py-1 bg-green-100 text-green-600 rounded hover:bg-green-200 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                        Call Back
                      </button>
                      <button class="text-xs px-2 py-1 bg-blue-100 text-blue-600 rounded hover:bg-blue-200 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                        </svg>
                        Add to Contacts
                      </button>
                      <button class="text-xs px-2 py-1 bg-gray-100 text-gray-600 rounded hover:bg-gray-200 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Block
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div class="bg-white rounded-md shadow p-4">
            <h3 class="text-lg font-medium mb-3">Make a Call</h3>

            <div class="flex flex-col md:flex-row gap-4">
              <div class="w-full md:w-1/2">
                <div class="mb-4">
                  <label class="block text-sm font-medium text-gray-700 mb-1">Contact or Phone Number</label>
                  <div class="relative">
                    <input type="text" id="call-input" placeholder="Search contacts or enter number..." class="w-full p-2 pr-10 border border-gray-300 rounded-md">
                    <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                      </svg>
                    </div>
                  </div>
                </div>

                <div id="suggestion-container" class="mb-4 border border-gray-200 rounded-md overflow-hidden">
                  <div class="p-2 bg-gray-50 border-b border-gray-200 font-medium text-sm">Recent Contacts</div>

                  <div class="divide-y divide-gray-200">
                    <div class="p-2 hover:bg-gray-50 cursor-pointer flex items-center justify-between">
                      <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        <div>
                          <div class="font-medium">Sarah Johnson</div>
                          <div class="text-xs text-gray-600">Hymie's Records</div>
                        </div>
                      </div>
                      <span class="text-xs text-gray-500">(612) 729-8890</span>
                    </div>
                    <div class="p-2 hover:bg-gray-50 cursor-pointer flex items-center justify-between">
                      <div class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        <div>
                          <div class="font-medium">Mike Davis</div>
                          <div class="text-xs text-gray-600">Dave's Guitar Shop</div>
                        </div>
                      </div>
                      <span class="text-xs text-gray-500">(414) 763-2120</span>
                    </div>
                  </div>
                </div>

                <button id="make-call-btn" class="w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600 flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                  </svg>
                  Make Call
                </button>
              </div>

              <div class="w-full md:w-1/2">
                <div class="bg-gray-50 p-4 rounded-md border border-gray-200 h-full">
                  <h4 class="text-sm font-medium mb-2">Call from:</h4>
                  <div class="flex mb-4">
                    <label class="inline-flex items-center mr-4">
                      <input type="radio" class="form-radio" name="call-from" value="primary" checked>
                      <span class="ml-2 text-sm">(414) 367-6211</span>
                    </label>
                    <label class="inline-flex items-center">
                      <input type="radio" class="form-radio" name="call-from" value="secondary">
                      <span class="ml-2 text-sm">(414) 626-9992</span>
                    </label>
                  </div>

                  <h4 class="text-sm font-medium mb-2">Pre-call options:</h4>
                  <div class="space-y-2 mb-4">
                    <label class="inline-flex items-center">
                      <input type="checkbox" class="form-checkbox" checked>
                      <span class="ml-2 text-sm">Record this call</span>
                    </label>
                    <label class="inline-flex items-center">
                      <input type="checkbox" class="form-checkbox" checked>
                      <span class="ml-2 text-sm">Add to call history</span>
                    </label>
                    <label class="inline-flex items-center">
                      <input type="checkbox" class="form-checkbox">
                      <span class="ml-2 text-sm">Schedule for later</span>
                    </label>
                  </div>

                  <div class="text-xs text-gray-500">
                    <p class="mb-1">All calls are subject to recording for quality and training purposes.</p>
                    <p>Please ensure you have consent before recording any calls with clients.</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </main>
  </div>

  <style>
    .agent-panel {
      position: fixed;
      bottom: 20px;
      right: 20px;
      z-index: 50;
      width: 350px;
      transition: all 0.3s ease;
    }
    .agent-panel.minimized {
      width: 50px;
      height: 50px;
    }
    #agent-messages {
      max-height: 200px;
      overflow-y: auto;
    }
    .typing-animation {
      display: flex;
      align-items: center;
    }
    .typing-animation span {
      height: 8px;
      width: 8px;
      margin: 0 2px;
      background-color: #3b82f6;
      border-radius: 50%;
      display: inline-block;
      animation: typing 1.4s infinite ease-in-out both;
    }
    .typing-animation span:nth-child(1) {
      animation-delay: 0s;
    }
    .typing-animation span:nth-child(2) {
      animation-delay: 0.2s;
    }
    .typing-animation span:nth-child(3) {
      animation-delay: 0.4s;
    }
    @keyframes typing {
      0%, 80%, 100% { transform: scale(0); opacity: 0.5; }
      40% { transform: scale(1); opacity: 1; }
    }
  </style>

  <!-- Enhanced Agent Lee Panel -->
  <div id="agent-panel" class="agent-panel">
    <div class="bg-white rounded-lg shadow-lg p-4 max-w-md">
      <div class="flex justify-between items-center mb-2">
        <div class="font-bold flex items-center">
          <span class="text-xl text-blue-600 mr-1">üß†</span> Agent Lee
          <span class="ml-2 text-xs px-2 py-0.5 bg-green-100 text-green-800 rounded-full">Assistant</span>
        </div>
        <div class="flex space-x-2">
          <button id="agent-tools" class="text-gray-500 hover:text-blue-600 focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
          </button>
          <button id="minimize-agent" class="text-gray-500 hover:text-gray-700 focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 12H6" />
            </svg>
          </button>
          <button id="collapse-agent" class="text-gray-500 hover:text-gray-700 focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
        </div>
      </div>

      <!-- Agent Tools Panel (Initially Hidden) -->
      <div id="agent-tools-panel" class="mb-3 bg-gray-50 p-3 rounded-md hidden">
        <div class="text-sm font-medium text-gray-700 mb-2">Quick Actions</div>
        <div class="grid grid-cols-2 gap-2">
          <button class="agent-action-btn text-xs px-3 py-2 bg-blue-50 text-blue-600 rounded hover:bg-blue-100 text-left" data-action="schedule">
            üìÖ Schedule Meeting
          </button>
          <button id="add-todo-btn" class="agent-action-btn text-xs px-3 py-2 bg-green-50 text-green-600 rounded hover:bg-green-100 text-left" data-action="todo">
            ‚úÖ Add Task
          </button>
          <button class="agent-action-btn text-xs px-3 py-2 bg-purple-50 text-purple-600 rounded hover:bg-purple-100 text-left" data-action="video">
            üé• Start Video Call
          </button>
          <button class="agent-action-btn text-xs px-3 py-2 bg-yellow-50 text-yellow-600 rounded hover:bg-yellow-100 text-left" data-action="campaign">
            üì§ Create Campaign
          </button>
        </div>
      </div>

      <div id="agent-content">
        <div id="agent-messages" class="h-52 overflow-y-auto mb-2 text-sm bg-gray-50 p-3 rounded-md">
          <div class="mb-2 agent-message">
            <div class="font-medium text-blue-600 flex items-center">
              <span class="text-sm mr-1">üß†</span> Agent Lee <span class="text-gray-400 text-xs ml-auto">Now</span>
            </div>
            <div class="mt-1 pl-5">
              Welcome to your CRM! I'm Agent Lee, your AI assistant. I can help you with:
              <ul class="list-disc pl-5 mt-1 text-xs">
                <li>Scheduling appointments</li>
                <li>Managing tasks and to-dos</li>
                <li>Creating and tracking campaigns</li>
                <li>Setting up video meetings</li>
              </ul>
              How can I assist you today?
            </div>
          </div>
        </div>

        <div class="flex mb-2">
          <input id="agent-input" type="text" placeholder="Ask Agent Lee anything..." class="flex-grow p-2 border border-gray-300 rounded-l-md text-sm">
          <button id="agent-send" class="bg-blue-500 text-white px-3 rounded-r-md hover:bg-blue-600 focus:outline-none flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
            </svg>
          </button>
        </div>

        <div class="text-xs text-gray-500 flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Type "help" for a list of commands or click on Quick Actions
        </div>
      </div>
    </div>
  </div>

  <!-- Add Record Modal -->
  <div id="add-record-modal" class="fixed inset-0 bg-gray-800 bg-opacity-60 z-50 flex items-center justify-center hidden">
    <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-medium">Add New Record</h3>
        <button id="close-modal" class="text-gray-500 hover:text-gray-700 focus:outline-none">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <form id="add-record-form" class="space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Business Name</label>
          <input type="text" id="new-business-name" class="w-full p-2 border border-gray-300 rounded-md" required>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Address</label>
          <input type="text" id="new-business-address" class="w-full p-2 border border-gray-300 rounded-md" required>
        </div>
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">City</label>
            <input type="text" id="new-business-city" class="w-full p-2 border border-gray-300 rounded-md" required>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">State</label>
            <select id="new-business-state" class="w-full p-2 border border-gray-300 rounded-md" required>
              <option value="WI">Wisconsin</option>
              <option value="IL">Illinois</option>
              <option value="MN">Minnesota</option>
              <option value="FL">Florida</option>
              <option value="IN">Indiana</option>
              <option value="MI">Michigan</option>
              <option value="TN">Tennessee</option>
              <option value="OTHER">Other</option>
            </select>
          </div>
        </div>
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">ZIP</label>
            <input type="text" id="new-business-zip" class="w-full p-2 border border-gray-300 rounded-md" required>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
            <input type="tel" id="new-business-phone" class="w-full p-2 border border-gray-300 rounded-md">
          </div>
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Website</label>
          <input type="url" id="new-business-website" class="w-full p-2 border border-gray-300 rounded-md">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Email</label>
          <input type="email" id="new-business-email" class="w-full p-2 border border-gray-300 rounded-md">
        </div>
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Tags</label>
          <div class="flex flex-wrap gap-2">
            <label class="inline-flex items-center">
              <input type="checkbox" class="form-checkbox" value="Record Stores">
              <span class="ml-2 text-sm">Record Store</span>
            </label>
            <label class="inline-flex items-center">
              <input type="checkbox" class="form-checkbox" value="Instrument Shops">
              <span class="ml-2 text-sm">Instrument Shop</span>
            </label>
            <label class="inline-flex items-center">
              <input type="checkbox" class="form-checkbox" value="Music Schools">
              <span class="ml-2 text-sm">Music School</span>
            </label>
            <label class="inline-flex items-center">
              <input type="checkbox" class="form-checkbox" value="Studios">
              <span class="ml-2 text-sm">Studio</span>
            </label>
          </div>
        </div>
        <div class="flex justify-end">
          <button type="submit" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none">
            Add Record
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Google Maps is loaded in the header -->

  <!-- Direct link handlers for communication tools -->
  <script>
    // Add direct link handlers for communication tools
    document.addEventListener('DOMContentLoaded', function() {
      // Zoom meeting direct link
      const zoomLinks = document.querySelectorAll('a[href*="zoom.us"]');
      zoomLinks.forEach(link => {
        link.setAttribute('target', '_blank');
        link.addEventListener('click', function(e) {
          console.log('Opening Zoom meeting...');
        });
      });

      // Teams meeting direct link
      const teamsLinks = document.querySelectorAll('a[href*="teams.microsoft.com"]');
      teamsLinks.forEach(link => {
        link.setAttribute('target', '_blank');
        link.addEventListener('click', function(e) {
          console.log('Opening Microsoft Teams meeting...');
        });
      });

      // Telegram direct link
      const telegramLinks = document.querySelectorAll('a[href*="t.me"]');
      telegramLinks.forEach(link => {
        link.setAttribute('target', '_blank');
        link.addEventListener('click', function(e) {
          console.log('Opening Telegram...');
        });
      });

      // Email client direct link
      const emailLinks = document.querySelectorAll('a[href*="mailto:"]');
      emailLinks.forEach(link => {
        link.addEventListener('click', function(e) {
          console.log('Opening email client...');
        });
      });
    });
  </script>

  <script>
    // Define global functions before DOMContentLoaded
    function prepopulateVisit(businessName) {
      const visitBusinessElement = document.getElementById('visit-business');
      if (!visitBusinessElement) return;

      for (let i = 0; i < visitBusinessElement.options.length; i++) {
        if (visitBusinessElement.options[i].text.includes(businessName)) {
          visitBusinessElement.selectedIndex = i;
          break;
        }
      }

      const notesElement = document.getElementById('visit-notes');
      if (notesElement) {
        notesElement.value = `Automatically detected visit to ${businessName} on ${new Date().toLocaleString()}`;
      }
    }

    // Call this on page load to initialize all agent panel listeners
    document.addEventListener('DOMContentLoaded', function() {
      initializeAgentPanelListeners();
    });

    // Function to initialize Agent Panel event listeners
    function initializeAgentPanelListeners() {
      console.log("Initializing Agent Panel listeners...");

      // Agent Tools panel toggle
      const agentToolsBtn = document.getElementById('agent-tools');
      if (agentToolsBtn) {
        // Remove existing listeners by cloning and replacing
        const newAgentToolsBtn = agentToolsBtn.cloneNode(true);
        agentToolsBtn.parentNode.replaceChild(newAgentToolsBtn, agentToolsBtn);

        newAgentToolsBtn.addEventListener('click', function() {
          console.log("Agent tools button clicked");
          const toolsPanel = document.getElementById('agent-tools-panel');
          if (toolsPanel) {
            toolsPanel.classList.toggle('hidden');
          }
        });
      }

      // Agent minimize
      const minimizeBtn = document.getElementById('minimize-agent');
      if (minimizeBtn) {
        // Remove existing listeners by cloning and replacing
        const newMinimizeBtn = minimizeBtn.cloneNode(true);
        minimizeBtn.parentNode.replaceChild(newMinimizeBtn, minimizeBtn);

        newMinimizeBtn.addEventListener('click', function() {
          console.log("Minimize button clicked");
          const agentPanel = document.getElementById('agent-panel');
          if (!agentPanel) {
            console.error("Agent panel not found");
            return;
          }

          // Store original content to be restored later
          const originalContent = agentPanel.innerHTML;
          agentPanel.setAttribute('data-original-content', originalContent);

          // Replace with minimized version
          agentPanel.classList.add('minimized');
          agentPanel.innerHTML = '<button id="restore-agent" class="bg-white rounded-full w-full h-full flex items-center justify-center shadow-lg"><span class="text-xl text-blue-600">üß†</span></button>';

          // Add event listener to the restore button
          const restoreBtn = document.getElementById('restore-agent');
          if (restoreBtn) {
            restoreBtn.addEventListener('click', function() {
              console.log("Restore button clicked");
              // Restore original content
              agentPanel.classList.remove('minimized');
              const originalContent = agentPanel.getAttribute('data-original-content');
              agentPanel.innerHTML = originalContent;

              // Reinitialize event listeners
              setTimeout(function() {
                initializeAgentPanelListeners();
              }, 100);
            });
          }
        });
      }

      // Agent collapse
      const collapseBtn = document.getElementById('collapse-agent');
      if (collapseBtn) {
        // Remove existing listeners by cloning and replacing
        const newCollapseBtn = collapseBtn.cloneNode(true);
        collapseBtn.parentNode.replaceChild(newCollapseBtn, collapseBtn);

        newCollapseBtn.addEventListener('click', function() {
          console.log("Collapse button clicked");
          const agentContent = document.getElementById('agent-content');
          if (agentContent) {
            if (agentContent.style.display === 'none') {
              agentContent.style.display = 'block';
              this.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>';
            } else {
              agentContent.style.display = 'none';
              this.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" /></svg>';
            }
          }
        });
      }
    }

    // Email Signature HTML
    const emailSignatureHTML = `
      <div style="margin-top: 20px; border-top: 1px solid #E2E8F0; padding-top: 15px;">
        <div style="font-family: 'Inter', sans-serif;">
          <h1 style="font-family: 'Fira Code', monospace; font-size: 16px; font-weight: 600; color: #3182ce; margin: 0;">Leonard Lee / Agent Lee</h1>
          <p style="font-family: 'Fira Code', monospace; font-size: 12px; color: #718096; margin: 4px 0 0;">> Engineer | Developer</p>

          <div style="margin-top: 8px;">
            <div style="display: flex; align-items: center; gap: 8px; font-size: 12px; margin-bottom: 4px;">
              <span style="color: #3182ce;">‚úâÔ∏è</span>
              <span>agentlee@rapidwebdevelop.com</span>
            </div>

            <div style="display: flex; align-items: center; gap: 8px; font-size: 12px;">
              <span style="color: #3182ce;">üìû</span>
              <span>(414) 367-6211 | (414) 626-9992</span>
            </div>
          </div>

          <div style="margin-top: 12px; font-style: italic; font-size: 10px; color: #718096;">Engineering the future, one line of code at a time.</div>
        </div>
      </div>
    `;

    // Global variables
    var userLat, userLng;
    var map;

    // Initialize Google Maps
    function initMap() {
      console.log("Initializing Google Maps...");
      try {
        // Create the map centered on Milwaukee
        map = new google.maps.Map(document.getElementById('map'), {
          center: { lat: 43.0389, lng: -87.9065 },
          zoom: 10,
          mapTypeControl: true,
          streetViewControl: true,
          fullscreenControl: true
        });

        // Add markers for all music stores
        addStoreMarkers();

        console.log("Google Maps initialized successfully");
      } catch (err) {
        console.error("Failed to initialize Google Maps:", err);
      }
    }

    // Function to add markers for all stores
    function addStoreMarkers() {
      if (!map) {
        console.error("Map not initialized");
        return;
      }

      // Add markers for each store
      musicStores.forEach(store => {
        if (store.lat && store.lng) {
          const marker = new google.maps.Marker({
            position: { lat: store.lat, lng: store.lng },
            map: map,
            title: store.name
          });

          // Add info window with store details
          const infoContent = `
            <div class="p-2">
              <h3 class="font-bold">${store.name}</h3>
              <p>${store.address}, ${store.city}, ${store.state} ${store.zip}</p>
              <p>${store.phone}</p>
              <p><a href="http://${store.website}" target="_blank">${store.website}</a></p>
              <p class="text-xs mt-1">${store.tags.join(', ')}</p>
            </div>
          `;

          const infoWindow = new google.maps.InfoWindow({
            content: infoContent
          });

          marker.addListener('click', function() {
            infoWindow.open(map, marker);
          });
        }
      });
    }

    // Store Dataset
    const musicStores = [
      // Wisconsin
      { name: "Baraboo Music LLC", address: "129 3rd St", city: "Baraboo", state: "WI", zip: "53913", phone: "(608) 355-0207", website: "baraboomusic.com", email: "info@baraboomusic.com", tags: ["Instrument Shops"], lat: 43.4716, lng: -89.7430 },
      { name: "Lincoln Music House", address: "3379 S 13th St", city: "Milwaukee", state: "WI", zip: "53215", phone: "(414) 647-9608", website: "lincolnmusichouse.com", email: "info@lincolnmusichouse.com", tags: ["Instrument Shops"], lat: 42.9887, lng: -87.9293 },
      { name: "Uncle Bob's Music Center", address: "5080 S 108th St", city: "Greenfield", state: "WI", zip: "53228", phone: "(414) 529-8910", website: "unclebobsmusic.com", email: "info@unclebobsmusic.com", tags: ["Instrument Shops"], lat: 42.9538, lng: -88.0486 },
      { name: "Outpost Music", address: "1330 S Commercial St", city: "Neenah", state: "WI", zip: "54956", phone: "(920) 722-9400", website: "outpostmusic.com", email: "info@outpostmusic.com", tags: ["Instrument Shops"], lat: 44.1585, lng: -88.4628 },
      { name: "Schmitt Music", address: "6750 W Layton Ave", city: "Greenfield", state: "WI", zip: "53220", phone: "(414) 281-3500", website: "schmittmusic.com", email: "info@schmittmusic.com", tags: ["Instrument Shops"], lat: 42.9599, lng: -87.9980 },
      { name: "West End Music", address: "1131 N 8th St", city: "Sheboygan", state: "WI", zip: "53081", phone: "(920) 458-5842", website: "westendmusic.com", email: "info@westendmusic.com", tags: ["Instrument Shops"], lat: 43.7551, lng: -87.7149 },
      { name: "Music Masters Green Bay", address: "1169 Velp Ave", city: "Green Bay", state: "WI", zip: "54303", phone: "(920) 499-0700", website: "musicmastersgreenbay.com", email: "info@musicmastersgreenbay.com", tags: ["Instrument Shops"], lat: 44.5334, lng: -88.0566 },
      { name: "The Guitar Doctor", address: "1802 S 15th St", city: "Sheboygan", state: "WI", zip: "53081", phone: "(920) 457-1191", website: "guitardoctorwi.com", email: "info@guitardoctorwi.com", tags: ["Instrument Shops"], lat: 43.7392, lng: -87.7207 },
      { name: "Main Street Music", address: "101 W Main St", city: "Sun Prairie", state: "WI", zip: "53590", phone: "(608) 837-3665", website: "mainstreetmusic.net", email: "info@mainstreetmusic.net", tags: ["Instrument Shops"], lat: 43.1834, lng: -89.2139 },
      { name: "Spring Valley Music", address: "S430 McKay Ave", city: "Spring Valley", state: "WI", zip: "54767", phone: "(715) 778-4334", website: "springvalleymusic.com", email: "info@springvalleymusic.com", tags: ["Instrument Shops"], lat: 44.8507, lng: -92.2371 },
      { name: "Knick Knack Records", address: "100 E Capitol Dr", city: "Hartland", state: "WI", zip: "53029", phone: "(262) 367-7817", website: "knickknackrecords.com", email: "info@knickknackrecords.com", tags: ["Record Stores"], lat: 43.1009, lng: -88.3496 },
      { name: "Rock N Roll Land", address: "504 S Military Ave", city: "Green Bay", state: "WI", zip: "54303", phone: "(920) 490-2881", website: "rocknrollland.com", email: "info@rocknrollland.com", tags: ["Record Stores"], lat: 44.5104, lng: -88.0490 },
      { name: "Instrumental Music Co", address: "920 S Military Ave", city: "Green Bay", state: "WI", zip: "54304", phone: "(920) 498-2228", website: "instrumental-music.com", email: "info@instrumental-music.com", tags: ["Instrument Shops"], lat: 44.5047, lng: -88.0491 },
      { name: "Lloyd's Guitars", address: "2747 Manitowoc Rd", city: "Green Bay", state: "WI", zip: "54311", phone: "(920) 857-3767", website: "lloydsguitars.com", email: "info@lloydsguitars.com", tags: ["Instrument Shops"], lat: 44.4864, lng: -87.9673 },
      { name: "Jim Zill Guitar Repair", address: "1624 Losey Blvd S", city: "La Crosse", state: "WI", zip: "54601", phone: "(608) 785-7704", website: "jimzguitarrepair.com", email: "info@jimzguitarrepair.com", tags: ["Instrument Shops"], lat: 43.7931, lng: -91.2379 },
      { name: "Offbeats Violin & Guitar", address: "1328 W Clairemont Ave", city: "Eau Claire", state: "WI", zip: "54701", phone: "(715) 832-9392", website: "offbeatsviolin.com", email: "info@offbeatsviolin.com", tags: ["Instrument Shops"], lat: 44.7934, lng: -91.5168 },
      { name: "Guitar Shop of Wisconsin", address: "2929 E Washington Ave", city: "Madison", state: "WI", zip: "53704", phone: "(608) 249-5444", website: "guitarshopofwisconsin.com", email: "info@guitarshopofwisconsin.com", tags: ["Instrument Shops"], lat: 43.1209, lng: -89.3390 },
      { name: "Music Center Inc.", address: "7700 Green Bay Rd", city: "Kenosha", state: "WI", zip: "53142", phone: "(262) 697-9393", website: "musiccenterinc.com", email: "info@musiccenterinc.com", tags: ["Instrument Shops"], lat: 42.5647, lng: -87.8779 },
      { name: "Ward-Brodt Music", address: "5976 Executive Dr", city: "Madison", state: "WI", zip: "53719", phone: "(608) 661-8600", website: "ward-brodt.com", email: "info@ward-brodt.com", tags: ["Instrument Shops"], lat: 43.0556, lng: -89.4917 },
      { name: "Blue Note Music", address: "1309 Regent St", city: "Madison", state: "WI", zip: "53715", phone: "(608) 251-5025", website: "bluenotemusic.com", email: "info@bluenotemusic.com", tags: ["Instrument Shops"], lat: 43.0659, lng: -89.4096 },
      { name: "Dave's Guitar Shop", address: "914 S 5th St", city: "Milwaukee", state: "WI", zip: "53204", phone: "(414) 763-2120", website: "davesguitar.com/milwaukee", email: "info@davesguitar.com", tags: ["Instrument Shops"], lat: 43.0234, lng: -87.9144 },
      { name: "Dave's Guitar Shop", address: "324 N Main St", city: "La Crosse", state: "WI", zip: "54601", phone: "(608) 785-7704", website: "davesguitar.com/lacrosse", email: "info@davesguitar.com", tags: ["Instrument Shops"], lat: 43.8141, lng: -91.2518 },
      { name: "Dave's Guitar Shop", address: "1227 S Main St", city: "Stevens Point", state: "WI", zip: "54481", phone: "(715) 344-8030", website: "davesguitar.com/stevens-point", email: "info@davesguitar.com", tags: ["Instrument Shops"], lat: 44.5020, lng: -89.5759 },
      { name: "Heid Music", address: "7948 Tree Ln", city: "Madison", state: "WI", zip: "53717", phone: "(608) 829-1969", website: "heidmusic.com", email: "madison@heidmusic.com", tags: ["Instrument Shops"], lat: 43.0723, lng: -89.5181 },
      { name: "Heid Music", address: "308 E College Ave", city: "Appleton", state: "WI", zip: "54911", phone: "(920) 734-1969", website: "heidmusic.com", email: "appleton@heidmusic.com", tags: ["Instrument Shops"], lat: 44.2619, lng: -88.4003 },
      { name: "Heid Music", address: "2605 S Oneida St", city: "Green Bay", state: "WI", zip: "54304", phone: "(920) 498-2228", website: "heidmusic.com", email: "greenbay@heidmusic.com", tags: ["Instrument Shops"], lat: 44.4862, lng: -88.0753 },
      { name: "Heid Music", address: "1750 W South Park Ave", city: "Oshkosh", state: "WI", zip: "54902", phone: "(920) 651-4343", website: "heidmusic.com", email: "oshkosh@heidmusic.com", tags: ["Instrument Shops"], lat: 43.9930, lng: -88.5701 },
      { name: "Brass Bell Music", address: "210 W Silver Spring Dr", city: "Milwaukee", state: "WI", zip: "53217", phone: "(414) 963-1000", website: "brassbellmusic.com", email: "info@brassbellmusic.com", tags: ["Instrument Shops"], lat: 43.1257, lng: -87.9143 },
      { name: "Music Go Round", address: "7425 W Holmes Ave", city: "Greenfield", state: "WI", zip: "53220", phone: "(414) 281-2777", website: "musicgoround.com/greenfield", email: "mgr.greenfieldwi@musicgoround.com", tags: ["Instrument Shops"], lat: 42.9504, lng: -88.0083 },
      { name: "Rushmor Records", address: "2635 S Kinnickinnic Ave", city: "Milwaukee", state: "WI", zip: "53207", phone: "(414) 481-4890", website: "rushmor.com", email: "rushmorrecords@gmail.com", tags: ["Record Stores"], lat: 43.0001, lng: -87.8833 },

      // Illinois
      { name: "Reckless Records", address: "929 W Belmont Ave", city: "Chicago", state: "IL", zip: "60657", phone: "(773) 404-5080", website: "reckless.com", email: "orders@reckless.com", tags: ["Record Stores"], lat: 41.9399, lng: -87.6533 },
      { name: "Reckless Records", address: "1379 N Milwaukee Ave", city: "Chicago", state: "IL", zip: "60622", phone: "(773) 235-3727", website: "reckless.com", email: "orders@reckless.com", tags: ["Record Stores"], lat: 41.9068, lng: -87.6733 },
      { name: "Reckless Records", address: "33 S Wabash Ave", city: "Chicago", state: "IL", zip: "60603", phone: "(312) 795-0878", website: "reckless.com", email: "orders@reckless.com", tags: ["Record Stores"], lat: 41.8809, lng: -87.6263 },
      { name: "Dusty Groove", address: "1120 N Ashland Ave", city: "Chicago", state: "IL", zip: "60622", phone: "(312) 666-1200", website: "dustygroove.com", email: "info@dustygroove.com", tags: ["Record Stores"], lat: 41.9019, lng: -87.6673 },
      { name: "Laurie's Planet of Sound", address: "4639 N Lincoln Ave", city: "Chicago", state: "IL", zip: "60625", phone: "(773) 271-3569", website: "lauriesplanetofsound.com", email: "lauriesplanetofsound@gmail.com", tags: ["Record Stores"], lat: 41.9661, lng: -87.6849 },

      // Minnesota
      { name: "Electric Fetus", address: "2001 4th Ave S", city: "Minneapolis", state: "MN", zip: "55404", phone: "(612) 870-9300", website: "electricfetus.com", email: "info@electricfetus.com", tags: ["Record Stores"], lat: 44.9633, lng: -93.2760 },
      { name: "Electric Fetus St. Cloud", address: "28 5th Ave S", city: "St. Cloud", state: "MN", zip: "56301", phone: "(320) 251-3982", website: "electricfetus.com", email: "info@electricfetus.com", tags: ["Record Stores"], lat: 45.5607, lng: -94.1632 },
      { name: "Down in the Valley", address: "8020 Olson Memorial Hwy", city: "Golden Valley", state: "MN", zip: "55427", phone: "(763) 544-0100", website: "downinthevalley.com", email: "info@downinthevalley.com", tags: ["Record Stores"], lat: 45.0198, lng: -93.3699 },
      { name: "Hymie's Records", address: "3820 E Lake St", city: "Minneapolis", state: "MN", zip: "55406", phone: "(612) 729-8890", website: "hymiesrecords.com", email: "hymiesrecords@gmail.com", tags: ["Record Stores"], lat: 44.9485, lng: -93.2248 },
      { name: "Mill City Sound", address: "813 Mainstreet", city: "Hopkins", state: "MN", zip: "55343", phone: "(952) 303-6436", website: "millcitysound.com", email: "info@millcitysound.com", tags: ["Record Stores"], lat: 44.9251, lng: -93.4121 },

      // Florida
      { name: "Park Ave CDs", address: "2916 Corrine Dr", city: "Orlando", state: "FL", zip: "32803", phone: "(407) 447-7275", website: "parkavecds.com", email: "info@parkavecds.com", tags: ["Record Stores"], lat: 28.5723, lng: -81.3651 },
      { name: "Retro Records", address: "59 N Bumby Ave", city: "Orlando", state: "FL", zip: "32803", phone: "(407) 898-2484", website: "N/A", email: "N/A", tags: ["Record Stores"], lat: 28.5425, lng: -81.3520 },
      { name: "Rock & Roll Heaven", address: "1814 N Orange Ave", city: "Orlando", state: "FL", zip: "32804", phone: "(407) 896-1952", website: "rock-n-rollheaven.com", email: "N/A", tags: ["Record Stores"], lat: 28.5738, lng: -81.3747 },

      // Indiana
      { name: "Indy CD & Vinyl", address: "806 Broad Ripple Ave", city: "Indianapolis", state: "IN", zip: "46220", phone: "(317) 259-1012", website: "indycdandvinyl.com", email: "N/A", tags: ["Record Stores"], lat: 39.8713, lng: -86.1419 },
      { name: "Irvington Vinyl & Books", address: "202 S Audubon Rd", city: "Indianapolis", state: "IN", zip: "46219", phone: "(317) 354-0891", website: "irvingtonvinyl.com", email: "N/A", tags: ["Record Stores"], lat: 39.7652, lng: -86.0722 },
      { name: "Luna Music", address: "5202 N College Ave", city: "Indianapolis", state: "IN", zip: "46220", phone: "(317) 283-5862", website: "lunamusic.net", email: "N/A", tags: ["Record Stores"], lat: 39.8421, lng: -86.1440 },

      // Michigan
      { name: "Elderly Instruments", address: "1100 N Washington Ave", city: "Lansing", state: "MI", zip: "48906", phone: "(517) 372-7880", website: "elderly.com", email: "info@elderly.com", tags: ["Instrument Shops"], lat: 42.7392, lng: -84.5510 },
      { name: "Motor City Guitar", address: "24350 Hoover Rd", city: "Warren", state: "MI", zip: "48089", phone: "(586) 755-2450", website: "motorcityguitar.com", email: "info@motorcityguitar.com", tags: ["Instrument Shops"], lat: 42.4599, lng: -82.9973 },
      { name: "Third Man Records", address: "441 W Canfield St", city: "Detroit", state: "MI", zip: "48201", phone: "(313) 209-5205", website: "thirdmanrecords.com", email: "info@thirdmanrecords.com", tags: ["Record Stores"], lat: 42.3510, lng: -83.0681 },

      // Tennessee
      { name: "Gruhn Guitars", address: "2120 8th Ave S", city: "Nashville", state: "TN", zip: "37204", phone: "(615) 256-2033", website: "gruhnguitars.com", email: "gruhn@gruhn.com", tags: ["Instrument Shops"], lat: 36.1280, lng: -86.7841 },
      { name: "Corner Music", address: "3048 Dickerson Pike", city: "Nashville", state: "TN", zip: "37207", phone: "(615) 297-9559", website: "cornermusic.com", email: "info@cornermusic.com", tags: ["Instrument Shops"], lat: 36.2080, lng: -86.7623 },
      { name: "Grimey's New & Preloved", address: "1060 E Trinity Ln", city: "Nashville", state: "TN", zip: "37216", phone: "(615) 226-3811", website: "grimeys.com", email: "info@grimeys.com", tags: ["Record Stores"], lat: 36.2090, lng: -86.7534 },
    ];

    const visitHistory = [
      {
        business: "Rushmor Records",
        address: "2635 S Kinnickinnic Ave",
        city: "Milwaukee",
        state: "WI",
        contactPerson: "Dan",
        date: "May 18, 2023",
        notes: "They were interested in our new releases. Follow up in two weeks.",
        hasVoiceNote: true,
        voiceNoteUrl: "#"
      },
      {
        business: "Reckless Records",
        address: "1379 N Milwaukee Ave",
        city: "Chicago",
        state: "IL",
        contactPerson: "Sarah",
        date: "May 12, 2023",
        notes: "Discussed consignment options. They'll review our catalog and get back to us.",
        hasVoiceNote: true,
        voiceNoteUrl: "#"
      },
      {
        business: "Dave's Guitar Shop",
        address: "914 S 5th St",
        city: "Milwaukee",
        state: "WI",
        contactPerson: "Mike",
        date: "May 10, 2023",
        notes: "Talked about possible in-store event for album launch. They seem interested.",
        hasVoiceNote: false
      }
    ];

    // Explicitly define key functions in global scope
    function calculateDistance(lat1, lon1, lat2, lon2) {
      // Calculate the distance between two points using the Haversine formula
      const R = 3958.8; // Radius of the Earth in miles
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;
      const a =
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      const distance = R * c;
      return distance;
    }

    function addAgentMessage(sender, message) {
      const messagesContainer = document.getElementById('agent-messages');
      if (!messagesContainer) return;

      const messageHtml = `
        <div class="mb-2">
          <span class="font-medium">${sender}:</span> ${message}
        </div>
      `;

      messagesContainer.insertAdjacentHTML('beforeend', messageHtml);
      messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    // Function to populate store selection dropdown with data from JS files
    function populateStoreSelectionDropdown() {
      const storeSelect = document.getElementById('store-select');
      if (!storeSelect) return;

      // Clear existing options except the first one
      while (storeSelect.options.length > 1) {
        storeSelect.remove(1);
      }

      // Combine stores from both JS files
      let allStores = [];

      // Add stores from complete_music_store_list.js if available
      if (typeof musicStores !== 'undefined') {
        allStores = [...allStores, ...musicStores];
      }

      // Add stores from gh.js if available
      if (typeof finalLeads !== 'undefined') {
        // Convert finalLeads format to match musicStores format
        const convertedStores = finalLeads.map(store => ({
          name: store.store_name,
          address: store.address,
          city: store.city,
          state: store.state,
          zip: store.zip_code,
          phone: store.phone,
          website: store.website,
          email: store.email,
          tags: store.tags || ["Record Stores"],
          lat: store.lat,
          lng: store.lng
        }));

        allStores = [...allStores, ...convertedStores];
      }

      // Sort stores alphabetically by name
      allStores.sort((a, b) => a.name.localeCompare(b.name));

      // Add stores to dropdown
      allStores.forEach(store => {
        const option = document.createElement('option');
        option.value = store.name;
        option.text = `${store.name} (${store.city}, ${store.state})`;
        storeSelect.appendChild(option);
      });

      console.log(`Populated store dropdown with ${allStores.length} stores`);
    }

    // CRM Main Functionality
    document.addEventListener('DOMContentLoaded', function() {
      console.log("DOM Content Loaded - Initializing CRM...");

      // Populate store selection dropdown with data from JS files
      populateStoreSelectionDropdown();

      // Initialize IndexedDB
      const dbPromise = idbKeyval.createStore('agent-lee-crm', 'stores');

      // Handle panel collapse/minimize functionality
      document.getElementById('collapse-agent').addEventListener('click', function() {
        const agentContent = document.getElementById('agent-content');
        if (agentContent.style.display === 'none') {
          agentContent.style.display = 'block';
          this.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" /></svg>';
        } else {
          agentContent.style.display = 'none';
          this.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" /></svg>';
        }
      });

      // Function to initialize Agent Panel event listeners
      function initializeAgentPanelListeners() {
        // Agent Tools panel toggle
        document.getElementById('agent-tools').addEventListener('click', function() {
          const toolsPanel = document.getElementById('agent-tools-panel');
          toolsPanel.classList.toggle('hidden');
        });

        // Agent collapse
        document.getElementById('collapse-agent').addEventListener('click', function() {
          const content = document.getElementById('agent-content');
          if (content.style.display === 'none') {
            content.style.display = 'block';
            this.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>`;
          } else {
            content.style.display = 'none';
            this.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
            </svg>`;
          }
        });

        // Agent minimize
        document.getElementById('minimize-agent').addEventListener('click', function() {
          const agentPanel = document.getElementById('agent-panel');

          // Store original content to be restored later
          const originalContent = agentPanel.innerHTML;
          agentPanel.setAttribute('data-original-content', originalContent);

          // Replace with minimized version
          agentPanel.classList.add('minimized');
          agentPanel.innerHTML = '<button id="restore-agent" class="bg-white rounded-full w-full h-full flex items-center justify-center shadow-lg"><span class="text-xl text-blue-600">üß†</span></button>';

          // Add event listener to the restore button
          document.getElementById('restore-agent').addEventListener('click', function() {
            // Restore original content
            agentPanel.classList.remove('minimized');
            const originalContent = agentPanel.getAttribute('data-original-content');
            agentPanel.innerHTML = originalContent;

            // Reinitialize event listeners
            setTimeout(function() {
              initializeAgentPanelListeners();
            }, 100);
          });
        });
      }

      // Initialize the Agent Panel listeners with fixed functionality
      // Remove old event listener first
      const minimizeBtn = document.getElementById('minimize-agent');
      if (minimizeBtn) {
        const newMinimizeBtn = minimizeBtn.cloneNode(true);
        minimizeBtn.parentNode.replaceChild(newMinimizeBtn, minimizeBtn);

        // Add new event listener
        newMinimizeBtn.addEventListener('click', function() {
          console.log("Minimize button clicked");
          const agentPanel = document.getElementById('agent-panel');

          if (!agentPanel.classList.contains('minimized')) {
            // Store original content to be restored later
            const originalContent = agentPanel.innerHTML;
            agentPanel.setAttribute('data-original-content', originalContent);

            // Replace with minimized version
            agentPanel.classList.add('minimized');
            agentPanel.innerHTML = '<button id="restore-agent" class="bg-white rounded-full w-full h-full flex items-center justify-center shadow-lg"><span class="text-xl text-blue-600">üß†</span></button>';

            // Add event listener to the restore button
            const restoreBtn = document.getElementById('restore-agent');
            if (restoreBtn) {
              restoreBtn.addEventListener('click', function() {
                console.log("Restore button clicked");
                // Restore original content
                agentPanel.classList.remove('minimized');
                const originalContent = agentPanel.getAttribute('data-original-content');
                agentPanel.innerHTML = originalContent;

                // Reinitialize all event listeners
                setTimeout(function() {
                  // Need to call the function to reinitialize event listeners
                  if (typeof initializeAgentPanelListeners === 'function') {
                    initializeAgentPanelListeners();
                  }
                }, 100);
              });
            }
          }
        });
      }

      // Initialize speech synthesis for Agent Lee
      const speechSynthesis = window.speechSynthesis;
      let agentLeeVoice = null;

      // Set up speech synthesis voice
      function initSpeechSynthesis() {
        if (!speechSynthesis) {
          console.error("Speech synthesis not supported in this browser");
          return;
        }

        // Wait for voices to be loaded
        speechSynthesis.onvoiceschanged = function() {
          const voices = speechSynthesis.getVoices();
          // Try to find a good voice for Agent Lee
          for (let voice of voices) {
            // Prefer a male English voice
            if (voice.lang.includes('en') && (voice.name.includes('Male') || voice.name.includes('David'))) {
              agentLeeVoice = voice;
              console.log("Selected voice for Agent Lee:", voice.name);
              break;
            }
          }

          // If no preferred voice found, use the first English voice
          if (!agentLeeVoice) {
            for (let voice of voices) {
              if (voice.lang.includes('en')) {
                agentLeeVoice = voice;
                console.log("Selected fallback voice for Agent Lee:", voice.name);
                break;
              }
            }
          }

          // If still no voice, use the first available
          if (!agentLeeVoice && voices.length > 0) {
            agentLeeVoice = voices[0];
            console.log("Selected default voice for Agent Lee:", voice.name);
          }
        };

        // Trigger voices loading
        speechSynthesis.getVoices();
      }

      // Initialize speech synthesis
      initSpeechSynthesis();

      // Initialize Map
      let map;
      let markers = [];
      let infoWindow;
      let bounds;

      // This function is called by the Google Maps API when it loads
      function initMap() {
        console.log("Google Maps API callback received");
        initializeMap();
      }

      // Main map initialization function
      function initializeMap() {
        try {
          console.log("Initializing map...");

          // Check if the map container exists
          const mapContainer = document.getElementById('map');
          if (!mapContainer) {
            console.error("Map container not found");
            return;
          }

          // Check if map is already initialized
          if (window.googleMap) {
            console.log("Google Map already initialized");

            // Trigger resize event for Google Maps to fix rendering issues
            if (google && google.maps && google.maps.event) {
              google.maps.event.trigger(window.googleMap, 'resize');
              console.log("Triggered resize event for existing map");
            }

            // Add event listener for map tab visibility changes
            const mapTab = document.getElementById('map-tab');
            if (mapTab && window.ResizeObserver) {
              const resizeObserver = new ResizeObserver(() => {
                // Force map redraw when tab becomes visible
                if (!mapTab.classList.contains('hidden')) {
                  setTimeout(() => {
                    // Trigger resize event for Google Maps
                    if (google && google.maps && google.maps.event) {
                      google.maps.event.trigger(window.googleMap, 'resize');
                      console.log("Triggered resize event after tab visibility change");
                    }
                  }, 100);
                }
              });
              resizeObserver.observe(mapTab);
            }
            return;
          }

          // Ensure map container has proper height
          mapContainer.style.height = '500px';

          console.log("Creating new Google Maps instance");

          // Initialize map immediately to prevent race conditions
          try {
            // Default to Milwaukee with wider view
            const defaultLatLng = { lat: 43.0389, lng: -87.9065 };

            // Check if Google Maps API is loaded
            if (!google || !google.maps || !google.maps.Map) {
              console.error("Google Maps API not loaded yet");
              // Try again after a short delay
              setTimeout(initializeMap, 500);
              return;
            }

            // Create the map
            window.googleMap = new google.maps.Map(document.getElementById('map'), {
              center: defaultLatLng,
              zoom: 8,
              mapTypeControl: true,
              streetViewControl: true,
              fullscreenControl: true,
              zoomControl: true
            });

            console.log("Google Maps initialized successfully");

            // Assign to the global map variable for compatibility
            map = window.googleMap;

            // Create bounds object for map
            bounds = new google.maps.LatLngBounds();

            // Create info window for markers
            infoWindow = new google.maps.InfoWindow();

            // Try to get user location
            if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(
                function(position) {
                  const userLat = position.coords.latitude;
                  const userLng = position.coords.longitude;
                  window.userLat = userLat; // Store globally
                  window.userLng = userLng;

                  console.log("Got user location:", userLat, userLng);

                  // Center map on user location
                  window.googleMap.setCenter({ lat: userLat, lng: userLng });
                  window.googleMap.setZoom(10);

                  // Add user marker
                  const userMarker = new google.maps.Marker({
                    position: { lat: userLat, lng: userLng },
                    map: window.googleMap,
                    title: 'Your Location',
                    icon: {
                      url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" fill="#3b82f6"/><text x="12" y="16" text-anchor="middle" fill="white" font-size="12px">üë§</text></svg>'),
                      scaledSize: new google.maps.Size(24, 24)
                    },
                    zIndex: 1000 // Ensure user marker is on top
                  });

                  // Add info window for user
                  const userInfoWindow = new google.maps.InfoWindow({
                    content: '<div class="text-center p-2"><strong>Your Location</strong></div>'
                  });

                  userMarker.addListener('click', function() {
                    userInfoWindow.open(window.googleMap, userMarker);
                  });

                  // Show nearby stores
                  displayStores(userLat, userLng);
                  populateNearbyList(userLat, userLng);
                },
                function(error) {
                  console.warn("Geolocation error:", error);
                  // Default to Milwaukee if geolocation fails
                  displayStores(43.0389, -87.9065);
                  populateNearbyList(43.0389, -87.9065);
                },
                {
                  timeout: 10000, // 10 second timeout
                  enableHighAccuracy: true
                }
              );
            } else {
              console.log("Geolocation not supported by this browser");
              // Default to Milwaukee
              displayStores(43.0389, -87.9065);
              populateNearbyList(43.0389, -87.9065);
            }
          } catch (mapErr) {
            console.error("Critical error creating map:", mapErr);
            alert("There was an error initializing the map. Please refresh the page and try again.");
          }

          // Add event listener for map tab visibility changes
          const mapTab = document.getElementById('map-tab');
          if (mapTab && window.ResizeObserver) {
            const resizeObserver = new ResizeObserver(() => {
              // Force map redraw when tab becomes visible
              if (!mapTab.classList.contains('hidden')) {
                setTimeout(() => {
                  if (window.googleMap && google && google.maps && google.maps.event) {
                    console.log("Triggering resize event after tab becomes visible");
                    google.maps.event.trigger(window.googleMap, 'resize');

                    // If we have bounds, fit to them
                    if (bounds && !bounds.isEmpty()) {
                      window.googleMap.fitBounds(bounds);
                    }
                  }
                }, 100);
              }
            });
            resizeObserver.observe(mapTab);
          }

        } catch (err) {
          console.error("Error initializing map:", err);
          // Retry map initialization after a short delay
          setTimeout(initializeMap, 1000);
        }
      }

      // Try to get user's location with automatic location tracking
      if (navigator.geolocation) {
        // Watch position instead of just getting it once
        const watchId = navigator.geolocation.watchPosition(
          function(position) {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;

            // Center map on user location if map exists
            if (window.googleMap) {
              window.googleMap.setCenter({ lat: userLat, lng: userLng });
              window.googleMap.setZoom(13);

              // Clear previous user marker if exists
              if (window.userMarker) {
                window.userMarker.setMap(null);
              }

              // Add user marker
              window.userMarker = new google.maps.Marker({
                position: { lat: userLat, lng: userLng },
                map: window.googleMap,
                title: 'Your Location',
                icon: {
                  url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" fill="#3b82f6"/><text x="12" y="16" text-anchor="middle" fill="white" font-size="12px">üë§</text></svg>'),
                  scaledSize: new google.maps.Size(24, 24)
                }
              });

              // Add info window for user
              const userInfoWindow = new google.maps.InfoWindow({
                content: '<div class="text-center"><strong>Your Location</strong></div>'
              });

              window.userMarker.addListener('click', function() {
                userInfoWindow.open(window.googleMap, window.userMarker);
              });

              // Show nearby stores
              displayStores(userLat, userLng);
              populateNearbyList(userLat, userLng);

              // Auto check-in at nearby locations
              checkProximityToStores(userLat, userLng);
            }
          },
          function(error) {
            console.error("Error getting location: ", error);
            // Fall back to default location
            displayStores(43.0389, -87.9065); // Milwaukee
            populateNearbyList(43.0389, -87.9065);
          },
          {
            enableHighAccuracy: true,
            maximumAge: 30000,
            timeout: 27000
          }
        );

        // Store the watch ID so we can stop it later if needed
        window.locationWatchId = watchId;
      } else {
        displayStores(43.0389, -87.9065); // Milwaukee
        populateNearbyList(43.0389, -87.9065);
      }

      // Initialize Database with all provided business data
      function initDatabase() {
        // Direct array of record stores as provided by the user
        const finalLeads = [
          // Minnesota stores
          {
            "store_name": "Electric Fetus",
            "address": "2001 4th Ave S",
            "city": "Minneapolis",
            "state": "MN",
            "zip_code": "55404",
            "phone": "(612) 870-9300",
            "website": "electricfetus.com",
            "email": "info@electricfetus.com",
            "source": "MN_B2_MPLS_4th",
            "lat": 44.9633,
            "lng": -93.2760,
            "tags": ["Record Stores"]
          },
          {
            "store_name": "Electric Fetus",
            "address": "509 Cedar St",
            "city": "St. Paul",
            "state": "MN",
            "zip_code": "55101",
            "phone": "(651) 224-5600",
            "website": "electricfetus.com",
            "email": "info@electricfetus.com",
            "source": "MN_B1_STP_Cedar",
            "lat": 44.9485,
            "lng": -93.1021,
            "tags": ["Record Stores"]
          },
          {
            "store_name": "Cheapo Discs",
            "address": "2600 Nicollet Ave",
            "city": "Minneapolis",
            "state": "MN",
            "zip_code": "55408",
            "phone": "(612) 871-0390",
            "website": "cheapodiscs.com",
            "email": "cheapo@cheapo.com",
            "source": "MN_LATEST_Cheapo_MPLS",
            "lat": 44.9558,
            "lng": -93.2780,
            "tags": ["Record Stores"]
          },
          {
            "store_name": "Cheapo Discs",
            "address": "2727 University Ave W",
            "city": "St. Paul",
            "state": "MN",
            "zip_code": "55114",
            "phone": "(651) 646-8080",
            "website": "cheapodiscs.com",
            "email": "info@cheapodiscs.com",
            "source": "MN_B1_STP_Uni",
            "lat": 44.9639,
            "lng": -93.1917,
            "tags": ["Record Stores"]
          },
          // Add more Minnesota stores with coordinates
          {
            "store_name": "Hymie's Vintage Records",
            "address": "3820 E Lake St",
            "city": "Minneapolis",
            "state": "MN",
            "zip_code": "55406",
            "phone": "(612) 729-8890",
            "website": "hymiesrecords.com",
            "email": "hymiesrecords@gmail.com",
            "source": "MN_B2_Hymies_3820",
            "lat": 44.9485,
            "lng": -93.2248,
            "tags": ["Record Stores"]
          },

          // Illinois stores
          {
            "store_name": "Reckless Records",
            "address": "929 W Belmont Ave",
            "city": "Chicago",
            "state": "IL",
            "zip_code": "60657",
            "phone": "(773) 404-5080",
            "website": "reckless.com",
            "email": "orders@reckless.com",
            "source": "IL_B1",
            "lat": 41.9399,
            "lng": -87.6533,
            "tags": ["Record Stores"]
          },
          {
            "store_name": "Reckless Records",
            "address": "1379 N Milwaukee Ave",
            "city": "Chicago",
            "state": "IL",
            "zip_code": "60622",
            "phone": "(773) 235-3727",
            "website": "reckless.com",
            "email": "orders@reckless.com",
            "source": "IL_B1",
            "lat": 41.9068,
            "lng": -87.6733,
            "tags": ["Record Stores"]
          },

          // Florida stores
          {
            "store_name": "Park Ave CDs",
            "address": "2916 Corrine Dr",
            "city": "Orlando",
            "state": "FL",
            "zip_code": "32803",
            "phone": "(407) 447-7275",
            "website": "parkavecds.com",
            "email": "info@parkavecds.com",
            "source": "FL_LATEST",
            "lat": 28.5723,
            "lng": -81.3651,
            "tags": ["Record Stores"]
          },

          // Indiana stores
          {
            "store_name": "Indy CD & Vinyl",
            "address": "806 Broad Ripple Ave",
            "city": "Indianapolis",
            "state": "IN",
            "zip_code": "46220",
            "phone": "(317) 259-1012",
            "website": "indycdandvinyl.com",
            "email": "info@indyvinyl.com",
            "source": "IN_LATEST",
            "lat": 39.8713,
            "lng": -86.1419,
            "tags": ["Record Stores"]
          },

          // Michigan stores
          {
            "store_name": "Third Man Records",
            "address": "441 W Canfield St",
            "city": "Detroit",
            "state": "MI",
            "zip_code": "48201",
            "phone": "(313) 209-5205",
            "website": "thirdmanrecords.com",
            "email": "info@thirdmanrecords.com",
            "source": "MI_LATEST",
            "lat": 42.3510,
            "lng": -83.0681,
            "tags": ["Record Stores"]
          },

          // Tennessee stores
          {
            "store_name": "Grimey's New & Preloved",
            "address": "1060 E Trinity Ln",
            "city": "Nashville",
            "state": "TN",
            "zip_code": "37216",
            "phone": "(615) 226-3811",
            "website": "grimeys.com",
            "email": "info@grimeys.com",
            "source": "TN_LATEST",
            "lat": 36.2090,
            "lng": -86.7534,
            "tags": ["Record Stores"]
          }
        ];

        // Process all stores including the large dataset provided by the user
        const processedStores = [...musicStores]; // Start with existing stores

        // Add all the user-provided stores from finalLeads array
        finalLeads.forEach(store => {
          // Convert store_name to name for compatibility
          const processedStore = {
            name: store.store_name,
            address: store.address,
            city: store.city,
            state: store.state,
            zip: store.zip_code,
            phone: store.phone,
            website: store.website,
            email: store.email,
            tags: store.tags || ["Record Stores"],
            lat: store.lat || (Math.random() * 10) + 40, // Generate random coordinates if missing
            lng: store.lng || (Math.random() * 20) - 90,
            visited: false
          };

          // Add to processed stores if not a duplicate
          if (!processedStores.some(s => s.name === processedStore.name && s.address === processedStore.address)) {
            processedStores.push(processedStore);
          }
        });

        // Save all the stores to IndexedDB
        idbKeyval.set('stores', processedStores, dbPromise)
          .then(() => {
            console.log('Store database initialized with', processedStores.length, 'records');

            // Immediately update the records tab to show the data
            populateRecordsTab();
          })
          .catch(err => {
            console.error('Failed to initialize store database:', err);
          });

        idbKeyval.get('visits', dbPromise).then(data => {
          if (!data || data.length === 0) {
            // Initialize with our preset data
            idbKeyval.set('visits', visitHistory, dbPromise);
          }
        });
      }

      // Call database initialization
      initDatabase();

      // Tab Navigation with Map Initialization
      try {
        const tabButtons = document.querySelectorAll('[data-tab]');
        console.log('Found tab buttons:', tabButtons.length);

        tabButtons.forEach(button => {
          button.addEventListener('click', function(event) {
            event.preventDefault();
            console.log('Tab clicked:', this.dataset.tab);
            const targetTab = this.dataset.tab;

            // Hide all tabs
            document.querySelectorAll('section[id$="-tab"]').forEach(tab => {
              tab.classList.add('hidden');
            });

            // Show target tab
            const tabToShow = document.getElementById(`${targetTab}-tab`);
            if (tabToShow) {
              tabToShow.classList.remove('hidden');
              console.log('Tab shown:', targetTab);

              // Special handling for map tab
              if (targetTab === 'map') {
                // Initialize map when map tab is clicked
                setTimeout(initializeMap, 100);
              }

              // Special handling for records tab
              if (targetTab === 'records') {
                // Make sure records are populated
                populateRecordsTab();
              }
            } else {
              console.error('Tab element not found:', targetTab);
            }

            // Update tab styling
            document.querySelectorAll('[data-tab]').forEach(btn => {
              btn.classList.remove('tab-active');
              btn.classList.add('text-gray-500');
            });

            this.classList.add('tab-active');
            this.classList.remove('text-gray-500');
          });
        });

        // Force the map tab to be active initially
        setTimeout(() => {
          const mapTab = document.querySelector('[data-tab="map"]');
          if (mapTab) {
            mapTab.click();
          }
        }, 200);
      } catch (err) {
        console.error('Error setting up tab navigation:', err);
      }

      // Distance Filter Buttons
      document.querySelectorAll('.distance-filter').forEach(button => {
        button.addEventListener('click', function() {
          // Remove active class from all buttons
          document.querySelectorAll('.distance-filter').forEach(btn => {
            btn.classList.remove('bg-blue-500', 'text-white');
            btn.classList.add('bg-gray-200', 'text-gray-700');
          });

          // Add active class to clicked button
          this.classList.add('bg-blue-500', 'text-white');
          this.classList.remove('bg-gray-200', 'text-gray-700');

          // Update the map with the selected distance
          const distance = parseInt(this.dataset.distance);

          // If we have the user's location
          if (userLat && userLng) {
            populateNearbyList(userLat, userLng, distance);
          }
        });
      });

      // State Filter Buttons
      document.querySelectorAll('.state-filter').forEach(button => {
        button.addEventListener('click', function() {
          // Remove active class from all buttons
          document.querySelectorAll('.state-filter').forEach(btn => {
            btn.classList.remove('bg-blue-500', 'text-white');
            btn.classList.add('bg-gray-200', 'text-gray-700');
          });

          // Add active class to clicked button
          this.classList.add('bg-blue-500', 'text-white');
          this.classList.remove('bg-gray-200', 'text-gray-700');

          // Filter the map by state
          const state = this.dataset.state;
          filterMapByState(state);
        });
      });

      // Records State Filter Buttons
      document.querySelectorAll('.records-state-filter').forEach(button => {
        button.addEventListener('click', function() {
          document.querySelectorAll('.records-state-filter').forEach(btn => {
            btn.classList.remove('bg-blue-500', 'text-white');
            btn.classList.add('bg-gray-200', 'text-gray-700');
          });

          this.classList.add('bg-blue-500', 'text-white');
          this.classList.remove('bg-gray-200', 'text-gray-700');

          const state = this.dataset.state;
          filterRecordsByState(state);
        });
      });

      // Records Search
      document.getElementById('records-search').addEventListener('input', function() {
        const searchQuery = this.value.toLowerCase();
        filterRecordsBySearch(searchQuery);
      });

      // Records Filter Dropdown
      document.getElementById('records-filter').addEventListener('change', function() {
        const filterValue = this.value;
        filterRecordsByStatus(filterValue);
      });

      // Add Record Button
      document.getElementById('add-record-btn').addEventListener('click', function() {
        document.getElementById('add-record-modal').classList.remove('hidden');
      });

      // Close Modal Button
      document.getElementById('close-modal').addEventListener('click', function() {
        document.getElementById('add-record-modal').classList.add('hidden');
      });

      // Add Record Form Submission
      document.getElementById('add-record-form').addEventListener('submit', function(e) {
        e.preventDefault();
        addNewRecord();
        document.getElementById('add-record-modal').classList.add('hidden');
      });

      // Recording Controls
      let mediaRecorder;
      let audioChunks = [];
      let recognition;
      let isGlobalRecording = false;

      // Initialize speech recognition if available in the browser
      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
        recognition.continuous = true;
        recognition.interimResults = true;

        recognition.onresult = function(event) {
          const result = event.results[event.results.length - 1];
          const transcript = result[0].transcript;
          document.getElementById('dictation-result').textContent = transcript;

          // Also update the notepad text if it exists
          const notepadText = document.getElementById('dictation-notepad-text');
          if (notepadText) {
            notepadText.value = transcript;
          }
        };

        recognition.onend = function() {
          if (isGlobalRecording) {
            recognition.start();
          }
        };
      }

      // Local recording in the Visits tab
      document.getElementById('start-recording').addEventListener('click', function() {
        this.classList.add('hidden');
        document.getElementById('stop-recording').classList.remove('hidden');
        document.getElementById('recording-status').textContent = 'Recording...';
        document.getElementById('recording-status').classList.add('text-red-500');
        this.classList.add('recording-wave');

        navigator.mediaDevices.getUserMedia({ audio: true })
          .then(stream => {
            mediaRecorder = new MediaRecorder(stream);
            mediaRecorder.start();

            mediaRecorder.addEventListener('dataavailable', event => {
              audioChunks.push(event.data);
            });

            mediaRecorder.addEventListener('stop', () => {
              const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
              const audioUrl = URL.createObjectURL(audioBlob);
              document.getElementById('audio-player').src = audioUrl;
              document.getElementById('audio-player-container').classList.remove('hidden');
              audioChunks = [];
            });
          })
          .catch(error => {
            console.error('Error accessing microphone:', error);
            document.getElementById('recording-status').textContent = 'Error: ' + error.message;
            document.getElementById('recording-status').classList.add('text-red-500');
          });
      });

      // Global recording in the header
      document.getElementById('global-record-btn').addEventListener('click', function() {
        // Create notepad first, then start recording
        createDictationNotepad();
        startGlobalRecording();
      });

      document.getElementById('global-stop-record').addEventListener('click', function() {
        stopGlobalRecording();
      });

      document.getElementById('dictation-cancel').addEventListener('click', function() {
        stopGlobalRecording();
        document.getElementById('dictation-result').textContent = 'Cancelled';
      });

      document.getElementById('dictation-process').addEventListener('click', function() {
        const dictationText = document.getElementById('dictation-result').textContent;
        processDictation(dictationText);
        stopGlobalRecording();
      });

      // Function to create and show the notepad
      function createDictationNotepad() {
        // Remove any existing notepad first
        const existingNotepad = document.getElementById('dictation-notepad');
        if (existingNotepad) {
          existingNotepad.remove();
        }

        // Create a new notepad
        const notepadArea = document.createElement('div');
        notepadArea.id = 'dictation-notepad';
        notepadArea.className = 'fixed left-1/2 top-1/4 transform -translate-x-1/2 bg-white p-4 rounded-lg shadow-lg z-50 w-3/4 max-w-2xl';
        notepadArea.innerHTML = `
          <div class="flex justify-between items-center mb-2">
            <h3 class="font-medium">Voice Dictation Notepad</h3>
            <button id="close-notepad" class="text-gray-500 hover:text-gray-700">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
          </div>
          <textarea id="dictation-notepad-text" class="w-full h-40 p-2 border border-gray-300 rounded-md" placeholder="Your dictation will appear here..."></textarea>
          <div class="mt-2 flex justify-end">
            <button id="save-notepad" class="bg-blue-500 text-white px-3 py-1 rounded-md hover:bg-blue-600 mr-2">Save</button>
            <button id="clear-notepad" class="bg-gray-200 text-gray-700 px-3 py-1 rounded-md hover:bg-gray-300">Clear</button>
          </div>
        `;
        document.body.appendChild(notepadArea);

        return notepadArea;
      }

      function startGlobalRecording() {
        isGlobalRecording = true;
        document.getElementById('global-record-btn').classList.add('hidden');
        document.getElementById('global-stop-record').classList.remove('hidden');
        document.getElementById('recording-wave').classList.remove('hidden');
        document.getElementById('dictation-status').classList.remove('hidden');
        document.getElementById('dictation-controls').classList.remove('hidden');
        document.getElementById('dictation-hint').classList.add('hidden');

        // Always create and show a fresh notepad when starting recording
        const notepadArea = createDictationNotepad();

        // Add event listeners to the notepad buttons
        document.getElementById('close-notepad').addEventListener('click', function() {
          document.getElementById('dictation-notepad').remove();
          // Stop recording if we're closing the notepad
          if (isGlobalRecording) {
            stopGlobalRecording();
          }
        });

        document.getElementById('save-notepad').addEventListener('click', function() {
          const noteText = document.getElementById('dictation-notepad-text').value;
          if (noteText.trim() !== '') {
            // Add note to timeline
            const timelineHtml = `
              <div class="ml-10 relative pt-3 pb-6">
                <div class="absolute -left-10 mt-1.5 rounded-full w-5 h-5 bg-purple-500 text-center">
                  <span class="text-white text-xs">üìù</span>
                </div>
                <time class="text-xs text-gray-500 mb-1 block">Today, ${new Date().toLocaleTimeString()}</time>
                <h3 class="text-base font-medium">Dictation Note</h3>
                <p class="mt-1 text-sm">${noteText}</p>
              </div>
            `;
            document.getElementById('timeline-list').insertAdjacentHTML('afterbegin', timelineHtml);
            document.getElementById('dictation-notepad').remove();
            alert('Note saved to timeline!');
          }
        });

        document.getElementById('clear-notepad').addEventListener('click', function() {
          document.getElementById('dictation-notepad-text').value = '';
        });

        if (recognition) {
          try {
            recognition.start();
          } catch (e) {
            console.error('Speech recognition error:', e);
          }
        }

        navigator.mediaDevices.getUserMedia({ audio: true })
          .then(stream => {
            mediaRecorder = new MediaRecorder(stream);
            mediaRecorder.start();

            mediaRecorder.addEventListener('dataavailable', event => {
              audioChunks.push(event.data);
            });
          })
          .catch(error => {
            console.error('Error accessing microphone:', error);
            document.getElementById('dictation-result').textContent = 'Error: ' + error.message;
          });
      }

      function stopGlobalRecording() {
        isGlobalRecording = false;
        document.getElementById('global-record-btn').classList.remove('hidden');
        document.getElementById('global-stop-record').classList.add('hidden');
        document.getElementById('recording-wave').classList.add('hidden');
        document.getElementById('dictation-status').classList.add('hidden');
        document.getElementById('dictation-controls').classList.add('hidden');
        document.getElementById('dictation-hint').classList.remove('hidden');

        // Keep the notepad open - let the user close it manually

        if (recognition) {
          recognition.stop();
        }

        if (mediaRecorder && mediaRecorder.state !== 'inactive') {
          mediaRecorder.stop();
        }
      }

      function processDictation(text) {
        // Add to agent messages to simulate AI processing
        addAgentMessage('You', text);

        // More advanced keyword-based routing of dictation with AI-driven categorization
        setTimeout(() => {
          let response;
          let tabToActivate = null;
          let actionToTake = null;

          // Check for analytics-related content
          if (text.toLowerCase().includes('analytics') ||
              text.toLowerCase().includes('performance') ||
              text.toLowerCase().includes('stats') ||
              text.toLowerCase().includes('metrics') ||
              text.toLowerCase().includes('report')) {
            response = "I've analyzed your request about analytics and am adding this information to your analytics dashboard.";
            tabToActivate = "analytics";
            actionToTake = "analytics";
          }
          // Check for campaign-related content
          else if (text.toLowerCase().includes('campaign') ||
                   text.toLowerCase().includes('email') ||
                   text.toLowerCase().includes('message') ||
                   text.toLowerCase().includes('outreach') ||
                   text.toLowerCase().includes('send')) {
            response = "I'm processing your campaign request. Would you like me to draft a campaign based on this information?";
            tabToActivate = "campaigns";
            actionToTake = "campaign";

            // Pre-populate campaign text if it seems like content for a campaign
            if (text.length > 50) {
              document.getElementById('campaign-body').value = text;
            }
          }
          // Check for visit-related content
          else if (text.toLowerCase().includes('visit') ||
                   text.toLowerCase().includes('meeting') ||
                   text.toLowerCase().includes('visited') ||
                   text.toLowerCase().includes('met with')) {
            response = "I'll log this visit information for you. Can you confirm which business you visited?";
            tabToActivate = "visits";
            actionToTake = "visit";

            // Try to extract business name and contact from the dictation
            const businesses = musicStores.map(store => store.name.toLowerCase());
            for (const business of businesses) {
              if (text.toLowerCase().includes(business)) {
                // Find the select element and set its value to this business
                const businessSelect = document.getElementById('visit-business');
                for (let i = 0; i < businessSelect.options.length; i++) {
                  if (businessSelect.options[i].text.toLowerCase().includes(business)) {
                    businessSelect.selectedIndex = i;
                    break;
                  }
                }

                // Extract possible contact name (look for "met with" or similar phrases)
                const contactMatches = text.match(/(?:met with|spoke to|talked to|spoke with|met|contact(?:ed)?)\s+(\w+)/i);
                if (contactMatches && contactMatches[1]) {
                  document.getElementById('visit-notes').value = text;
                  document.getElementById('visit-contact').value = contactMatches[1];
                } else {
                  document.getElementById('visit-notes').value = text;
                }
                break;
              }
            }
          }
          // Check for map/location related content
          else if (text.toLowerCase().includes('map') ||
                   text.toLowerCase().includes('location') ||
                   text.toLowerCase().includes('nearby') ||
                   text.toLowerCase().includes('find') ||
                   text.toLowerCase().includes('where')) {
            response = "I'm showing your location on the map and nearby leads within your area.";
            tabToActivate = "map";
            actionToTake = "map";
          }
          // Check for record/lead related content
          else if (text.toLowerCase().includes('record') ||
                   text.toLowerCase().includes('lead') ||
                   text.toLowerCase().includes('contact') ||
                   text.toLowerCase().includes('business') ||
                   text.toLowerCase().includes('store')) {
            response = "I'm searching the CRM records based on your request.";
            tabToActivate = "records";
            actionToTake = "record";

            // If there's a search term, populate it
            const potentialSearchTerms = text.split(' ').filter(word => word.length > 3);
            if (potentialSearchTerms.length > 0) {
              document.getElementById('records-search').value = potentialSearchTerms.join(' ');
              // Trigger the search
              const event = new Event('input', { bubbles: true });
              document.getElementById('records-search').dispatchEvent(event);
            }
          }
          // Timeline or general notes
          else {
            response = "I've saved this information to your timeline. Would you like me to categorize it or connect it to a specific business?";
            tabToActivate = "timeline";
            actionToTake = "timeline";

            // Add note to timeline
            const timelineHtml = `
              <div class="ml-10 relative pt-3 pb-6">
                <div class="absolute -left-10 mt-1.5 rounded-full w-5 h-5 bg-purple-500 text-center">
                  <span class="text-white text-xs">üìù</span>
                </div>
                <time class="text-xs text-gray-500 mb-1 block">Today, ${new Date().toLocaleTimeString()}</time>
                <h3 class="text-base font-medium">Voice Note</h3>
                <p class="mt-1 text-sm">${text}</p>
              </div>
            `;

            document.getElementById('timeline-list').insertAdjacentHTML('afterbegin', timelineHtml);
          }

          addAgentMessage('Agent Lee', response);

          // Auto-navigate if we detected a tab to activate
          if (tabToActivate) {
            document.querySelector(`[data-tab="${tabToActivate}"]`).click();
          }

          // Add to agent panel for processing indication
          if (actionToTake) {
            setTimeout(() => {
              addAgentMessage('Agent Lee', `I've processed your voice note and categorized it as a ${actionToTake} action. Anything else you'd like me to do with this information?`);
            }, 2000);
          }
        }, 1000);
      }

      // Ensure document.addEventListener('DOMContentLoaded'... closure is properly ended
      });

      // Move this event listener outside the DOMContentLoaded to fix button functionality
      document.addEventListener('DOMContentLoaded', function() {
        const stopRecordingBtn = document.getElementById('stop-recording');
        if (stopRecordingBtn) {
          stopRecordingBtn.addEventListener('click', function() {
            this.classList.add('hidden');
            const startRecordingBtn = document.getElementById('start-recording');
            if (startRecordingBtn) {
              startRecordingBtn.classList.remove('hidden');
              startRecordingBtn.classList.remove('recording-wave');
            }

            const recordingStatus = document.getElementById('recording-status');
            if (recordingStatus) {
              recordingStatus.textContent = 'Recording stopped';
              recordingStatus.classList.remove('text-red-500');
            }

            if (window.mediaRecorder && window.mediaRecorder.state !== 'inactive') {
              window.mediaRecorder.stop();
            }
          });
        } else {
          console.error('Stop recording button not found');
        }
      });

      // Save Visit Button
      document.getElementById('save-visit-btn').addEventListener('click', function() {
        saveVisit();
      });

      // Agent Panel
      document.getElementById('collapse-agent').addEventListener('click', function() {
        const agentPanel = document.getElementById('agent-panel');
        const content = document.getElementById('agent-content');

        if (content.style.display === 'none') {
          content.style.display = 'block';
          agentPanel.classList.remove('minimized');
          this.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>`;
        } else {
          content.style.display = 'none';
          agentPanel.classList.add('minimized');
          this.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
          </svg>`;
        }
      });

      // Agent Tools panel toggle
      document.getElementById('agent-tools').addEventListener('click', function() {
        const toolsPanel = document.getElementById('agent-tools-panel');
        toolsPanel.classList.toggle('hidden');
      });

      // Add task from Agent Lee interface
      document.getElementById('add-todo-btn').addEventListener('click', function() {
        document.querySelector('[data-tab="todos"]').click();
        setTimeout(() => {
          document.getElementById('task-title').focus();
        }, 100);
      });

      document.getElementById('agent-send').addEventListener('click', function() {
        const input = document.getElementById('agent-input');
        const message = input.value.trim();

        if (message !== '') {
          addAgentMessage('You', message);

          // Show typing indicator
          const messagesContainer = document.getElementById('agent-messages');
          const typingIndicator = document.createElement('div');
          typingIndicator.id = 'typing-indicator';
          typingIndicator.className = 'mb-2 agent-message';
          typingIndicator.innerHTML = `
            <div class="font-medium text-blue-600 flex items-center">
              <span class="text-sm mr-1">üß†</span> Agent Lee <span class="text-gray-400 text-xs ml-auto">Typing...</span>
            </div>
            <div class="mt-1 pl-5">
              <div class="typing-animation">
                <span></span>
                <span></span>
                <span></span>
              </div>
            </div>
          `;
          messagesContainer.appendChild(typingIndicator);
          messagesContainer.scrollTop = messagesContainer.scrollHeight;

          // Try to use Gemini API if available
          try {
            // Get API key from environment variables
            const apiKey = "AIzaSyBNLrJhOMz6idD05pzfn5lhA-TAw-mAZCU"; // Replace with actual key loading mechanism

            // Call Gemini API
            fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=' + apiKey, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                contents: [{
                  parts: [{
                    text: `You are Agent Lee, an AI assistant for a music store CRM system.
                    Respond to the following user message in a helpful, friendly way: "${message}"
                    Keep your response concise and focused on helping with CRM tasks like finding stores,
                    creating campaigns, scheduling meetings, or managing tasks.`
                  }]
                }]
              })
            })
            .then(response => response.json())
            .then(data => {
              // Remove typing indicator
              const typingIndicator = document.getElementById('typing-indicator');
              if (typingIndicator) {
                typingIndicator.remove();
              }

              // Get the response text
              let responseText = "I'm sorry, I couldn't process that request. How else can I help you?";

              if (data && data.candidates && data.candidates[0] && data.candidates[0].content) {
                responseText = data.candidates[0].content.parts[0].text;
              }

              // Add the response to the chat
              addAgentMessage('Agent Lee', responseText);
            })
            .catch(error => {
              console.error('Error calling Gemini API:', error);

              // Remove typing indicator
              const typingIndicator = document.getElementById('typing-indicator');
              if (typingIndicator) {
                typingIndicator.remove();
              }

              // Fallback to simple responses
              let response = "I'm here to help with your outreach. You could ask me about nearby leads, who to follow up with, or campaign performance.";

              // Simple keyword-based responses as fallback
              if (message.toLowerCase().includes('hello') || message.toLowerCase().includes('hi')) {
                response = "Hello! I'm Agent Lee, your AI assistant. How can I help you today?";
              } else if (message.toLowerCase().includes('help')) {
                response = "I can help you with:<br>- Finding nearby music stores<br>- Creating campaigns<br>- Scheduling meetings<br>- Managing tasks<br>- Analyzing your data<br>Just ask me what you need!";
              } else if (message.toLowerCase().includes('store') || message.toLowerCase().includes('shop')) {
                response = "I can help you find music stores in your area. Would you like me to show you stores within 25 miles of your location?";
              } else if (message.toLowerCase().includes('next') && message.toLowerCase().includes('stop')) {
                response = "Based on your location, I recommend visiting Rushmor Records next. It's 0.5 miles away and they haven't been contacted in 2 months.";
              } else if (message.toLowerCase().includes('follow up')) {
                response = "You should follow up with Dave's Guitar Shop. Your last contact was 10 days ago and they seemed interested in your new releases.";
              } else if (message.toLowerCase().includes('campaign')) {
                response = "Your last campaign 'Wisconsin Studio Outreach' had a 72% open rate, which is 5% better than industry average. 7 recipients have replied so far.";
              }

              addAgentMessage('Agent Lee', response);
            });
          } catch (error) {
            console.error('Error in Agent Lee processing:', error);

            // Remove typing indicator
            const typingIndicator = document.getElementById('typing-indicator');
            if (typingIndicator) {
              typingIndicator.remove();
            }

            // Fallback response
            addAgentMessage('Agent Lee', "I'm here to help with your outreach. How can I assist you today?");
          }

          input.value = '';
        }
      });

      document.getElementById('agent-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          document.getElementById('agent-send').click();
        }
      });

      // Campaign Composer
      document.querySelectorAll('.tag-filter').forEach(button => {
        button.addEventListener('click', function() {
          this.classList.toggle('bg-blue-500');
          this.classList.toggle('text-white');
          this.classList.toggle('bg-gray-200');
          this.classList.toggle('text-gray-700');

          updateRecipientCount();
        });
      });

      document.getElementById('state-select').addEventListener('change', function() {
        updateRecipientCount();
      });

      // Configure preview signature button
      document.getElementById('preview-signature-btn').addEventListener('click', function() {
        const signaturePreview = document.getElementById('signature-preview');
        if (signaturePreview.classList.contains('hidden')) {
          signaturePreview.classList.remove('hidden');
          this.textContent = 'Hide signature';
        } else {
          signaturePreview.classList.add('hidden');
          this.textContent = 'Preview signature';
        }
      });

      // Email Templates
      const emailTemplates = {
        'custom': {
          subject: '',
          body: ''
        },
        'store-email': {
          subject: 'üé∂ Your Store Can Help Set Artists Free',
          body: `Your store is more than shelves and sales. It's a safe space for creators. A launchpad for dreams. We're building something that gives them the next step.

üí° Introducing LEEWAY‚Ñ¢ by Rapid Web Develop LLC

- 100% Ownership. No subscriptions. No middlemen.
- Sell music, merch, livestream ‚Äî even offline.
- Includes Agent Lee: a built-in voice assistant that helps them grow.

This is more than a website. It's a freedom document ‚Äî and it belongs to them.

üè™ How You Can Help

We're asking you to place one flyer or poster in your space. That's it. We'll send everything:

‚úÖ Custom flyer or poster
‚úÖ QR code to demo the platform
‚úÖ Local artist support, no pressure sales

Be part of the movement. Empower artists. Change the game.

Reply "Yes" and we'll deliver today.

Thank you for all you do.`
        },
        'community-ally': {
          subject: 'Supporting Artists in Your Community üé∂ ‚Äî Can We Partner?',
          body: `Hi [Store Owner/Manager Name],

I'm Agent Lee, founder of RapidWebDevelop LLC, and I'm reaching out because your store is a vital part of the creative ecosystem in [City Name].

We've created a powerful new platform ‚Äî the LEEWAY‚Ñ¢ Artist System ‚Äî designed to give musicians 100% control over their careers. One file. One platform. Offline-ready. AI-powered. And it's already helping local artists take full ownership of their music, merch, and fan base.

We'd love to place a small flyer/poster in your store to help spread the word.

üñ•Ô∏è View Platform Deck
üìû (414) 626-9992
üñºÔ∏è Custom flyers and posters provided ‚Äî all we need is your permission.

Let's empower the local music community together. Thank you for considering it.

Warmly,`
        },
        'boost-network': {
          subject: "Let's Help Local Artists Win ‚Äî Free Platform + Store Partnership",
          body: `Hello [Store Name] Team,

I'm launching a local-first, artist-owned web platform that gives musicians everything they need ‚Äî sales tools, fan engagement, tour management, and real revenue ‚Äî with no middlemen taking a cut.

Your store is a go-to destination for music creators. I'd love to provide you with a free flyer/poster to help inform the artists you serve about this opportunity.

No sales pitch. Just real tools and local empowerment. We offer:

‚úÖ 100% ownership
‚úÖ No monthly fees
‚úÖ Local support and onboarding
‚úÖ AI assistants to guide artists at every step

If you'd be open to placing a flyer in your space, I'll hand-deliver or email it to you immediately.

Thanks for supporting the future of independent music!

Best,`
        },
        'quick-direct': {
          subject: 'Quick Question from Agent Lee (Artist Support)',
          body: `Hi [Name],

Would you be open to placing a free flyer in your shop to help spread awareness about a powerful new web platform made for artists, by artists?

It's one file. One-time payment. No subscriptions. 100% ownership ‚Äî music, merch, fans, ads, and all.

I'll provide the flyer and a link for more info. No pressure, just trying to help creators win.

Let me know ‚Äî and thanks either way.`
        }
      };

      // Handle template selection
      // Template preview modal
      function showTemplatePreview(templateType) {
        const templateData = emailTemplates[templateType];
        if (!templateData) return;

        // Create modal if it doesn't exist
        let previewModal = document.getElementById('template-preview-modal');
        if (!previewModal) {
          previewModal = document.createElement('div');
          previewModal.id = 'template-preview-modal';
          previewModal.className = 'fixed inset-0 bg-gray-800 bg-opacity-60 z-50 flex items-center justify-center';
          previewModal.innerHTML = `
            <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-2xl">
              <div class="flex justify-between items-center mb-4">
                <h3 id="preview-template-title" class="text-lg font-medium">Template Preview</h3>
                <button id="close-template-preview" class="text-gray-500 hover:text-gray-700">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              <div class="mb-3">
                <label class="block text-sm text-gray-700">Subject</label>
                <div id="preview-template-subject" class="p-2 border border-gray-200 rounded-md bg-gray-50"></div>
              </div>
              <div>
                <label class="block text-sm text-gray-700">Body</label>
                <div id="preview-template-body" class="p-2 border border-gray-200 rounded-md bg-gray-50 max-h-80 overflow-y-auto whitespace-pre-wrap"></div>
              </div>
              <div class="mt-4 flex justify-end">
                <button id="use-template-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">Use Template</button>
              </div>
            </div>
          `;
          document.body.appendChild(previewModal);

          // Add event listeners
          document.getElementById('close-template-preview').addEventListener('click', function() {
            document.getElementById('template-preview-modal').remove();
          });

          document.getElementById('use-template-btn').addEventListener('click', function() {
            document.getElementById('campaign-subject').value = templateData.subject;
            document.getElementById('campaign-body').value = templateData.body;
            document.getElementById('template-preview-modal').remove();

            // Highlight the selected template
            document.querySelectorAll('.template-option').forEach(el => {
              el.classList.remove('bg-blue-50', 'border-blue-300');
            });

            document.querySelector(`.template-option[data-template="${templateType}"]`).classList.add('bg-blue-50', 'border-blue-300');
          });
        }

        // Populate preview with template data
        document.getElementById('preview-template-title').textContent = 'Template: ' + document.querySelector(`.template-option[data-template="${templateType}"] .font-medium`).textContent;
        document.getElementById('preview-template-subject').textContent = templateData.subject;
        document.getElementById('preview-template-body').textContent = templateData.body;
      }

      // Handle template option click
      document.querySelectorAll('.template-option').forEach(template => {
        template.addEventListener('click', function() {
          const templateType = this.dataset.template;

          // Use the new function to show preview in the inline preview area
          const templateData = emailTemplates[templateType];
          if (templateData) {
            const templatePreview = document.getElementById('template-preview');
            const templateContent = document.getElementById('template-preview-content');
            templateContent.textContent = templateData.body;
            templatePreview.classList.remove('hidden');

            // Setup Use Template button
            document.getElementById('use-template-btn').onclick = function() {
              document.getElementById('campaign-subject').value = templateData.subject;
              document.getElementById('campaign-body').value = templateData.body;
            };
          } else {
            // Fallback to the modal preview if needed
            showTemplatePreview(templateType);
          }
        });
      });

      // Show/hide video meeting options
      document.querySelectorAll('.video-meeting-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
          const videoOptions = document.getElementById('video-options');
          if (document.getElementById('teams-meeting-checkbox').checked || document.getElementById('zoom-meeting-checkbox').checked) {
            videoOptions.classList.remove('hidden');

            // Generate mock meeting link based on selected platform
            let meetingLink = '';
            if (document.getElementById('teams-meeting-checkbox').checked) {
              meetingLink = 'https://teams.microsoft.com/l/meetup-join/19%3ameeting_ABC123...';
            } else if (document.getElementById('zoom-meeting-checkbox').checked) {
              meetingLink = 'https://zoom.us/j/1234567890?pwd=abc123';
            }
            document.getElementById('meeting-link').value = meetingLink;
          } else {
            videoOptions.classList.add('hidden');
          }
        });
      });

      // Copy meeting link
      document.getElementById('copy-link-btn').addEventListener('click', function() {
        const meetingLink = document.getElementById('meeting-link');
        meetingLink.select();
        document.execCommand('copy');

        // Show copy feedback
        const originalText = this.innerHTML;
        this.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>';

        setTimeout(() => {
          this.innerHTML = originalText;
        }, 2000);
      });

      // Handle video upload and preview functionality
      let selectedVideo = null;
      const videoOptions = [
        {
          name: 'LEEWAY Artist Platform Demo',
          url: 'https://www.youtube.com/embed/RW48S30Zt_w',
          thumbnailUrl: 'https://i.ytimg.com/vi/RW48S30Zt_w/mqdefault.jpg',
          description: 'Overview of the LEEWAY platform features'
        },
        {
          name: 'How Artists Can Use LEEWAY',
          url: 'https://www.youtube.com/embed/OnUZ40idgfU',
          thumbnailUrl: 'https://i.ytimg.com/vi/OnUZ40idgfU/mqdefault.jpg',
          description: 'Step-by-step guide for artists'
        }
      ];

      document.getElementById('upload-video-btn').addEventListener('click', function() {
        document.getElementById('video-file-input').click();
      });

      document.getElementById('video-file-input').addEventListener('change', function(e) {
        if (e.target.files.length > 0) {
          selectedVideo = e.target.files[0];
          showVideoPreview(selectedVideo.name, URL.createObjectURL(selectedVideo));
        }
      });

      document.getElementById('select-demo-video-btn').addEventListener('click', function() {
        // Show video selection modal instead of immediately selecting
        showVideoSelectionModal();
      });

      // Function to show the video selection modal
      function showVideoSelectionModal() {
        document.getElementById('video-selection-modal').classList.remove('hidden');
      }

      // Function to handle template previews
      function setupTemplatePreviewButtons() {
        document.querySelectorAll('.template-option').forEach(template => {
          template.addEventListener('click', function() {
            const templateType = this.dataset.template;
            const templateData = emailTemplates[templateType];
            if (!templateData) return;

            // Show preview for template
            const templatePreview = document.getElementById('template-preview');
            const templateContent = document.getElementById('template-preview-content');
            templateContent.textContent = templateData.body;
            templatePreview.classList.remove('hidden');

            // Setup Use Template button
            document.getElementById('use-template-btn').onclick = function() {
              document.getElementById('campaign-subject').value = templateData.subject;
              document.getElementById('campaign-body').value = templateData.body;
              // Optional: hide preview after using
              // templatePreview.classList.add('hidden');
            };

            // Update visual selection
            document.querySelectorAll('.template-option').forEach(t => {
              t.classList.remove('bg-blue-50', 'border-blue-300');
              t.classList.add('border-gray-200');
            });

            this.classList.remove('border-gray-200');
            this.classList.add('bg-blue-50', 'border-blue-300');
          });
        });
      }

      // Close video selection modal
      document.getElementById('close-video-modal').addEventListener('click', function() {
        document.getElementById('video-selection-modal').classList.add('hidden');
      });

      // Handle video selection
      document.querySelectorAll('.video-option').forEach(option => {
        option.addEventListener('click', function() {
          const index = parseInt(this.dataset.index);
          const selectedVideoData = videoOptions[index];

          selectedVideo = {
            name: selectedVideoData.name,
            url: selectedVideoData.url,
            isYouTube: true
          };

          showVideoPreview(selectedVideo.name, selectedVideo.url);
          document.getElementById('video-selection-modal').classList.add('hidden');
        });
      });

      document.getElementById('preview-video-btn').addEventListener('click', function() {
        const videoPlayerContainer = document.getElementById('video-player-container');
        const videoPlayer = document.getElementById('video-player');

        if (videoPlayerContainer.classList.contains('hidden')) {
          videoPlayerContainer.classList.remove('hidden');
          this.textContent = 'Hide Preview';

          // Set appropriate source for YouTube or local video
          if (selectedVideo.isYouTube) {
            videoPlayer.src = selectedVideo.url;
          } else {
            videoPlayer.src = selectedVideo.url;
            videoPlayer.play();
          }
        } else {
          videoPlayerContainer.classList.add('hidden');
          this.textContent = 'Preview';

          // Stop video playback
          videoPlayer.src = '';
        }
      });

      document.getElementById('remove-video-btn').addEventListener('click', function() {
        selectedVideo = null;
        document.getElementById('video-preview-container').classList.add('hidden');
        document.getElementById('video-player-container').classList.add('hidden');
        document.getElementById('video-file-input').value = '';
        document.getElementById('video-player').src = '';
      });

      function showVideoPreview(name, url) {
        document.getElementById('video-name').textContent = name;
        document.getElementById('video-player').src = url;
        document.getElementById('video-preview-container').classList.remove('hidden');
      }

      document.getElementById('send-campaign-btn').addEventListener('click', function() {
        const subject = document.getElementById('campaign-subject').value;
        const body = document.getElementById('campaign-body').value;

        if (subject && body) {
          // Append signature to body
          const fullBody = body + emailSignatureHTML;

          // Create message about video attachment if present
          let attachmentMessage = '';
          if (selectedVideo) {
            attachmentMessage = `\n\n[Video attachment: ${selectedVideo.name}]`;
          }

          alert('Campaign sent successfully!' + (selectedVideo ? ' Video attached.' : ''));

          // Add to past campaigns
          const campaignHtml = `
            <div class="bg-white rounded-md shadow p-4 hover:shadow-md transition">
              <div class="flex justify-between items-start">
                <div>
                  <h4 class="font-medium">${subject}</h4>
                  <p class="text-sm text-gray-600">Sent ${new Date().toLocaleDateString()} ‚Ä¢ ${document.getElementById('recipient-count').textContent} recipients</p>
                  ${selectedVideo ? `<p class="text-xs text-blue-500 mt-1"><svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 inline-block mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" /></svg> Video attached</p>` : ''}
                </div>
                <div class="text-right">
                  <span class="inline-block px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Sent</span>
                </div>
              </div>
              <div class="mt-3 flex space-x-2">
                <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">View Details</button>
                <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">Duplicate</button>
                <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">Follow Up</button>
              </div>
            </div>
          `;

          document.getElementById('past-campaigns').insertAdjacentHTML('afterbegin', campaignHtml);

          // Add to timeline with new addToTimeline function
          addToTimeline({
            type: 'campaign',
            title: `Sent Campaign "${subject}"`,
            description: `Sent to ${document.getElementById('recipient-count').textContent} recipients.`,
            date: 'today',
            time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
            subtype: 'Email Campaign',
            autoLogged: true,
            buttons: [
              {
                text: 'View Analytics',
                color: 'blue',
                icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" /></svg>',
                action: 'document.querySelector(\'[data-tab="analytics"]\').click();'
              },
              {
                text: 'Send Follow-up',
                color: 'green',
                icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" /></svg>',
                action: 'createFollowUpCampaign(\'' + subject + '\')'
              }
            ]
          });

          // Clear inputs
          document.getElementById('campaign-subject').value = '';
          document.getElementById('campaign-body').value = '';

          // Clear video
          if (selectedVideo) {
            document.getElementById('remove-video-btn').click();
          }
        } else {
          alert('Please fill in both subject and message body');
        }
      });

      // Initialize Records Tab
      populateRecordsTab();

      // Initialize Visits Tab
      populateVisitsTab();

      // Initialize Phone Integration
      initializePhoneSystem();

      // Functions that manage data and UI

      function initDatabase() {
        // Import all the record store data provided by the user
        // This includes the full list from Minnesota, Florida, Indiana, Illinois, Michigan, Tennessee
        const userProvidedStores = [
      // This array contains all store data from the user
      {
        "store_name": "Baraboo Music LLC",
        "address": "129 3rd St",
        "city": "Baraboo",
        "state": "WI",
        "zip_code": "53913",
        "phone": "(608) 355-0207",
        "website": "baraboomusic.com",
        "email": "info@baraboomusic.com",
        "source": "WI_LATEST",
        "tags": ["Instrument Shops"],
        "lat": 43.4716,
        "lng": -89.7430
      },
      {
        "store_name": "Lincoln Music House",
        "address": "3379 S 13th St",
        "city": "Milwaukee",
        "state": "WI",
        "zip_code": "53215",
        "phone": "(414) 647-9608",
        "website": "lincolnmusichouse.com",
        "email": "info@lincolnmusichouse.com",
        "source": "WI_LATEST",
        "tags": ["Instrument Shops"],
        "lat": 42.9887,
        "lng": -87.9293
      },
      {
        "store_name": "Uncle Bob's Music Center",
        "address": "5080 S 108th St",
        "city": "Greenfield",
        "state": "WI",
        "zip_code": "53228",
        "phone": "(414) 529-8910",
        "website": "unclebobsmusic.com",
        "email": "info@unclebobsmusic.com",
        "source": "WI_LATEST",
        "tags": ["Instrument Shops"],
        "lat": 42.9538,
        "lng": -88.0486
      },
      {
        "store_name": "Outpost Music",
        "address": "1330 S Commercial St",
        "city": "Neenah",
        "state": "WI",
        "zip_code": "54956",
        "phone": "(920) 722-9400",
        "website": "outpostmusic.com",
        "email": "info@outpostmusic.com",
        "source": "WI_LATEST",
        "tags": ["Instrument Shops"],
        "lat": 44.1585,
        "lng": -88.4628
      },
      {
        "store_name": "Rushmor Records",
        "address": "2635 S Kinnickinnic Ave",
        "city": "Milwaukee",
        "state": "WI",
        "zip_code": "53207",
        "phone": "(414) 481-4890",
        "website": "rushmor.com",
        "email": "rushmorrecords@gmail.com",
        "source": "WI_LATEST",
        "tags": ["Record Stores"],
        "lat": 43.0001,
        "lng": -87.8833
      },
      {
        "store_name": "Dave's Guitar Shop",
        "address": "914 S 5th St",
        "city": "Milwaukee",
        "state": "WI",
        "zip_code": "53204",
        "phone": "(414) 763-2120",
        "website": "davesguitar.com/milwaukee",
        "email": "info@davesguitar.com",
        "source": "WI_LATEST",
        "tags": ["Instrument Shops"],
        "lat": 43.0234,
        "lng": -87.9144
      },
      {
        "store_name": "Reckless Records",
        "address": "929 W Belmont Ave",
        "city": "Chicago",
        "state": "IL",
        "zip_code": "60657",
        "phone": "(773) 404-5080",
        "website": "reckless.com",
        "email": "orders@reckless.com",
        "source": "IL_B1",
        "tags": ["Record Stores"],
        "lat": 41.9399,
        "lng": -87.6533
      },
      {
        "store_name": "Electric Fetus",
        "address": "2001 4th Ave S",
        "city": "Minneapolis",
        "state": "MN",
        "zip_code": "55404",
        "phone": "(612) 870-9300",
        "website": "electricfetus.com",
        "email": "info@electricfetus.com",
        "source": "MN_B2_MPLS_4th",
        "tags": ["Record Stores"],
        "lat": 44.9633,
        "lng": -93.2760
      },
      {
        "store_name": "Park Ave CDs",
        "address": "2916 Corrine Dr",
        "city": "Orlando",
        "state": "FL",
        "zip_code": "32803",
        "phone": "(407) 447-7275",
        "website": "parkavecds.com",
        "email": "info@parkavecds.com",
        "source": "FL_LATEST",
        "tags": ["Record Stores"],
        "lat": 28.5723,
        "lng": -81.3651
      },
      {
        "store_name": "Indy CD & Vinyl",
        "address": "806 Broad Ripple Ave",
        "city": "Indianapolis",
        "state": "IN",
        "zip_code": "46220",
        "phone": "(317) 259-1012",
        "website": "indycdandvinyl.com",
        "email": "info@indyvinyl.com",
        "source": "IN_LATEST",
        "tags": ["Record Stores"],
        "lat": 39.8713,
        "lng": -86.1419
      },
      {
        "store_name": "Third Man Records",
        "address": "441 W Canfield St",
        "city": "Detroit",
        "state": "MI",
        "zip_code": "48201",
        "phone": "(313) 209-5205",
        "website": "thirdmanrecords.com",
        "email": "info@thirdmanrecords.com",
        "source": "MI_LATEST",
        "tags": ["Record Stores"],
        "lat": 42.3510,
        "lng": -83.0681
      },
      {
        "store_name": "Grimey's New & Preloved",
        "address": "1060 E Trinity Ln",
        "city": "Nashville",
        "state": "TN",
        "zip_code": "37216",
        "phone": "(615) 226-3811",
        "website": "grimeys.com",
        "email": "info@grimeys.com",
        "source": "TN_LATEST",
        "tags": ["Record Stores"],
        "lat": 36.2090,
        "lng": -86.7534
      }
        ];

        // Process the user-provided data to make it compatible with our system
        const processedStores = [...musicStores]; // Start with existing stores

        // Add all the user-provided stores
        userProvidedStores.forEach(store => {
          // Convert store_name to name for compatibility with our system
          const processedStore = {
            name: store.store_name,
            address: store.address,
            city: store.city,
            state: store.state,
            zip: store.zip_code,
            phone: store.phone,
            website: store.website,
            email: store.email,
            tags: store.tags || ["Record Stores"],
            lat: store.lat || (Math.random() * 10) + 35, // Generate random coordinates if missing
            lng: store.lng || (Math.random() * 20) - 95,
            visited: false
          };

          // Add to processed stores if not a duplicate
          if (!processedStores.some(s => s.name === processedStore.name && s.address === processedStore.address)) {
            processedStores.push(processedStore);
          }
        });

        // Save all the stores to IndexedDB
        idbKeyval.set('stores', processedStores, dbPromise)
          .then(() => {
            console.log('Store database initialized with', processedStores.length, 'records');
          })
          .catch(err => {
            console.error('Failed to initialize store database:', err);
          });

        // Initialize visit history if empty
        idbKeyval.get('visits', dbPromise).then(data => {
          if (!data || data.length === 0) {
            // Initialize with our preset data
            idbKeyval.set('visits', visitHistory, dbPromise);
          }
        });
      }

      function displayStores(userLat, userLng, distance = 50) {
        console.log("Displaying stores within", distance, "miles of", userLat, userLng);

        // Make sure Google Maps is initialized
        if (!window.googleMap || !google || !google.maps) {
          console.error("Google Maps not initialized yet");
          // Try again after a short delay
          setTimeout(() => displayStores(userLat, userLng, distance), 500);
          return;
        }

        // Clear existing markers for Google Maps implementation
        if (window.storeMarkers && window.storeMarkers.length) {
          window.storeMarkers.forEach(marker => marker.setMap(null));
        }
        window.storeMarkers = [];

        // Create bounds object to fit all markers
        const bounds = new google.maps.LatLngBounds();

        // Add store markers
        musicStores.forEach(store => {
          // Skip stores without coordinates
          if (!store.lat || !store.lng) {
            console.warn("Store missing coordinates:", store.name);
            return;
          }

          // Calculate distance
          const storeDistance = calculateDistance(userLat, userLng, store.lat, store.lng);

          // Filter by distance
          if (storeDistance <= distance) {
            // Create a store marker using Google Maps API
            try {
              const storeMarker = new google.maps.Marker({
                position: { lat: store.lat, lng: store.lng },
                map: window.googleMap,
                title: store.name,
                icon: {
                  url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" fill="#ef4444"/><text x="12" y="16" text-anchor="middle" fill="white" font-size="12px">üéµ</text></svg>'),
                  scaledSize: new google.maps.Size(24, 24)
                },
                animation: google.maps.Animation.DROP
              });

              // Create info window with store details
              const infoContent = `
                <div class="p-3">
                  <h3 class="font-bold text-lg">${store.name}</h3>
                  <p class="mb-1">${store.address}, ${store.city}, ${store.state}</p>
                  <p class="mb-2">${store.phone}</p>
                  <div class="mt-2 flex justify-between">
                    <a href="tel:${store.phone}" class="text-blue-500 hover:underline text-sm">Call</a>
                    <a href="#" class="text-green-500 hover:underline text-sm"
                       onclick="document.querySelector('[data-tab=visits]').click(); prepopulateVisit('${store.name}'); return false;">
                      Log Visit
                    </a>
                    ${store.website ?
                      `<a href="http://${store.website}" target="_blank" class="text-blue-500 hover:underline text-sm">Website</a>` :
                      ''}
                  </div>
                </div>
              `;

              const infoWindow = new google.maps.InfoWindow({
                content: infoContent,
                maxWidth: 300
              });

              // Add click listener to open info window
              storeMarker.addListener('click', function() {
                // Close any open info windows first
                if (window.currentInfoWindow) {
                  window.currentInfoWindow.close();
                }
                infoWindow.open(window.googleMap, storeMarker);
                window.currentInfoWindow = infoWindow;
              });

              // Extend bounds to include this marker
              bounds.extend(storeMarker.getPosition());

              // Store the marker reference for later cleanup
              window.storeMarkers = window.storeMarkers || [];
              window.storeMarkers.push(storeMarker);
            } catch (err) {
              console.error("Error creating marker for store:", store.name, err);
            }
          }
        });

        // Fit map to bounds if we have markers
        if (window.storeMarkers && window.storeMarkers.length > 0) {
          // Add user location to bounds
          bounds.extend(new google.maps.LatLng(userLat, userLng));

          // Fit the map to the bounds
          window.googleMap.fitBounds(bounds);

          // Don't zoom in too far
          google.maps.event.addListenerOnce(window.googleMap, 'bounds_changed', function() {
            if (window.googleMap.getZoom() > 15) {
              window.googleMap.setZoom(15);
            }
          });

          console.log("Displayed", window.storeMarkers.length, "store markers on map");
        } else {
          // If no markers, just center on user location
          window.googleMap.setCenter({ lat: userLat, lng: userLng });
          window.googleMap.setZoom(10);
          console.log("No stores found within", distance, "miles");
        }
      }

      function populateNearbyList(userLat, userLng, distance = 5) {
        console.log("Populating nearby list with stores within", distance, "miles of", userLat, userLng);

        const nearbyListElement = document.getElementById('nearby-list');
        if (!nearbyListElement) {
          console.error("Nearby list element not found");
          return;
        }

        nearbyListElement.innerHTML = ''; // Clear the list

        // Add loading indicator
        nearbyListElement.innerHTML = '<p class="text-center py-4 text-gray-500">Loading nearby stores...</p>';

        // Calculate the distance to each store
        const nearbyStores = musicStores.map(store => {
          if (!store.lat || !store.lng) return { ...store, distance: Infinity };

          const storeDistance = calculateDistance(userLat, userLng, store.lat, store.lng);
          return { ...store, distance: storeDistance };
        }).filter(store => store.distance <= distance)
          .sort((a, b) => a.distance - b.distance);

        // Clear loading indicator
        nearbyListElement.innerHTML = '';

        if (nearbyStores.length === 0) {
          nearbyListElement.innerHTML = '<p class="text-center py-4 text-gray-500">No stores found within this distance.</p>';
          return;
        }

        console.log(`Found ${nearbyStores.length} stores within ${distance} miles`);

        // Add each store to the list
        nearbyStores.forEach(store => {
          nearbyListElement.insertAdjacentHTML('beforeend', `
            <div class="bg-white p-3 rounded-md shadow hover:shadow-md transition cursor-pointer mb-3"
                 onclick="window.googleMap.setCenter({lat: ${store.lat}, lng: ${store.lng}}); window.googleMap.setZoom(15);">
              <div class="flex justify-between items-start">
                <div>
                  <h3 class="font-medium">${store.name}</h3>
                  <p class="text-sm text-gray-600">${store.city}, ${store.state}</p>
                  <p class="text-xs text-gray-500">${store.distance.toFixed(1)} miles away</p>
                </div>
                <div>
                  <span class="inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">${store.tags ? store.tags[0] : 'Store'}</span>
                </div>
              </div>
              <div class="mt-2 flex justify-between">
                <a href="tel:${store.phone}" class="text-xs px-2 py-1 bg-gray-100 rounded-md text-gray-700 hover:bg-gray-200">
                  ${store.phone}
                </a>
                <button class="text-xs px-2 py-1 bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                       onclick="event.stopPropagation(); document.querySelector('[data-tab=visits]').click(); prepopulateVisit('${store.name}');">
                  Log Visit
                </button>
              </div>
            </div>
          `);
        });

        // Add a "View All on Map" button at the bottom
        nearbyListElement.insertAdjacentHTML('beforeend', `
          <div class="text-center mt-4">
            <button class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                   onclick="document.querySelector('[data-tab=map]').click();
                           setTimeout(() => {
                             if (window.googleMap) {
                               const bounds = new google.maps.LatLngBounds();
                               window.storeMarkers.forEach(marker => bounds.extend(marker.getPosition()));
                               window.googleMap.fitBounds(bounds);
                             }
                           }, 300);">
              View All on Map
            </button>
          </div>
        `);
      }

      function calculateDistance(lat1, lon1, lat2, lon2) {
        // Calculate the distance between two points using the Haversine formula
        const R = 3958.8; // Radius of the Earth in miles
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a =
          Math.sin(dLat/2) * Math.sin(dLat/2) +
          Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
          Math.sin(dLon/2) * Math.sin(dLon/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        const distance = R * c;
        return distance;
      }

      // Function to check if user is near any stores for auto check-in
      function checkProximityToStores(userLat, userLng) {
        const proximityThreshold = 0.2; // Miles - proximity to trigger auto check-in

        musicStores.forEach(store => {
          if (!store.lat || !store.lng) return;

          const distance = calculateDistance(userLat, userLng, store.lat, store.lng);

          // If user is very close to a store and it hasn't been auto-visited yet
          if (distance <= proximityThreshold && !store.autoVisited) {
            store.autoVisited = true; // Mark as auto-visited to prevent duplicate notifications

            // Update UI to show user has arrived at this location
            const notification = `
              <div class="bg-green-50 p-4 rounded-md border border-green-200 mb-4 animate-pulse">
                <div class="flex items-start">
                  <div class="flex-shrink-0 text-2xl mr-3">üìç</div>
                  <div>
                    <h3 class="font-medium text-green-700">Auto-Detected Visit</h3>
                    <p class="text-sm text-green-600 mt-1">You've arrived at ${store.name}. Would you like to log this visit?</p>
                    <div class="mt-3 flex space-x-3">
                      <button
                        class="text-xs px-3 py-1.5 bg-green-600 text-white rounded-md hover:bg-green-700"
                        onclick="document.querySelector('[data-tab=visits]').click(); prepopulateVisit('${store.name}');"
                      >
                        Log Visit
                      </button>
                      <button
                        class="text-xs px-3 py-1.5 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-100"
                        onclick="this.closest('.bg-green-50').remove()"
                      >
                        Dismiss
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            `;

            // Add notification to nearby list
            document.getElementById('nearby-list').insertAdjacentHTML('afterbegin', notification);

            // Add agent message
            addAgentMessage('Agent Lee', `I've detected you're at ${store.name}. I've marked this location as visited.`);

            // Add to timeline using the new centralized timeline function
            addToTimeline({
              type: 'auto',
              title: `Auto-Detected at ${store.name}`,
              description: `Your location was automatically detected at this business.`,
              date: 'today',
              time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
              location: `${store.address}, ${store.city}, ${store.state}`,
              subtype: 'GPS Detection',
              autoLogged: true,
              buttons: [
                {
                  text: 'Log Visit',
                  color: 'green',
                  icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" /></svg>',
                  action: `document.querySelector('[data-tab=visits]').click(); prepopulateVisit('${store.name}');`
                },
                {
                  text: 'View on Map',
                  color: 'blue',
                  icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>',
                  action: `document.querySelector('[data-tab="map"]').click(); setTimeout(() => window.googleMap.setCenter({ lat: ${store.lat}, lng: ${store.lng} }), 300);`
                }
              ]
            });
          }
        });
      }

      // Function to prepopulate visit form when auto-detected
      function prepopulateVisit(businessName) {
        const visitBusinessElement = document.getElementById('visit-business');
        for (let i = 0; i < visitBusinessElement.options.length; i++) {
          if (visitBusinessElement.options[i].text.includes(businessName)) {
            visitBusinessElement.selectedIndex = i;
            break;
          }
        }

        document.getElementById('visit-notes').value = `Automatically detected visit to ${businessName} on ${new Date().toLocaleString()}`;
      }

      function filterMapByState(state) {
        console.log("Filtering map by state:", state);

        // Make sure Google Maps is initialized
        if (!window.googleMap || !google || !google.maps) {
          console.error("Google Maps not initialized yet");
          // Try again after a short delay
          setTimeout(() => filterMapByState(state), 500);
          return;
        }

        // Clear existing markers for Google Maps implementation
        if (window.storeMarkers && window.storeMarkers.length) {
          window.storeMarkers.forEach(marker => marker.setMap(null));
        }
        window.storeMarkers = [];

        if (state === 'ALL') {
          displayStores(window.userLat || 43.0389, window.userLng || -87.9065);
          populateNearbyList(window.userLat || 43.0389, window.userLng || -87.9065, 50);
          return;
        }

        // Add filtered store markers
        const filteredStores = musicStores.filter(store => store.state === state);
        console.log(`Found ${filteredStores.length} stores in ${state}`);

        // Create bounds object to fit all markers
        const bounds = new google.maps.LatLngBounds();

        filteredStores.forEach(store => {
          if (!store.lat || !store.lng) {
            console.warn("Store missing coordinates:", store.name);
            return;
          }

          try {
            // Create a store marker
            const storeMarker = new google.maps.Marker({
              position: { lat: store.lat, lng: store.lng },
              map: window.googleMap,
              title: store.name,
              icon: {
                url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><circle cx="12" cy="12" r="10" fill="#ef4444"/><text x="12" y="16" text-anchor="middle" fill="white" font-size="12px">üéµ</text></svg>'),
                scaledSize: new google.maps.Size(24, 24)
              },
              animation: google.maps.Animation.DROP
            });

            // Create info window with store details
            const infoContent = `
              <div class="p-3">
                <h3 class="font-bold text-lg">${store.name}</h3>
                <p class="mb-1">${store.address}, ${store.city}, ${store.state}</p>
                <p class="mb-2">${store.phone}</p>
                <div class="mt-2 flex justify-between">
                  <a href="tel:${store.phone}" class="text-blue-500 hover:underline text-sm">Call</a>
                  <a href="#" class="text-green-500 hover:underline text-sm"
                     onclick="document.querySelector('[data-tab=visits]').click(); prepopulateVisit('${store.name}'); return false;">
                    Log Visit
                  </a>
                  ${store.website ?
                    `<a href="http://${store.website}" target="_blank" class="text-blue-500 hover:underline text-sm">Website</a>` :
                    ''}
                </div>
              </div>
            `;

            const infoWindow = new google.maps.InfoWindow({
              content: infoContent,
              maxWidth: 300
            });

            // Add click listener to open info window
            storeMarker.addListener('click', function() {
              // Close any open info windows first
              if (window.currentInfoWindow) {
                window.currentInfoWindow.close();
              }
              infoWindow.open(window.googleMap, storeMarker);
              window.currentInfoWindow = infoWindow;
            });

            // Add to bounds for centering
            bounds.extend(storeMarker.getPosition());

            // Store the marker reference
            window.storeMarkers.push(storeMarker);
          } catch (err) {
            console.error("Error creating marker for store:", store.name, err);
          }
        });

        // Center map on the state if we have stores
        if (filteredStores.length > 0) {
          window.googleMap.fitBounds(bounds);
          // Add some padding
          google.maps.event.addListenerOnce(window.googleMap, 'bounds_changed', function() {
            if (window.googleMap.getZoom() > 12) {
              window.googleMap.setZoom(12); // Don't zoom in too far
            }
          });
          console.log("Map centered on state:", state);
        } else {
          console.log("No stores found in state:", state);
          // If no stores found, show a message
          const nearbyListElement = document.getElementById('nearby-list');
          if (nearbyListElement) {
            nearbyListElement.innerHTML = `<p class="text-center py-4 text-gray-500">No stores found in ${state}.</p>`;
          }
          return;
        }

        // Update nearby list with filtered stores
        const nearbyListElement = document.getElementById('nearby-list');
        if (!nearbyListElement) {
          console.error("Nearby list element not found");
          return;
        }

        nearbyListElement.innerHTML = '';

        filteredStores.forEach(store => {
          nearbyListElement.insertAdjacentHTML('beforeend', `
            <div class="bg-white p-3 rounded-md shadow hover:shadow-md transition cursor-pointer"
                 onclick="window.googleMap.setCenter({lat: ${store.lat}, lng: ${store.lng}}); window.googleMap.setZoom(15);">
              <div class="flex justify-between items-start">
                <div>
                  <h3 class="font-medium">${store.name}</h3>
                  <p class="text-sm text-gray-600">${store.city}, ${store.state}</p>
                </div>
                <div>
                  <span class="inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">${store.tags ? store.tags[0] : 'Store'}</span>
                </div>
              </div>
              <div class="mt-2 flex justify-between">
                <a href="tel:${store.phone}" class="text-xs px-2 py-1 bg-gray-100 rounded-md text-gray-700 hover:bg-gray-200">
                  ${store.phone}
                </a>
                <button class="text-xs px-2 py-1 bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                       onclick="event.stopPropagation(); document.querySelector('[data-tab=visits]').click(); prepopulateVisit('${store.name}');">
                  Log Visit
                </button>
              </div>
            </div>
          `);
        });
      }

      function populateRecordsTab() {
        console.log("Populating Records Tab...");
        const recordsListElement = document.getElementById('records-list');
        if (!recordsListElement) {
          console.error("Records list element not found");
          return;
        }

        recordsListElement.innerHTML = ''; // Clear the list

        // Display loading indicator
        recordsListElement.innerHTML = `
          <div class="col-span-1 md:col-span-2 lg:col-span-3 animate-pulse">
            <div class="rounded bg-gray-200 h-32 mb-2"></div>
            <div class="rounded bg-gray-200 h-32 mb-2"></div>
            <div class="rounded bg-gray-200 h-32 mb-2"></div>
          </div>`;

        // Combine all available data sources
        const allStores = [...musicStores];

        // Add the finalLeads array data if it exists
        if (typeof finalLeads !== 'undefined' && Array.isArray(finalLeads)) {
          for (const store of finalLeads) {
            // Convert to standard format if needed
            const formattedStore = {
              name: store.store_name || store.name,
              address: store.address,
              city: store.city,
              state: store.state,
              zip: store.zip_code || store.zip,
              phone: store.phone,
              website: store.website,
              email: store.email,
              tags: store.tags || ["Record Stores"],
              lat: store.lat || (Math.random() * 10) + 40, // Generate random coordinates if missing
              lng: store.lng || (Math.random() * 20) - 90,
              visited: false
            };

            // Check if store is already in allStores
            const isDuplicate = allStores.some(s =>
              s.name === formattedStore.name &&
              s.address === formattedStore.address);

            if (!isDuplicate) {
              allStores.push(formattedStore);
            }
          }
        }

        // Direct rendering with combined data
        function renderRecords(stores) {
          if (!stores || stores.length === 0) {
            recordsListElement.innerHTML = '<p class="text-center py-4 text-gray-500">No records found.</p>';
            console.error("No stores to display");
            return;
          }

          console.log("Found", stores.length, "records to display");

          // Clear loading indicator
          recordsListElement.innerHTML = '';

          // Directly render all stores
          stores.forEach((store, index) => {
            const storeName = store.name || store.store_name || "Unknown Store";
            const storeAddress = store.address || "No address available";
            const storeCity = store.city || "Unknown";
            const storeState = store.state || "Unknown";
            const storeZip = store.zip || store.zip_code || "";
            const storePhone = store.phone || "N/A";
            const storeEmail = store.email || "No email available";
            const storeWebsite = store.website || "No website";
            const storeLat = store.lat || 0;
            const storeLng = store.lng || 0;

            recordsListElement.insertAdjacentHTML('beforeend', `
              <div class="bg-white p-4 rounded-md shadow hover:shadow-md transition" data-state="${storeState}">
                <div class="flex justify-between items-start">
                  <div>
                    <h3 class="font-medium">${storeName}</h3>
                    <p class="text-sm text-gray-600">${storeAddress}</p>
                    <p class="text-sm text-gray-600">${storeCity}, ${storeState} ${storeZip}</p>
                    <p class="text-sm">
                      <a href="tel:${storePhone.replace(/\D/g,'')}" class="text-blue-500 hover:underline">${storePhone}</a>
                    </p>
                    ${storeEmail !== "No email available" ?
                      `<p class="text-sm">
                         <a href="mailto:${storeEmail}" class="text-blue-500 hover:underline">${storeEmail}</a>
                       </p>` : ''}
                  </div>
                  <div class="text-right">
                    <span class="inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">${store.tags ? store.tags[0] : 'Record Store'}</span>
                    ${store.visited ?
                      `<span class="inline-block mt-1 px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Visited</span>` :
                      `<span class="inline-block mt-1 px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full">Unvisited</span>`}
                  </div>
                </div>
                <div class="mt-3 flex space-x-2">
                  <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 view-on-map-btn" data-index="${index}">
                    View on Map
                  </button>
                  <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 log-visit-btn"
                          onclick="document.querySelector('[data-tab=visits]').click(); prepopulateVisit('${storeName}');">
                    Log Visit
                  </button>
                  ${storeWebsite && storeWebsite !== "No website" ?
                    `<a href="${storeWebsite.includes('http') ? storeWebsite : 'http://' + storeWebsite}" target="_blank"
                        class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100">
                       Website
                     </a>` : ''}
                </div>
              </div>
            `);
          });

          // Add event listeners to the view-on-map buttons after all buttons have been created
          document.querySelectorAll('.view-on-map-btn').forEach(btn => {
            btn.addEventListener('click', function() {
              const index = parseInt(this.getAttribute('data-index'));
              document.querySelector('[data-tab="map"]').click();
              setTimeout(() => {
                const store = stores[index];
                if (store && store.lat && store.lng && window.googleMap) {
                  window.googleMap.setCenter({ lat: store.lat, lng: store.lng });
                  window.googleMap.setZoom(15);
                } else {
                  console.log("Can't view on map - coordinates unavailable or map not initialized");
                }
              }, 300);
            });
          });
        }

        // Try to get stores from IndexedDB first
        idbKeyval.get('stores', dbPromise).then(stores => {
          if (!stores || stores.length === 0) {
            console.warn("No stores found in IndexedDB, using default data");
            // Use the combined in-memory data as fallback
            renderRecords(allStores);
          } else {
            console.log("Found", stores.length, "records in IndexedDB");
            renderRecords(stores);
          }
        }).catch(err => {
          console.error("Error getting stores from IndexedDB:", err);
          console.warn("Falling back to direct rendering");
          // Use the combined in-memory data as fallback
          renderRecords(allStores);
        });
      }

      function populateVisitsTab() {
        const visitsListElement = document.getElementById('visits-list');
        visitsListElement.innerHTML = ''; // Clear the list

        // Populate the business select dropdown
        const visitBusinessElement = document.getElementById('visit-business');
        visitBusinessElement.innerHTML = '<option value="" disabled selected>Select a business...</option>';

        musicStores.forEach(store => {
          visitBusinessElement.insertAdjacentHTML('beforeend', `
            <option value="${store.name}">${store.name} (${store.city}, ${store.state})</option>
          `);
        });

        // Get the visits from IndexedDB
        idbKeyval.get('visits', dbPromise).then(visits => {
          if (!visits || visits.length === 0) {
            visitsListElement.innerHTML = '<p class="text-center py-4 text-gray-500">No visits recorded yet.</p>';
            return;
          }

          // Add each visit to the list
          visits.forEach(visit => {
            visitsListElement.insertAdjacentHTML('beforeend', `
              <div class="bg-white rounded-md shadow p-4">
                <div class="flex justify-between">
                  <div>
                    <h4 class="font-medium">${visit.business}</h4>
                    <p class="text-sm text-gray-600">${visit.date} ‚Ä¢ Met with ${visit.contactPerson || 'N/A'}</p>
                  </div>
                  <div>
                    <span class="inline-block px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">${visit.city}, ${visit.state}</span>
                  </div>
                </div>
                <p class="mt-2 text-sm">${visit.notes || 'No notes recorded.'}</p>
                ${visit.hasVoiceNote ? `
                <div class="mt-3">
                  <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                    </svg>
                    Play Voice Note
                  </button>
                </div>
                ` : ''}
              </div>
            `);
          });
        });
      }

      function filterRecordsByState(state) {
        const records = document.querySelectorAll('#records-list > div');

        if (state === 'ALL') {
          records.forEach(record => {
            record.style.display = 'block';
          });
          return;
        }

        records.forEach(record => {
          if (record.dataset.state === state) {
            record.style.display = 'block';
          } else {
            record.style.display = 'none';
          }
        });
      }

      function filterRecordsBySearch(query) {
        const records = document.querySelectorAll('#records-list > div');

        records.forEach(record => {
          const text = record.textContent.toLowerCase();
          if (text.includes(query)) {
            record.style.display = 'block';
          } else {
            record.style.display = 'none';
          }
        });
      }

      function filterRecordsByStatus(status) {
        const records = document.querySelectorAll('#records-list > div');

        if (status === 'all') {
          records.forEach(record => {
            record.style.display = 'block';
          });
          return;
        }

        records.forEach(record => {
          const isVisited = record.querySelector('.bg-green-100') !== null;

          if (status === 'visited' && isVisited) {
            record.style.display = 'block';
          } else if (status === 'unvisited' && !isVisited) {
            record.style.display = 'block';
          } else {
            record.style.display = 'none';
          }
        });
      }

      function addNewRecord() {
        const name = document.getElementById('new-business-name').value;
        const address = document.getElementById('new-business-address').value;
        const city = document.getElementById('new-business-city').value;
        const state = document.getElementById('new-business-state').value;
        const zip = document.getElementById('new-business-zip').value;
        const phone = document.getElementById('new-business-phone').value;
        const website = document.getElementById('new-business-website').value;
        const email = document.getElementById('new-business-email').value;

        const tags = [];
        document.querySelectorAll('#add-record-form input[type="checkbox"]:checked').forEach(checkbox => {
          tags.push(checkbox.value);
        });

        // Simple geocoding to get lat/lng (in a real app would use a geocoding service)
        let lat, lng;
        if (city === 'Milwaukee' && state === 'WI') {
          lat = 43.0389;
          lng = -87.9065;
        } else if (city === 'Chicago' && state === 'IL') {
          lat = 41.8781;
          lng = -87.6298;
        } else if (city === 'Minneapolis' && state === 'MN') {
          lat = 44.9778;
          lng = -93.2650;
        } else {
          // Random coordinates in the US
          lat = 39.8283 + (Math.random() - 0.5) * 10;
          lng = -98.5795 + (Math.random() - 0.5) * 20;
        }

        const newStore = {
          name,
          address,
          city,
          state,
          zip,
          phone,
          website,
          email,
          lat,
          lng,
          tags,
          visited: false
        };

        // Add to IndexedDB
        idbKeyval.get('stores', dbPromise).then(stores => {
          if (!stores) stores = [];

          stores.push(newStore);
          idbKeyval.set('stores', stores, dbPromise).then(() => {
            // Update the UI
            populateRecordsTab();

            // Add to map
            const storeIcon = L.divIcon({
              html: `<div class="bg-red-500 rounded-full w-6 h-6 flex items-center justify-center text-white text-xs">üéµ</div>`,
              className: 'custom-div-icon',
              iconSize: [24, 24],
              iconAnchor: [12, 12]
            });

            L.marker([lat, lng], {icon: storeIcon}).addTo(map)
              .bindPopup(`
                <div class="text-center">
                  <h3 class="font-bold">${name}</h3>
                  <p>${address}, ${city}, ${state}</p>
                  <p>${phone}</p>
                  <div class="mt-2">
                    <a href="#" class="text-blue-500 hover:underline text-sm">Log Visit</a>
                  </div>
                </div>
              `);

            // Add to musicStores array
            musicStores.push(newStore);
          });
        });

        // Reset the form
        document.getElementById('add-record-form').reset();

        // Add to timeline
        const timelineHtml = `
          <div class="ml-10 relative pt-3 pb-6">
            <div class="absolute -left-10 mt-1.5 rounded-full w-5 h-5 bg-yellow-500 text-center">
              <span class="text-white text-xs">üìù</span>
            </div>
            <time class="text-xs text-gray-500 mb-1 block">Today, ${new Date().toLocaleTimeString()}</time>
            <h3 class="text-base font-medium">Added ${name} to CRM</h3>
            <p class="mt-1 text-sm">${city}, ${state}</p>
          </div>
        `;

        document.getElementById('timeline-list').insertAdjacentHTML('afterbegin', timelineHtml);
      }

      function saveVisit() {
        const businessSelect = document.getElementById('visit-business');
        const business = businessSelect.value;
        const contactPerson = document.getElementById('visit-contact').value;
        const notes = document.getElementById('visit-notes').value;
        const audioPlayer = document.getElementById('audio-player');
        const hasVoiceNote = !document.getElementById('audio-player-container').classList.contains('hidden');

        if (!business) {
          alert('Please select a business');
          return;
        }

        // Find the store details
        const store = musicStores.find(s => s.name === business.split(' (')[0]);

        if (!store) {
          alert('Business not found');
          return;
        }

        // Format date
        const date = new Date().toLocaleDateString('en-US', {
          month: 'short',
          day: 'numeric',
          year: 'numeric'
        });

        const newVisit = {
          business: store.name,
          address: store.address,
          city: store.city,
          state: store.state,
          contactPerson,
          date,
          notes,
          hasVoiceNote,
          voiceNoteUrl: hasVoiceNote ? audioPlayer.src : null
        };

        // Add to IndexedDB
        idbKeyval.get('visits', dbPromise).then(visits => {
          if (!visits) visits = [];

          visits.unshift(newVisit);  // Add to the beginning
          idbKeyval.set('visits', visits, dbPromise).then(() => {
            // Update the UI
            populateVisitsTab();

            // Update the store as visited
            idbKeyval.get('stores', dbPromise).then(stores => {
              if (!stores) return;

              const storeIndex = stores.findIndex(s => s.name === store.name);

              if (storeIndex !== -1) {
                stores[storeIndex].visited = true;
                idbKeyval.set('stores', stores, dbPromise).then(() => {
                  populateRecordsTab();
                });
              }
            });

            // Update the musicStores array
            const storeIndex = musicStores.findIndex(s => s.name === store.name);

            if (storeIndex !== -1) {
              musicStores[storeIndex].visited = true;
            }

            // Add to timeline using the new centralized function
            addToTimeline({
              type: 'visit',
              title: `Visit to ${store.name}`,
              description: `Met with ${contactPerson || 'someone'}. ${notes || ''}`,
              date: 'today',
              time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
              location: `${store.address}, ${store.city}, ${store.state}`,
              audioUrl: hasVoiceNote ? audioPlayer.src : null,
              subtype: 'In-Person Visit',
              buttons: [
                {
                  text: 'Play Voice Note',
                  color: 'blue',
                  icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" /></svg>',
                  action: hasVoiceNote ? 'playVoiceNote()' : ''
                },
                {
                  text: 'Follow Up',
                  color: 'green',
                  icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" /></svg>',
                  action: `followUpWithStore('${store.name}')`
                },
                {
                  text: 'View on Map',
                  color: 'gray',
                  icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" /><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" /></svg>',
                  action: `document.querySelector('[data-tab="map"]').click(); setTimeout(() => window.googleMap.setCenter({ lat: ${store.lat}, lng: ${store.lng} }), 300);`
                }
              ]
            });

            // Reset the form
            businessSelect.selectedIndex = 0;
            document.getElementById('visit-contact').value = '';
            document.getElementById('visit-notes').value = '';
            document.getElementById('audio-player-container').classList.add('hidden');
            document.getElementById('recording-status').textContent = 'Ready to record';
          });
        });
      }

      function followUpWithStore(storeName) {
        // Open phone tab and prefill the store name for a call
        document.querySelector('[data-tab="phone"]').click();
        setTimeout(() => {
          const callInput = document.getElementById('call-input');
          if (callInput) {
            callInput.value = storeName;
          }
        }, 300);
      }

      function playVoiceNote() {
        // Future implementation for playing voice notes
        alert('Voice note playback functionality will be implemented here');
      }

      // Centralized timeline management functions
      function addToTimeline(entry) {
        // Parameters in entry object:
        // type: 'visit', 'call', 'campaign', 'note', 'agent', 'auto'
        // title: Main title/heading of the entry
        // time: Time of the event
        // description: Longer description text
        // date: Date string for grouping ('today', 'yesterday', or a date string)
        // subtype: Additional classification (e.g., 'incoming-call', 'outgoing-call')
        // location: Optional location data
        // audioUrl: Optional URL to audio recording
        // buttons: Array of action buttons to display
        // autoLogged: Boolean to indicate if this was automatically detected

        // Set defaults if not provided
        const type = entry.type || 'note';
        const date = entry.date || 'today';
        const time = entry.time || new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});

        // Define colors and icons based on type
        const typeConfig = {
          visit: { color: 'blue', icon: 'üìç', label: 'Visit' },
          call: { color: 'purple', icon: 'üìû', label: 'Call' },
          campaign: { color: 'green', icon: 'üì§', label: 'Campaign' },
          note: { color: 'yellow', icon: 'üìù', label: 'Note' },
          agent: { color: 'indigo', icon: 'üß†', label: 'Agent Lee' },
          auto: { color: 'red', icon: 'üîî', label: 'Auto-detected' }
        };

        const config = typeConfig[type];

        // Create subtype label
        let subtypeLabel = '';
        if (entry.subtype) {
          subtypeLabel = `<span class="px-2 py-0.5 rounded-full bg-${config.color}-100 text-${config.color}-800 text-xs">${entry.subtype}</span>`;
        }

        // Create auto-logged badge
        let autoLoggedBadge = '';
        if (entry.autoLogged) {
          autoLoggedBadge = `<span class="ml-2 text-xs bg-green-100 text-green-800 rounded-full px-2">Auto-logged</span>`;
        }

        // Create action buttons
        let buttonHtml = '';
        if (entry.buttons && entry.buttons.length > 0) {
          buttonHtml = `<div class="mt-3 flex flex-wrap gap-2">`;
          entry.buttons.forEach(button => {
            buttonHtml += `
              <button class="text-xs px-2 py-1 border border-${button.color || 'gray'}-300 text-${button.color || 'gray'}-600 rounded-md hover:bg-${button.color || 'gray'}-50 inline-flex items-center"
                      onclick="${button.action || ''}">
                ${button.icon || ''}
                ${button.text}
              </button>
            `;
          });
          buttonHtml += `</div>`;
        }

        // Create location info if provided
        let locationHtml = '';
        if (entry.location) {
          locationHtml = `
            <div class="mt-1 text-xs text-gray-500 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              ${entry.location}
            </div>
          `;
        }

        // Audio player if URL provided
        let audioHtml = '';
        if (entry.audioUrl) {
          audioHtml = `
            <div class="mt-2">
              <audio src="${entry.audioUrl}" controls class="w-full h-8"></audio>
            </div>
          `;
        }

        // Create the entry HTML
        const entryHtml = `
          <div class="timeline-entry ml-10 relative pt-3 pb-4 bg-white rounded-lg shadow-sm hover:shadow-md transition p-4 border-l-4 border-${config.color}-500" data-type="${type}" data-date="${date}">
            <div class="absolute -left-10 mt-1.5 rounded-full w-6 h-6 bg-${config.color}-500 text-center flex items-center justify-center">
              <span class="text-white text-sm">${config.icon}</span>
            </div>
            <div class="flex justify-between items-start">
              <time class="text-xs text-gray-500 mb-1 block">${time}</time>
              ${subtypeLabel}
            </div>
            <h3 class="text-base font-medium flex items-center">
              ${entry.title}
              ${autoLoggedBadge}
            </h3>
            <p class="mt-1 text-sm">${entry.description || ''}</p>
            ${locationHtml}
            ${audioHtml}
            ${buttonHtml}
          </div>
        `;

        // Find or create the date group
        let dateGroup = document.querySelector(`.date-group[data-date="${date}"]`);

        // If this is a new date, create the date group
        if (!dateGroup) {
          // Format date header display name
          let dateHeaderText;
          if (date === 'today') dateHeaderText = 'Today';
          else if (date === 'yesterday') dateHeaderText = 'Yesterday';
          else dateHeaderText = date; // Use the provided date string

          // Create the date group structure
          const dateGroupHtml = `
            <div class="date-group mb-6" data-date="${date}">
              <h3 class="text-sm font-bold pl-10 mb-2 text-gray-600 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                ${dateHeaderText}
              </h3>
              <div class="timeline-date-group space-y-4">
              </div>
            </div>
          `;

          // Add it at the right position (newest dates at top)
          const timelineContainer = document.getElementById('timeline-container');
          const existingGroups = timelineContainer.querySelectorAll('.date-group');

          if (date === 'today') {
            // Today should be first
            timelineContainer.insertAdjacentHTML('afterbegin', dateGroupHtml);
          } else if (date === 'yesterday' && existingGroups.length > 0) {
            // Yesterday should be after Today
            const todayGroup = document.querySelector('.date-group[data-date="today"]');
            if (todayGroup) {
              todayGroup.insertAdjacentHTML('afterend', dateGroupHtml);
            } else {
              timelineContainer.insertAdjacentHTML('afterbegin', dateGroupHtml);
            }
          } else {
            // Other dates at the end
            timelineContainer.insertAdjacentHTML('beforeend', dateGroupHtml);
          }

          // Get the newly created date group
          dateGroup = document.querySelector(`.date-group[data-date="${date}"]`);
        }

        // Add the entry to the appropriate date group
        const entriesContainer = dateGroup.querySelector('.timeline-date-group');
        entriesContainer.insertAdjacentHTML('afterbegin', entryHtml); // Add at the beginning of its date group

        // Return the created element
        return entriesContainer.firstChild;
      }

      // Setup the mini calendar and timeline filters
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize timeline filters
        document.querySelectorAll('.timeline-filter').forEach(filter => {
          filter.addEventListener('click', function() {
            // Toggle active state
            this.classList.toggle('bg-gray-100');
            this.classList.toggle('bg-' + this.dataset.type + '-100');

            const isActive = this.classList.contains('bg-' + this.dataset.type + '-100');
            const filterType = this.dataset.type;

            // Filter the timeline entries
            document.querySelectorAll('.timeline-entry').forEach(entry => {
              if (entry.dataset.type === filterType) {
                entry.style.display = isActive ? 'block' : 'none';
              }
            });
          });
        });

        // Mini calendar toggle
        document.getElementById('toggle-mini-calendar').addEventListener('click', function() {
          const calendar = document.getElementById('mini-calendar');
          calendar.classList.toggle('hidden');

          // Update calendar if being shown
          if (!calendar.classList.contains('hidden')) {
            updateCalendar();
          }
        });

        // Date range filters
        document.getElementById('timeline-today').addEventListener('click', function() {
          setActiveTimeRange(this);
          filterTimelineByDate('today');
        });

        document.getElementById('timeline-week').addEventListener('click', function() {
          setActiveTimeRange(this);
          filterTimelineByDate(['today', 'yesterday']); // In a real app would include all days of the current week
        });

        document.getElementById('timeline-month').addEventListener('click', function() {
          setActiveTimeRange(this);
          // Show all dates in the current month
          document.querySelectorAll('.date-group').forEach(group => {
            group.style.display = 'block';
          });
        });

        document.getElementById('timeline-all').addEventListener('click', function() {
          setActiveTimeRange(this);
          // Show all dates
          document.querySelectorAll('.date-group').forEach(group => {
            group.style.display = 'block';
          });
        });
      });

      function setActiveTimeRange(button) {
        // Remove active class from all range buttons
        document.querySelectorAll('#timeline-today, #timeline-week, #timeline-month, #timeline-all').forEach(btn => {
          btn.classList.remove('bg-blue-500', 'text-white');
          btn.classList.add('bg-gray-200', 'text-gray-700');
        });

        // Add active class to the clicked button
        button.classList.remove('bg-gray-200', 'text-gray-700');
        button.classList.add('bg-blue-500', 'text-white');
      }

      function filterTimelineByDate(visibleDates) {
        // Convert to array if string
        if (typeof visibleDates === 'string') visibleDates = [visibleDates];

        // Hide/show date groups based on the visible dates
        document.querySelectorAll('.date-group').forEach(group => {
          if (visibleDates.includes(group.dataset.date)) {
            group.style.display = 'block';
          } else {
            group.style.display = 'none';
          }
        });
      }

      function updateCalendar() {
        // This would implement a mini calendar with clickable dates
        // For now, just update the month/year display
        const now = new Date();
        document.getElementById('calendar-month-year').textContent =
          now.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });

        // In a full implementation, would generate the calendar days
        // and highlight days with events
      }

      // Agent Lee AI functionality
      function getAgentLeeResponse(userInput) {
        console.log("Processing user input:", userInput);

        // Show typing indicator
        showTypingIndicator();

        // Process the user input and generate a response
        setTimeout(() => {
          let response = "";

          // Simple keyword-based responses
          const input = userInput.toLowerCase();

          if (input.includes("hello") || input.includes("hi") || input.includes("hey")) {
            response = "Hello! How can I assist you today with your music store outreach?";
          }
          else if (input.includes("help") || input.includes("what can you do")) {
            response = "I can help you with:<br>‚Ä¢ Finding music stores in specific locations<br>‚Ä¢ Creating email campaigns<br>‚Ä¢ Scheduling visits<br>‚Ä¢ Managing your contacts<br>‚Ä¢ Tracking your outreach efforts";
          }
          else if (input.includes("map") || input.includes("location") || input.includes("where")) {
            response = "You can view all music stores on the map tab. We have over 50 stores in our database across Wisconsin, Minnesota, Illinois, Florida, Indiana, Michigan, and Tennessee.";
          }
          else if (input.includes("store") || input.includes("music shop") || input.includes("record store")) {
            response = "We have many music stores in our database. You can filter them by state and type (Instrument Shops or Record Stores) in the Records tab.";
          }
          else if (input.includes("email") || input.includes("campaign") || input.includes("message")) {
            response = "You can create email campaigns in the Campaigns tab. We have several templates available for different purposes like introductions, follow-ups, and event announcements.";
          }
          else if (input.includes("visit") || input.includes("appointment") || input.includes("schedule")) {
            response = "You can schedule and track store visits in the Visits tab. This helps you keep track of which stores you've visited and when.";
          }
          else if (input.includes("thank") || input.includes("thanks")) {
            response = "You're welcome! Let me know if you need anything else.";
          }
          else {
            // Default response for unrecognized inputs
            response = "I understand you're asking about " + userInput + ". While I'm still learning about music store outreach, I can help you navigate the CRM system, find stores, and manage your campaigns. Could you try rephrasing or ask about a specific feature?";
          }

          // Hide typing indicator and add the response
          hideTypingIndicator();
          addAgentMessage("Agent Lee", response);
        }, 1500); // Simulate thinking time
      }

      // Show typing indicator in the agent messages
      function showTypingIndicator() {
        const messagesContainer = document.getElementById('agent-messages');
        const typingIndicator = `
          <div id="typing-indicator" class="mb-2 agent-message">
            <div class="font-medium text-blue-600 flex items-center">
              <span class="text-sm mr-1">üß†</span> Agent Lee <span class="text-gray-400 text-xs ml-auto">Typing...</span>
            </div>
            <div class="mt-1 pl-5">
              <div class="typing-animation">
                <span></span>
                <span></span>
                <span></span>
              </div>
            </div>
          </div>
        `;
        messagesContainer.insertAdjacentHTML('beforeend', typingIndicator);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      // Hide typing indicator
      function hideTypingIndicator() {
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
          typingIndicator.remove();
        }
      }

      // Function to make Agent Lee speak using speech synthesis
      function speakAgentLeeMessage(message) {
        // Skip if speech synthesis is not available or no voice is selected
        if (!speechSynthesis || !agentLeeVoice) {
          console.warn("Speech synthesis not available or no voice selected");
          return;
        }

        // Clean up the message - remove HTML tags and convert entities
        const textToSpeak = message
          .replace(/<[^>]*>/g, '') // Remove HTML tags
          .replace(/&nbsp;/g, ' ')
          .replace(/&lt;/g, '<')
          .replace(/&gt;/g, '>')
          .replace(/&amp;/g, '&')
          .replace(/&quot;/g, '"')
          .replace(/&#39;/g, "'");

        // Create utterance
        const utterance = new SpeechSynthesisUtterance(textToSpeak);

        // Set voice and properties
        utterance.voice = agentLeeVoice;
        utterance.rate = 1.0;  // Normal speed
        utterance.pitch = 1.0; // Normal pitch
        utterance.volume = 1.0; // Full volume

        // Cancel any ongoing speech
        speechSynthesis.cancel();

        // Speak the message
        speechSynthesis.speak(utterance);
        console.log("Agent Lee is speaking:", textToSpeak);
      }

      // Add a message to the agent panel
      function addAgentMessage(sender, message) {
        const messagesContainer = document.getElementById('agent-messages');

        const messageHtml = `
          <div class="mb-2 agent-message">
            <div class="font-medium ${sender === 'Agent Lee' ? 'text-blue-600' : 'text-gray-700'} flex items-center">
              ${sender === 'Agent Lee' ? '<span class="text-sm mr-1">üß†</span>' : ''} ${sender} <span class="text-gray-400 text-xs ml-auto">Now</span>
            </div>
            <div class="mt-1 pl-5">
              ${message}
            </div>
          </div>
        `;

        messagesContainer.insertAdjacentHTML('beforeend', messageHtml);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;

        // If this is from Agent Lee, make it speak and add to timeline
        if (sender === 'Agent Lee') {
          // Make Agent Lee speak the message
          speakAgentLeeMessage(message);

          addToTimeline({
            type: 'agent',
            title: 'Agent Lee Message',
            description: message,
            date: 'today',
            autoLogged: true,
            subtype: 'AI Assistant',
            buttons: [
              {
                text: 'Ask Follow-up',
                color: 'indigo',
                icon: '<svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" /></svg>'
              }
            ]
          });
        }
      }

      function updateRecipientCount() {
        const selectedTags = [];
        document.querySelectorAll('.tag-filter.bg-blue-500').forEach(button => {
          selectedTags.push(button.dataset.tag);
        });

        const selectedState = document.getElementById('state-select').value;
        const selectedStore = document.getElementById('store-select') ? document.getElementById('store-select').value : null;

        let count = 0;
        let storesList = [];

        if (selectedStore && selectedStore !== 'ALL') {
          // If a specific store is selected, count is 1
          count = 1;
          // Update display with the selected store name
          const storeDisplay = document.getElementById('selected-store-display');
          if (storeDisplay) {
            storeDisplay.textContent = selectedStore;
            storeDisplay.classList.remove('hidden');
          }
        } else if (selectedTags.length === 0 && selectedState === 'ALL') {
          // If no filters selected, count all stores
          count = musicStores.length;
          storesList = [...musicStores];
        } else if (selectedTags.length === 0) {
          // If only state selected, count all stores in the selected state
          storesList = musicStores.filter(store => {
            return selectedState === 'ALL' || store.state === selectedState;
          });
          count = storesList.length;
        } else {
          // Count stores with the selected tags in the selected state
          storesList = musicStores.filter(store => {
            const matchesState = selectedState === 'ALL' || store.state === selectedState;
            const matchesTags = store.tags && selectedTags.some(tag => store.tags.includes(tag));
            return matchesState && matchesTags;
          });
          count = storesList.length;
        }

        // Update the recipient count
        document.getElementById('recipient-count').textContent = count;

        // Update the store dropdown if it exists
        const storeSelect = document.getElementById('store-select');
        if (storeSelect && storesList.length > 0) {
          // Clear existing options except the ALL option
          while (storeSelect.options.length > 1) {
            storeSelect.remove(1);
          }

          // Add filtered stores to dropdown
          storesList.forEach(store => {
            const option = document.createElement('option');
            option.value = store.name;
            option.text = `${store.name} (${store.city}, ${store.state})`;
            storeSelect.appendChild(option);
          });
        }
      }

      // Variables for geolocation
      window.userLat = null;
      window.userLng = null;

      // Initialize the map when the page loads
      if (typeof google !== 'undefined' && google.maps) {
        initializeMap();
      } else {
        console.log("Google Maps API not loaded yet, will initialize when API loads");
      }
  </script>

  <!-- Fix for broken JavaScript functionality -->
  <script>
    // Ensure the page is fully interactive
    document.addEventListener('DOMContentLoaded', function() {
      console.log("Initializing button handlers...");

      try {
        // Define the template preview function
        function setupTemplatePreviewButtons() {
          // Template preview buttons
          const templateButtons = document.querySelectorAll('.template-preview-btn');
          if (templateButtons.length > 0) {
            templateButtons.forEach(button => {
              button.addEventListener('click', function() {
                const templateId = this.getAttribute('data-template');
                const templateContent = document.getElementById(templateId);

                if (templateContent) {
                  // Get the template content
                  const templateHtml = templateContent.innerHTML;

                  // Set the campaign message content
                  const campaignMessageEditor = document.getElementById('campaign-message');
                  if (campaignMessageEditor) {
                    // Add the email signature to the template
                    campaignMessageEditor.innerHTML = templateHtml + emailSignatureHTML;
                  }

                  // Update both template name displays
                  const templateNameDisplay = document.getElementById('selected-template-name');
                  const templateDisplaySecondary = document.getElementById('selected-template-display');

                  const templateName = templateId.replace('-template', '').replace(/-/g, ' ');

                  if (templateNameDisplay) {
                    templateNameDisplay.textContent = templateName;
                  }

                  if (templateDisplaySecondary) {
                    templateDisplaySecondary.textContent = templateName;
                  }

                  // Close the template selection modal if it exists
                  const templateModal = document.getElementById('template-selection-modal');
                  if (templateModal) {
                    templateModal.classList.add('hidden');
                  }
                }
              });
            });
          }
        }

        // Call the function to set up template buttons
        setupTemplatePreviewButtons();

        // Fix campaign tags
        document.querySelectorAll('.tag-filter').forEach(button => {
          button.addEventListener('click', function() {
            this.classList.toggle('bg-blue-500');
            this.classList.toggle('text-white');
            this.classList.toggle('bg-gray-200');
            this.classList.toggle('text-gray-700');

            if (typeof updateRecipientCount === 'function') {
              updateRecipientCount();
            }
          });
        });

        // Initialize the store selection dropdown
        const storeSelect = document.getElementById('store-select');
        if (storeSelect) {
          storeSelect.addEventListener('change', function() {
            if (typeof updateRecipientCount === 'function') {
              updateRecipientCount();
            }
          });
        }

        // Fix for upload video button
        const uploadVideoBtn = document.getElementById('upload-video-btn');
        if (uploadVideoBtn) {
          uploadVideoBtn.addEventListener('click', function() {
            document.getElementById('video-file-input').click();
          });
        }

        // Fix for video selection
        const selectDemoVideoBtn = document.getElementById('select-demo-video-btn');
        if (selectDemoVideoBtn) {
          selectDemoVideoBtn.addEventListener('click', function() {
            document.getElementById('video-selection-modal').classList.remove('hidden');
          });
        }

        // Initialize agent panel listeners if needed
        if (typeof initializeAgentPanelListeners === 'function') {
          initializeAgentPanelListeners();
        }
      } catch (err) {
        console.error("Error initializing handlers:", err);
      }

      // Initialize copy signature button
      const copySignatureBtn = document.getElementById('copy-signature-btn');
      if (copySignatureBtn) {
        copySignatureBtn.addEventListener('click', function() {
          const signatureElement = document.getElementById('email-signature');
          if (signatureElement) {
            // Create a temporary textarea element to copy the HTML content
            const textarea = document.createElement('textarea');
            textarea.value = emailSignatureHTML;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);

            // Show feedback to the user
            alert('Email signature copied to clipboard!');
          }
        });
      }

      // Initialize template modal
      const openTemplateModalBtn = document.getElementById('open-template-modal');
      const closeTemplateModalBtn = document.getElementById('close-template-modal');
      const templateSelectionModal = document.getElementById('template-selection-modal');

      if (openTemplateModalBtn && templateSelectionModal) {
        openTemplateModalBtn.addEventListener('click', function() {
          templateSelectionModal.classList.remove('hidden');
        });
      }

      // Second template modal button
      const openTemplateModalBtn2 = document.getElementById('open-template-modal-2');
      if (openTemplateModalBtn2 && templateSelectionModal) {
        openTemplateModalBtn2.addEventListener('click', function() {
          templateSelectionModal.classList.remove('hidden');
        });
      }

      if (closeTemplateModalBtn && templateSelectionModal) {
        closeTemplateModalBtn.addEventListener('click', function() {
          templateSelectionModal.classList.add('hidden');
        });
      }

      // Reinitialize tab switching
      document.querySelectorAll('[data-tab]').forEach(button => {
        button.addEventListener('click', function() {
          console.log("Tab clicked:", this.dataset.tab);
          const targetTab = this.dataset.tab;

          // Hide all tabs
          document.querySelectorAll('section[id$="-tab"]').forEach(tab => {
            tab.classList.add('hidden');
          });

          // Show target tab
          const tabElement = document.getElementById(`${targetTab}-tab`);
          if (tabElement) {
            tabElement.classList.remove('hidden');
          }

          // Update tab styling
          document.querySelectorAll('[data-tab]').forEach(btn => {
            btn.classList.remove('tab-active');
            btn.classList.add('text-gray-500');
          });

          this.classList.add('tab-active');
          this.classList.remove('text-gray-500');
        });
      });

      // Reinitialize recording buttons
      const globalRecordBtn = document.getElementById('global-record-btn');
      if (globalRecordBtn) {
        globalRecordBtn.addEventListener('click', function() {
          console.log("Start global recording clicked");
          this.classList.add('hidden');
          document.getElementById('global-stop-record').classList.remove('hidden');
          document.getElementById('recording-wave').classList.remove('hidden');
          document.getElementById('dictation-status').classList.remove('hidden');
          document.getElementById('dictation-controls').classList.remove('hidden');
          document.getElementById('dictation-hint').classList.add('hidden');
        });
      }

      const globalStopRecordBtn = document.getElementById('global-stop-record');
      if (globalStopRecordBtn) {
        globalStopRecordBtn.addEventListener('click', function() {
          console.log("Stop global recording clicked");
          this.classList.add('hidden');
          document.getElementById('global-record-btn').classList.remove('hidden');
          document.getElementById('recording-wave').classList.add('hidden');
          document.getElementById('dictation-status').classList.add('hidden');
          document.getElementById('dictation-controls').classList.add('hidden');
          document.getElementById('dictation-hint').classList.remove('hidden');
        });
      }

      // Ensure the map is correctly initialized and visible
      setTimeout(function() {
        const mapTab = document.querySelector('[data-tab="map"]');
        if (mapTab) {
          mapTab.click();
        }

        // Try to reinitialize the map if it failed
        if (typeof window.googleMap === 'undefined' || !window.googleMap) {
          try {
            // Make sure the map container has proper dimensions
            const mapContainer = document.getElementById('map');
            if (mapContainer) {
              mapContainer.style.height = '500px';
              mapContainer.style.width = '100%';
            }

            // Initialize Google Maps
            window.googleMap = new google.maps.Map(document.getElementById('map'), {
              center: { lat: 43.0389, lng: -87.9065 },
              zoom: 10,
              mapTypeControl: true,
              streetViewControl: true,
              fullscreenControl: true
            });

            // Assign to global map variable for compatibility
            map = window.googleMap;

            // Force a resize event to ensure map renders correctly
            window.dispatchEvent(new Event('resize'));
            google.maps.event.trigger(window.googleMap, 'resize');

            console.log("Google Maps initialized successfully");
          } catch (err) {
            console.error("Failed to initialize Google Maps:", err);
          }
        } else {
          // If map exists but might be hidden, trigger resize
          google.maps.event.trigger(window.googleMap, 'resize');
        }
      }, 1000);
    });

    // Phone System Functions
    function initializePhoneSystem() {
      console.log("Initializing phone integration system...");

      // Setup phone-related event listeners
      document.getElementById('call-primary').addEventListener('click', function() {
        initiatePhoneCall('4143676211');
      });

      document.getElementById('call-secondary').addEventListener('click', function() {
        initiatePhoneCall('4146269992');
      });

      document.getElementById('make-call-btn').addEventListener('click', function() {
        const inputElement = document.getElementById('call-input');
        const number = inputElement.value.replace(/\D/g, ''); // Strip non-numeric characters

        if (number.length >= 10) {
          initiatePhoneCall(number);
        } else {
          alert('Please enter a valid phone number');
        }
      });

      // Add functionality for call history buttons
      document.querySelectorAll('#call-history button').forEach(button => {
        if (button.textContent.includes('Play Recording')) {
          button.addEventListener('click', function() {
            // In a real implementation, this would play the actual recording
            alert('Playing call recording... (simulation)');
          });
        } else if (button.textContent.includes('Call Back')) {
          button.addEventListener('click', function() {
            const parentElement = button.closest('.bg-gray-50');
            const phoneNumberText = parentElement.querySelector('.text-xs.text-gray-500, .text-xs.text-red-500, .text-xs.text-blue-600').textContent;
            const phoneNumber = phoneNumberText.match(/\((\d{3})\) (\d{3})-(\d{4})/) || [];

            if (phoneNumber.length >= 4) {
              const number = phoneNumber[1] + phoneNumber[2] + phoneNumber[3];
              initiatePhoneCall(number);
            }
          });
        }
      });

      // Setup configuration buttons
      document.getElementById('configure-primary').addEventListener('click', function() {
        showConfigurationModal('(414) 367-6211');
      });

      document.getElementById('configure-secondary').addEventListener('click', function() {
        showConfigurationModal('(414) 626-9992');
      });
    }

    function initiatePhoneCall(phoneNumber) {
      // In a real implementation, this would connect to a telephony API like Twilio
      console.log(`Initiating call to ${phoneNumber}`);

      // Simulate a call being made
      const callFrom = document.querySelector('input[name="call-from"]:checked').value;
      const fromNumber = callFrom === 'primary' ? '(414) 367-6211' : '(414) 626-9992';

      // Create a call dialog
      const callDialog = document.createElement('div');
      callDialog.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
      callDialog.innerHTML = `
        <div class="bg-white rounded-lg shadow-lg p-5 w-80">
          <div class="text-center mb-4">
            <div class="text-xl font-medium">Calling...</div>
            <div class="text-sm text-gray-600 mt-1">${formatPhoneNumber(phoneNumber)}</div>
            <div class="text-xs text-gray-500 mt-1">from ${fromNumber}</div>
          </div>

          <div class="flex justify-center mb-4">
            <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center animate-pulse">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
              </svg>
            </div>
          </div>

          <div class="text-center text-sm text-gray-600 mb-4" id="call-timer">00:00</div>

          <div class="flex justify-center">
            <button id="end-call-btn" class="px-4 py-2 bg-red-500 text-white rounded-full hover:bg-red-600">
              End Call
            </button>
          </div>
        </div>
      `;

      document.body.appendChild(callDialog);

      // Add timer functionality
      let seconds = 0;
      const timerElement = callDialog.querySelector('#call-timer');
      const timerInterval = setInterval(() => {
        seconds++;
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        timerElement.textContent = `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
      }, 1000);

      // Add end call functionality
      callDialog.querySelector('#end-call-btn').addEventListener('click', function() {
        clearInterval(timerInterval);
        callDialog.remove();

        // Log the call to history
        logCallToHistory({
          direction: 'outgoing',
          number: phoneNumber,
          duration: seconds,
          from: fromNumber,
          recordingUrl: '#',
          timestamp: new Date()
        });

        if (document.getElementById('auto-transcribe').checked) {
          setTimeout(() => {
            // Simulate transcription being complete
            console.log("Call transcription complete");
            alert('Call completed and logged to history.');
          }, 1500);
        }
      });

      // Auto-end call after random interval (for demo only)
      setTimeout(() => {
        if (document.body.contains(callDialog)) {
          callDialog.querySelector('#end-call-btn').click();
        }
      }, Math.random() * 5000 + 5000);
    }

    function showConfigurationModal(phoneNumber) {
      const configModal = document.createElement('div');
      configModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
      configModal.innerHTML = `
        <div class="bg-white rounded-lg shadow-lg p-5 w-full max-w-md">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium">Configure ${phoneNumber}</h3>
            <button id="close-config-modal" class="text-gray-500 hover:text-gray-700">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Voicemail Greeting</label>
            <select class="w-full p-2 border border-gray-300 rounded-md">
              <option>Default Greeting</option>
              <option>After Hours Greeting</option>
              <option>Busy Greeting</option>
              <option>Custom Greeting</option>
            </select>
          </div>

          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Call Forwarding</label>
            <div class="flex items-center">
              <input type="checkbox" id="enable-forwarding" class="mr-2">
              <label for="enable-forwarding" class="text-sm">Enable call forwarding when unavailable</label>
            </div>
            <input type="tel" placeholder="Forward to number..." class="w-full p-2 border border-gray-300 rounded-md mt-2">
          </div>

          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Business Hours</label>
            <div class="grid grid-cols-2 gap-2">
              <div>
                <label class="block text-xs text-gray-600 mb-1">Opens</label>
                <input type="time" value="09:00" class="w-full p-2 border border-gray-300 rounded-md">
              </div>
              <div>
                <label class="block text-xs text-gray-600 mb-1">Closes</label>
                <input type="time" value="17:00" class="w-full p-2 border border-gray-300 rounded-md">
              </div>
            </div>
          </div>

          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-1">Call Handling</label>
            <div class="space-y-2">
              <label class="inline-flex items-center">
                <input type="checkbox" class="form-checkbox" checked>
                <span class="ml-2 text-sm">Screen calls from unknown numbers</span>
              </label>
              <label class="inline-flex items-center">
                <input type="checkbox" class="form-checkbox" checked>
                <span class="ml-2 text-sm">Automatically log all calls</span>
              </label>
              <label class="inline-flex items-center">
                <input type="checkbox" class="form-checkbox">
                <span class="ml-2 text-sm">Block calls outside business hours</span>
              </label>
            </div>
          </div>

          <div class="flex justify-end">
            <button id="save-config-btn" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
              Save Configuration
            </button>
          </div>
        </div>
      `;

      document.body.appendChild(configModal);

      // Add event listeners
      configModal.querySelector('#close-config-modal').addEventListener('click', function() {
        configModal.remove();
      });

      configModal.querySelector('#save-config-btn').addEventListener('click', function() {
        // In a real implementation, this would save the configuration
        configModal.remove();
        alert(`Configuration for ${phoneNumber} saved successfully!`);
      });
    }

    function formatPhoneNumber(phoneNumber) {
      if (phoneNumber.length === 10) {
        return `(${phoneNumber.substring(0, 3)}) ${phoneNumber.substring(3, 6)}-${phoneNumber.substring(6, 10)}`;
      }
      return phoneNumber;
    }

    function logCallToHistory(callData) {
      const callHistory = document.getElementById('call-history');
      if (!callHistory) return;

      const formattedDate = new Date().toLocaleString('en-US', {
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });

      const mins = Math.floor(callData.duration / 60);
      const secs = callData.duration % 60;
      const formattedDuration = `${mins}:${secs.toString().padStart(2, '0')}`;

      const contactName = "New Contact";
      const businessName = "";

      // Create new call history entry
      const callEntryHtml = `
        <div class="bg-gray-50 p-3 rounded-md border border-gray-200">
          <div class="flex justify-between items-start">
            <div>
              <div class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ${callData.direction === 'outgoing' ? 'text-blue-500' : 'text-green-500'} mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                <span class="font-medium">${contactName}</span>
                <span class="ml-2 text-xs text-blue-600">${formatPhoneNumber(callData.number)}</span>
              </div>
              <div class="text-xs text-gray-500 mt-1">${callData.direction === 'outgoing' ? 'Outgoing' : 'Incoming'} call via ${callData.from}</div>
            </div>
            <div class="text-right">
              <div class="text-xs">Today, ${formattedDate}</div>
              <div class="text-xs bg-blue-100 text-blue-800 rounded-full px-2 py-0.5 mt-1">${formattedDuration}</div>
            </div>
          </div>
          <div class="flex gap-2 mt-2">
            <button class="text-xs px-2 py-1 bg-blue-100 text-blue-600 rounded hover:bg-blue-200 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
              </svg>
              Play Recording
            </button>
            <button class="text-xs px-2 py-1 bg-yellow-100 text-yellow-600 rounded hover:bg-yellow-200 flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              Add Notes
            </button>
          </div>
        </div>
      `;

      // Add entry to the top of the list
      callHistory.insertAdjacentHTML('afterbegin', callEntryHtml);

      // Also add to timeline
      const timelineList = document.getElementById('timeline-list');
      if (timelineList) {
        const timelineEntryHtml = `
          <div class="ml-10 relative pt-3 pb-6">
            <div class="absolute -left-10 mt-1.5 rounded-full w-5 h-5 bg-purple-500 text-center">
              <span class="text-white text-xs">üìû</span>
            </div>
            <time class="text-xs text-gray-500 mb-1 block">Today, ${formattedDate}</time>
            <h3 class="text-base font-medium">${callData.direction === 'outgoing' ? 'Outgoing' : 'Incoming'} call: ${formatPhoneNumber(callData.number)}</h3>
            <p class="mt-1 text-sm">Call duration: ${formattedDuration}</p>
            <div class="mt-2">
              <button class="text-xs px-2 py-1 border border-gray-300 rounded-md hover:bg-gray-100 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                </svg>
                Play Recording
              </button>
            </div>
          </div>
        `;

        timelineList.insertAdjacentHTML('afterbegin', timelineEntryHtml);
      }
    }
  </script>

  <!-- Email Templates (Hidden Storage) -->
  <div id="email-templates" class="hidden">
    <!-- Community Ally Template -->
    <div id="community-ally-template">
      <h3>üìß Email Template 1: Community Ally Appeal</h3>
      <p><strong>Subject:</strong> Supporting Artists in Your Community üé∂ ‚Äî Can We Partner?</p>
      <p>Hi [Store Owner/Manager Name],</p>
      <p>I'm Agent Lee, founder of RapidWebDevelop LLC, and I'm reaching out because your store is a vital part of the creative ecosystem in [City Name].</p>
      <p>We've created a powerful new platform ‚Äî the <strong>LEEWAY‚Ñ¢ Artist System</strong> ‚Äî designed to give musicians 100% control over their careers. One file. One platform. Offline-ready. AI-powered. And it's already helping local artists take full ownership of their music, merch, and fan base.</p>
      <p>We'd love to place a small flyer/poster in your store to help spread the word.</p>
      <ul>
        <li>üñ•Ô∏è View Platform Deck</li>
        <li>üìû (414) 626-9992</li>
        <li>üñºÔ∏è Custom flyers and posters provided ‚Äî all we need is your permission.</li>
      </ul>
      <p>Let's empower the local music community together. Thank you for considering it.</p>
      <p>Warmly,<br/>Agent Lee<br/>Founder, RapidWebDevelop LLC<br/>üìß agentlee@rapidwebdevelop.com<br/>üìç Milwaukee, WI</p>
    </div>

    <!-- Store Email Template -->
    <div id="store-email-template">
      <h2 style="color: #2d3748;">üé∂ Your Store Can Help <strong><u>Set Artists Free</u></strong></h2>
      <p>Your store is more than shelves and sales. It's a <strong><u>safe space</u></strong> for creators. A <strong><u>launchpad</u></strong> for dreams. We're building something that gives them the <strong><u>next step</u></strong>.</p>
      <h3 style="color: #2b6cb0;">üí° Introducing <strong>LEEWAY‚Ñ¢</strong> by <strong>Rapid Web Develop LLC</strong></h3>
      <ul>
        <li><strong><u>100% Ownership</u></strong>. No subscriptions. No middlemen.</li>
        <li>Sell music, merch, livestream ‚Äî even offline.</li>
        <li>Includes Agent Lee: a built-in voice assistant that helps them grow.</li>
      </ul>
      <p>This is more than a website. It's a <strong><u>freedom document</u></strong> ‚Äî and it belongs to them.</p>
      <h3>üè™ How You Can Help</h3>
      <p>We're asking you to place <strong>one flyer or poster</strong> in your space. That's it. We'll send everything:</p>
      <ul>
        <li>‚úÖ Custom flyer or poster</li>
        <li>‚úÖ QR code to demo the platform</li>
        <li>‚úÖ Local artist support, no pressure sales</li>
      </ul>
      <p><strong><u>Be part of the movement</u></strong>. Empower artists. Change the game.</p>
      <p>Reply "Yes" and we'll deliver today.</p>
      <p>Thank you for all you do.</p>
      <p><strong>‚Äî Agent Lee</strong><br/>
      Founder, <strong>Rapid Web Develop LLC</strong><br/>
      üìû (414) 626-9992<br/>
      üåê <strong>RapidWebDevelop.com</strong></p>
    </div>

    <!-- Boost Network Template -->
    <div id="boost-network-template">
      <h3>üìß Email Template 2: Boost Your Local Artist Network</h3>
      <p><strong>Subject:</strong> Let's Help Local Artists Win ‚Äî Free Platform + Store Partnership</p>
      <p>Hello [Store Name] Team,</p>
      <p>I'm launching a local-first, artist-owned web platform that gives musicians everything they need ‚Äî sales tools, fan engagement, tour management, and real revenue ‚Äî with no middlemen taking a cut.</p>
      <p>Your store is a go-to destination for music creators. I'd love to provide you with a free flyer/poster to help inform the artists you serve about this opportunity.</p>
      <p>No sales pitch. Just real tools and local empowerment. We offer:</p>
      <ul>
        <li>‚úÖ 100% ownership</li>
        <li>‚úÖ No monthly fees</li>
        <li>‚úÖ Local support and onboarding</li>
        <li>‚úÖ AI assistants to guide artists at every step</li>
      </ul>
      <p>If you'd be open to placing a flyer in your space, I'll hand-deliver or email it to you immediately.</p>
      <p>Thanks for supporting the future of independent music!</p>
      <p>Best,<br/>Agent Lee<br/>üìû (414) 626-9992<br/>üñ•Ô∏è rapidwebdevelop.com</p>
    </div>

    <!-- Quick Direct Template -->
    <div id="quick-direct-template">
      <h3>üìß Email Template 3: Short &amp; Direct</h3>
      <p><strong>Subject:</strong> Quick Question from Agent Lee (Artist Support)</p>
      <p>Hi [Name],</p>
      <p>Would you be open to placing a free flyer in your shop to help spread awareness about a powerful new web platform made for artists, by artists?</p>
      <p>It's one file. One-time payment. No subscriptions. 100% ownership ‚Äî music, merch, fans, ads, and all.</p>
      <p>I'll provide the flyer and a link for more info. No pressure, just trying to help creators win.</p>
      <p>Let me know ‚Äî and thanks either way.</p>
      <p>‚Äî<br/>Agent Lee<br/>üìû (414) 626-9992<br/>üñ•Ô∏è Visit the Project Deck</p>
    </div>
  </div>
</body>
</html>